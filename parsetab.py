
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSANT BREAK CASE CLASS CLOSE_TAG COLON COMMA DEFAULT DEQUAL DIVIDE ECHO ELSE EQUAL FALSE FOR FUNCTION FUNCTION_NAME GREATER GREATEREQUAL ID IF ISEQUAL LBLOCK LBRACKET LESS LESSEQUAL LPAREN MINUS MINUSMINUS NUMBER OPEN_TAG PLUS PLUSPLUS PRIVATE PROTECTED PUBLIC RBLOCK RBRACKET REQUIRE RETURN RPAREN SEMICOLON STRING SWITCH TIMES TRUE WHILEprogram : OPEN_TAG declaration_list CLOSE_TAGstatement : expressionexpression : expression PLUS termdeclaration_list : declaration_list declarationdeclaration_list : declarationdeclaration : var_declaration\n                                                                            | fun_declaration\n                                                                            | header_declaration\n                                                                            | class_declaration\n                                                                            | print_stmt\n                                                                            | selection_stmt\n                                                                            | iteration_stmt\n        print_stmt : print_stmt ECHO STRING SEMICOLON\n                                                                            | print_stmt ECHO ID SEMICOLON\n                                                                            | empty\n        header_declaration : REQUIRE LPAREN STRING RPAREN SEMICOLONclass_declaration : CLASS FUNCTION_NAME class_stmtclass_stmt : LBLOCK attributes methods RBLOCKclass_stmt : LBLOCK empty RBLOCKclass_stmt : LBLOCK attributes RBLOCKattributes : attributes scope var_declarationattributes : scope var_declarationmethods : methods scope fun_declarationmethods : scope fun_declarationscope : PRIVATE\n                    | PUBLIC\n                    | PROTECTED\n        var_declaration : ID SEMICOLON var_declaration\n                                                                                                    | ID SEMICOLON\n                                                                                                    | ID EQUAL NUMBER SEMICOLON var_declaration\n                                                                                                    | ID EQUAL NUMBER SEMICOLON\n                                                                                                    | ID EQUAL boolean SEMICOLON var_declaration\n                                                                                                    | ID EQUAL boolean SEMICOLON\n                                                                                                    | ID EQUAL ID SEMICOLON var_declaration\n                                                                                                    | ID EQUAL ID SEMICOLON\n                                                                                                    | AMPERSANT ID SEMICOLON var_declaration\n                                                                                                    | AMPERSANT ID SEMICOLON\n        fun_declaration : FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmtparams : param_listparams : emptyparam_list : param_list COMMA paramparam_list : paramparam : IDparam : ID LBRACKET RBRACKETcompount_stmt : LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCKlocal_declarations : local_declarations var_declarationlocal_declarations : emptystatement_list : statement_list statementstatement_list : emptystatement : expression_stmt\n                                | compount_stmt\n                                | selection_stmt\n                                | iteration_stmt\n                                | return_stmt\n        expression_stmt : expression SEMICOLONexpression_stmt : SEMICOLONselection_stmt : IF LPAREN expression RPAREN statement\n                                                | IF LPAREN expression RPAREN statement ELSE statement\n                                                | SWITCH LPAREN var RPAREN statement\n                                                | CASE NUMBER COLON statement BREAK SEMICOLON\n                                                | DEFAULT COLON statement BREAK SEMICOLON\n                                                | print_stmt\n        iteration_stmt : FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement\n                                        | WHILE LPAREN expression RPAREN statement\n        iteration_stmt : print_stmtreturn_stmt : RETURN SEMICOLONreturn_stmt : RETURN expression SEMICOLONexpression : var EQUAL expressionexpression : simple_expressionexpression : var EQUAL AMPERSANT IDvar : IDvar : ID LBRACKET expression RBRACKETsimple_expression : additive_expression relop additive_expressionsimple_expression : additive_expressionrelop : LESS\n                        | LESSEQUAL\n                        | GREATER\n                        | GREATEREQUAL\n                        | DEQUAL\n                        | ISEQUAL\n        additive_expression : additive_expression addop termadditive_expression : termadditive_expression : term MINUSMINUSadditive_expression : term PLUSPLUSaddop : PLUS\n                        | MINUS\n        term : term mulop factorterm : factormulop : TIMES\n                        | DIVIDE\n        factor : LPAREN expression RPARENfactor : varfactor : callfactor : NUMBERfactor : booleancall : ID LPAREN args RPARENargs : args_list\n                        | empty\n        args_list : args_list COMMA expressionargs_list : expressionboolean : TRUE\n                                        | FALSE\n        empty : '
    
_lr_action_items = {'OPEN_TAG':([0,],[2,]),'$end':([1,24,],[0,-1,]),'ID':([2,3,4,5,6,7,8,9,10,11,13,17,25,26,27,28,33,34,36,37,38,41,45,46,47,48,50,52,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,76,79,80,81,82,83,84,93,94,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,123,125,126,127,128,129,131,133,135,136,137,139,140,141,142,143,144,145,151,152,153,155,156,157,158,160,161,164,168,169,170,171,172,173,174,175,176,178,180,181,183,184,185,186,187,],[12,12,-5,-6,-7,-8,-9,-10,-11,-12,29,-15,-4,40,12,42,57,64,57,12,57,-28,-101,-102,12,89,-17,57,-82,-92,-69,-71,-74,-88,-93,-94,-95,57,-56,-2,-50,-51,-52,-53,-54,-103,-62,57,-13,-14,12,12,12,-36,12,-25,-26,-27,57,57,-83,-84,57,-89,-90,57,57,57,57,57,-75,-76,-77,-78,-79,-80,-85,-86,57,-55,-103,-66,57,57,-34,-30,-32,89,-16,-20,12,-19,-91,-57,-3,-92,-87,-68,169,-73,-81,-59,-61,12,-47,-67,-64,-38,-18,57,-70,-72,-96,57,-60,-103,-46,57,-58,57,-49,-62,-48,57,-45,-63,]),'AMPERSANT':([2,3,4,5,6,7,8,9,10,11,17,25,27,37,41,45,46,47,50,54,55,56,57,58,59,60,61,62,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,93,94,95,96,98,100,101,105,118,121,122,123,126,127,128,129,133,135,136,137,139,140,141,142,143,144,151,152,153,155,156,157,158,160,161,164,168,169,170,171,173,175,178,185,186,187,],[13,13,-5,-6,-7,-8,-9,-10,-11,-12,-15,-4,13,13,-28,-101,-102,13,-17,-82,-92,-69,-71,-74,-88,-93,-94,-95,-56,-2,-50,-51,-52,-53,-54,-103,-62,-13,-14,13,13,13,-36,13,-25,-26,-27,-103,-83,-84,145,-103,-55,-103,-66,-103,-34,-30,-32,-16,-20,13,-19,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,13,-47,-67,-64,-38,-18,-103,-70,-72,-96,-60,-46,-58,-103,-45,-63,]),'FUNCTION':([2,3,4,5,6,7,8,9,10,11,17,25,27,41,45,46,47,50,54,55,56,57,58,59,60,61,62,67,68,69,70,71,72,73,75,79,80,81,82,83,84,94,95,96,98,100,101,118,121,123,126,127,128,129,133,135,136,137,139,140,141,142,143,144,151,152,153,155,158,160,161,164,165,168,169,170,171,173,178,185,186,187,],[14,14,-5,-6,-7,-8,-9,-10,-11,-12,-15,-4,-29,-28,-101,-102,-37,-17,-82,-92,-69,-71,-74,-88,-93,-94,-95,-56,-2,-50,-51,-52,-53,-54,-62,-13,-14,-35,-31,-33,-36,-25,-26,-27,-103,-83,-84,-103,-55,-66,-103,-34,-30,-32,-16,-20,14,-19,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-67,-64,-38,-18,14,-103,-70,-72,-96,-60,-58,-103,-45,-63,]),'REQUIRE':([2,3,4,5,6,7,8,9,10,11,17,25,27,41,45,46,47,50,54,55,56,57,58,59,60,61,62,67,68,69,70,71,72,73,75,79,80,81,82,83,84,98,100,101,118,121,123,126,127,128,129,133,135,137,139,140,141,142,143,144,151,152,153,155,158,160,161,164,168,169,170,171,173,178,185,186,187,],[15,15,-5,-6,-7,-8,-9,-10,-11,-12,-15,-4,-29,-28,-101,-102,-37,-17,-82,-92,-69,-71,-74,-88,-93,-94,-95,-56,-2,-50,-51,-52,-53,-54,-62,-13,-14,-35,-31,-33,-36,-103,-83,-84,-103,-55,-66,-103,-34,-30,-32,-16,-20,-19,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-67,-64,-38,-18,-103,-70,-72,-96,-60,-58,-103,-45,-63,]),'CLASS':([2,3,4,5,6,7,8,9,10,11,17,25,27,41,45,46,47,50,54,55,56,57,58,59,60,61,62,67,68,69,70,71,72,73,75,79,80,81,82,83,84,98,100,101,118,121,123,126,127,128,129,133,135,137,139,140,141,142,143,144,151,152,153,155,158,160,161,164,168,169,170,171,173,178,185,186,187,],[16,16,-5,-6,-7,-8,-9,-10,-11,-12,-15,-4,-29,-28,-101,-102,-37,-17,-82,-92,-69,-71,-74,-88,-93,-94,-95,-56,-2,-50,-51,-52,-53,-54,-62,-13,-14,-35,-31,-33,-36,-103,-83,-84,-103,-55,-66,-103,-34,-30,-32,-16,-20,-19,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-67,-64,-38,-18,-103,-70,-72,-96,-60,-58,-103,-45,-63,]),'IF':([2,3,4,5,6,7,8,9,10,11,17,25,27,36,41,45,46,47,50,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,98,100,101,118,121,122,123,126,127,128,129,133,135,137,139,140,141,142,143,144,151,152,153,155,156,157,158,160,161,164,168,169,170,171,173,174,175,178,180,181,183,184,185,186,187,],[18,18,-5,-6,-7,-8,-9,-10,-11,-12,-15,-4,-29,18,-28,-101,-102,-37,-17,-82,-92,-69,-71,-74,-88,-93,-94,-95,18,-56,-2,-50,-51,-52,-53,-54,-103,-62,-13,-14,-35,-31,-33,-36,18,-83,-84,18,-55,-103,-66,18,-34,-30,-32,-16,-20,-19,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,-38,-18,18,-70,-72,-96,-60,-103,-46,-58,18,-49,-62,-48,18,-45,-63,]),'SWITCH':([2,3,4,5,6,7,8,9,10,11,17,25,27,36,41,45,46,47,50,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,98,100,101,118,121,122,123,126,127,128,129,133,135,137,139,140,141,142,143,144,151,152,153,155,156,157,158,160,161,164,168,169,170,171,173,174,175,178,180,181,183,184,185,186,187,],[19,19,-5,-6,-7,-8,-9,-10,-11,-12,-15,-4,-29,19,-28,-101,-102,-37,-17,-82,-92,-69,-71,-74,-88,-93,-94,-95,19,-56,-2,-50,-51,-52,-53,-54,-103,-62,-13,-14,-35,-31,-33,-36,19,-83,-84,19,-55,-103,-66,19,-34,-30,-32,-16,-20,-19,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,-38,-18,19,-70,-72,-96,-60,-103,-46,-58,19,-49,-62,-48,19,-45,-63,]),'CASE':([2,3,4,5,6,7,8,9,10,11,17,25,27,36,41,45,46,47,50,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,98,100,101,118,121,122,123,126,127,128,129,133,135,137,139,140,141,142,143,144,151,152,153,155,156,157,158,160,161,164,168,169,170,171,173,174,175,178,180,181,183,184,185,186,187,],[20,20,-5,-6,-7,-8,-9,-10,-11,-12,-15,-4,-29,20,-28,-101,-102,-37,-17,-82,-92,-69,-71,-74,-88,-93,-94,-95,20,-56,-2,-50,-51,-52,-53,-54,-103,-62,-13,-14,-35,-31,-33,-36,20,-83,-84,20,-55,-103,-66,20,-34,-30,-32,-16,-20,-19,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,-38,-18,20,-70,-72,-96,-60,-103,-46,-58,20,-49,-62,-48,20,-45,-63,]),'DEFAULT':([2,3,4,5,6,7,8,9,10,11,17,25,27,36,41,45,46,47,50,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,98,100,101,118,121,122,123,126,127,128,129,133,135,137,139,140,141,142,143,144,151,152,153,155,156,157,158,160,161,164,168,169,170,171,173,174,175,178,180,181,183,184,185,186,187,],[21,21,-5,-6,-7,-8,-9,-10,-11,-12,-15,-4,-29,21,-28,-101,-102,-37,-17,-82,-92,-69,-71,-74,-88,-93,-94,-95,21,-56,-2,-50,-51,-52,-53,-54,-103,-62,-13,-14,-35,-31,-33,-36,21,-83,-84,21,-55,-103,-66,21,-34,-30,-32,-16,-20,-19,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,-38,-18,21,-70,-72,-96,-60,-103,-46,-58,21,-49,-62,-48,21,-45,-63,]),'FOR':([2,3,4,5,6,7,8,9,10,11,17,25,27,36,41,45,46,47,50,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,98,100,101,118,121,122,123,126,127,128,129,133,135,137,139,140,141,142,143,144,151,152,153,155,156,157,158,160,161,164,168,169,170,171,173,174,175,178,180,181,183,184,185,186,187,],[22,22,-5,-6,-7,-8,-9,-10,-11,-12,-15,-4,-29,22,-28,-101,-102,-37,-17,-82,-92,-69,-71,-74,-88,-93,-94,-95,22,-56,-2,-50,-51,-52,-53,-54,-103,-62,-13,-14,-35,-31,-33,-36,22,-83,-84,22,-55,-103,-66,22,-34,-30,-32,-16,-20,-19,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,-38,-18,22,-70,-72,-96,-60,-103,-46,-58,22,-49,-62,-48,22,-45,-63,]),'WHILE':([2,3,4,5,6,7,8,9,10,11,17,25,27,36,41,45,46,47,50,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,98,100,101,118,121,122,123,126,127,128,129,133,135,137,139,140,141,142,143,144,151,152,153,155,156,157,158,160,161,164,168,169,170,171,173,174,175,178,180,181,183,184,185,186,187,],[23,23,-5,-6,-7,-8,-9,-10,-11,-12,-15,-4,-29,23,-28,-101,-102,-37,-17,-82,-92,-69,-71,-74,-88,-93,-94,-95,23,-56,-2,-50,-51,-52,-53,-54,-103,-62,-13,-14,-35,-31,-33,-36,23,-83,-84,23,-55,-103,-66,23,-34,-30,-32,-16,-20,-19,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,-38,-18,23,-70,-72,-96,-60,-103,-46,-58,23,-49,-62,-48,23,-45,-63,]),'ECHO':([2,3,4,5,6,7,8,9,10,11,17,25,27,36,41,45,46,47,50,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,98,100,101,118,121,122,123,126,127,128,129,133,135,137,139,140,141,142,143,144,151,152,153,155,156,157,158,160,161,164,168,169,170,171,173,174,175,178,180,181,183,184,185,186,187,],[-103,-103,-5,-6,-7,-8,-9,26,-11,-12,-15,-4,-29,-103,-28,-101,-102,-37,-17,-82,-92,-69,-71,-74,-88,-93,-94,-95,-103,-56,-2,-50,-51,-52,-53,-54,-103,26,-13,-14,-35,-31,-33,-36,-103,-83,-84,-103,-55,26,-66,-103,-34,-30,-32,-16,-20,-19,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,-38,-18,-103,-70,-72,-96,-60,26,-46,-58,-103,-49,26,-48,-103,-45,-63,]),'CLOSE_TAG':([2,3,4,5,6,7,8,9,10,11,17,25,27,41,45,46,47,50,54,55,56,57,58,59,60,61,62,67,68,69,70,71,72,73,75,79,80,81,82,83,84,98,100,101,118,121,123,126,127,128,129,133,135,137,139,140,141,142,143,144,151,152,153,155,158,160,161,164,168,169,170,171,173,178,185,186,187,],[-103,24,-5,-6,-7,-8,-9,-10,-11,-12,-15,-4,-29,-28,-101,-102,-37,-17,-82,-92,-69,-71,-74,-88,-93,-94,-95,-56,-2,-50,-51,-52,-53,-54,-62,-13,-14,-35,-31,-33,-36,-103,-83,-84,-103,-55,-66,-103,-34,-30,-32,-16,-20,-19,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-67,-64,-38,-18,-103,-70,-72,-96,-60,-58,-103,-45,-63,]),'SEMICOLON':([12,17,27,29,36,39,40,41,42,43,44,45,46,47,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,84,90,98,100,101,118,120,121,122,123,124,126,127,128,129,139,140,141,142,143,144,151,152,153,154,155,156,157,158,159,160,168,169,170,171,173,174,175,178,180,181,183,184,185,186,187,],[27,-15,-29,47,67,79,80,-28,81,82,83,-101,-102,-37,-82,-92,-69,-71,-74,-88,-93,-94,-95,67,-56,121,-50,-51,-52,-53,-54,-103,-62,123,125,-13,-14,-35,-31,-33,-36,133,67,-83,-84,67,155,-55,-103,-66,158,67,-34,-30,-32,-91,-57,-3,-92,-87,-68,-73,-81,-59,173,-61,-103,-47,-67,176,-64,67,-70,-72,-96,-60,-103,-46,-58,67,-49,-62,-48,67,-45,-63,]),'EQUAL':([12,55,57,170,],[28,105,-71,-72,]),'FUNCTION_NAME':([14,16,],[30,32,]),'LPAREN':([15,17,18,19,22,23,27,30,33,36,38,41,45,46,47,52,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,76,79,80,81,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,123,125,126,127,128,129,139,140,141,142,143,144,151,152,153,155,156,157,158,160,168,169,170,171,172,173,174,175,176,178,180,181,183,184,185,186,187,],[31,-15,33,34,37,38,-29,48,52,52,52,-28,-101,-102,-37,52,-82,-92,-69,107,-74,-88,-93,-94,-95,52,-56,-2,-50,-51,-52,-53,-54,-103,-62,52,-13,-14,-35,-31,-33,-36,52,52,-83,-84,52,-89,-90,52,52,52,52,52,-75,-76,-77,-78,-79,-80,-85,-86,52,-55,-103,-66,52,52,-34,-30,-32,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,52,-70,-72,-96,52,-60,-103,-46,52,-58,52,-49,-62,-48,52,-45,-63,]),'BREAK':([17,36,45,46,54,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,75,79,80,98,100,101,118,119,121,123,126,139,140,141,142,143,144,151,152,153,155,158,160,168,169,170,171,173,178,185,186,187,],[-15,-103,-101,-102,-82,-92,-69,-71,-74,-88,-93,-94,-95,-103,120,-56,-2,-50,-51,-52,-53,-54,-62,-13,-14,-103,-83,-84,-103,154,-55,-66,-103,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-67,-64,-103,-70,-72,-96,-60,-58,-103,-45,-63,]),'LBLOCK':([17,27,32,36,41,45,46,47,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,98,100,101,118,121,122,123,126,127,128,129,130,139,140,141,142,143,144,151,152,153,155,156,157,158,160,168,169,170,171,173,174,175,178,180,181,183,184,185,186,187,],[-15,-29,51,74,-28,-101,-102,-37,-82,-92,-69,-71,-74,-88,-93,-94,-95,74,-56,-2,-50,-51,-52,-53,-54,-103,-62,-13,-14,-35,-31,-33,-36,74,-83,-84,74,-55,-103,-66,74,-34,-30,-32,74,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,74,-70,-72,-96,-60,-103,-46,-58,74,-49,-62,-48,74,-45,-63,]),'RETURN':([17,27,36,41,45,46,47,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,98,100,101,118,121,122,123,126,127,128,129,139,140,141,142,143,144,151,152,153,155,156,157,158,160,168,169,170,171,173,174,175,178,180,181,183,184,185,186,187,],[-15,-29,76,-28,-101,-102,-37,-82,-92,-69,-71,-74,-88,-93,-94,-95,76,-56,-2,-50,-51,-52,-53,-54,-103,-62,-13,-14,-35,-31,-33,-36,76,-83,-84,76,-55,-103,-66,76,-34,-30,-32,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,76,-70,-72,-96,-60,-103,-46,-58,76,-49,-62,-48,76,-45,-63,]),'NUMBER':([17,20,27,28,33,36,38,41,45,46,47,52,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,76,79,80,81,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,123,125,126,127,128,129,139,140,141,142,143,144,151,152,153,155,156,157,158,160,168,169,170,171,172,173,174,175,176,178,180,181,183,184,185,186,187,],[-15,35,-29,43,61,61,61,-28,-101,-102,-37,61,-82,-92,-69,-71,-74,-88,-93,-94,-95,61,-56,-2,-50,-51,-52,-53,-54,-103,-62,61,-13,-14,-35,-31,-33,-36,61,61,-83,-84,61,-89,-90,61,61,61,61,61,-75,-76,-77,-78,-79,-80,-85,-86,61,-55,-103,-66,61,61,-34,-30,-32,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,61,-70,-72,-96,61,-60,-103,-46,61,-58,61,-49,-62,-48,61,-45,-63,]),'TRUE':([17,27,28,33,36,38,41,45,46,47,52,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,76,79,80,81,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,123,125,126,127,128,129,139,140,141,142,143,144,151,152,153,155,156,157,158,160,168,169,170,171,172,173,174,175,176,178,180,181,183,184,185,186,187,],[-15,-29,45,45,45,45,-28,-101,-102,-37,45,-82,-92,-69,-71,-74,-88,-93,-94,-95,45,-56,-2,-50,-51,-52,-53,-54,-103,-62,45,-13,-14,-35,-31,-33,-36,45,45,-83,-84,45,-89,-90,45,45,45,45,45,-75,-76,-77,-78,-79,-80,-85,-86,45,-55,-103,-66,45,45,-34,-30,-32,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,45,-70,-72,-96,45,-60,-103,-46,45,-58,45,-49,-62,-48,45,-45,-63,]),'FALSE':([17,27,28,33,36,38,41,45,46,47,52,54,55,56,57,58,59,60,61,62,65,67,68,69,70,71,72,73,74,75,76,79,80,81,82,83,84,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,123,125,126,127,128,129,139,140,141,142,143,144,151,152,153,155,156,157,158,160,168,169,170,171,172,173,174,175,176,178,180,181,183,184,185,186,187,],[-15,-29,46,46,46,46,-28,-101,-102,-37,46,-82,-92,-69,-71,-74,-88,-93,-94,-95,46,-56,-2,-50,-51,-52,-53,-54,-103,-62,46,-13,-14,-35,-31,-33,-36,46,46,-83,-84,46,-89,-90,46,46,46,46,46,-75,-76,-77,-78,-79,-80,-85,-86,46,-55,-103,-66,46,46,-34,-30,-32,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,46,-70,-72,-96,46,-60,-103,-46,46,-58,46,-49,-62,-48,46,-45,-63,]),'RBLOCK':([17,27,41,45,46,47,51,54,55,56,57,58,59,60,61,62,67,68,69,70,71,72,73,74,75,79,80,81,82,83,84,91,92,98,100,101,118,121,122,123,126,127,128,129,134,138,139,140,141,142,143,144,151,152,153,155,156,157,158,160,161,166,167,168,169,170,171,173,174,175,177,178,180,181,183,184,185,186,187,],[-15,-29,-28,-101,-102,-37,-103,-82,-92,-69,-71,-74,-88,-93,-94,-95,-56,-2,-50,-51,-52,-53,-54,-103,-62,-13,-14,-35,-31,-33,-36,135,137,-103,-83,-84,-103,-55,-103,-66,-103,-34,-30,-32,164,-22,-91,-57,-3,-92,-87,-68,-73,-81,-59,-61,-103,-47,-67,-64,-38,-21,-24,-103,-70,-72,-96,-60,-103,-46,-23,-58,-103,-49,186,-48,-103,-45,-63,]),'ELSE':([17,45,46,54,55,56,57,58,59,60,61,62,67,68,69,70,71,72,73,75,79,80,98,100,101,118,121,123,126,139,140,141,142,143,144,151,152,153,155,158,160,168,169,170,171,173,178,185,186,187,],[-15,-101,-102,-82,-92,-69,-71,-74,-88,-93,-94,-95,-56,-2,-50,-51,-52,-53,-54,-62,-13,-14,-103,-83,-84,-103,-55,-66,-103,-91,168,-3,-92,-87,-68,-73,-81,-59,-61,-67,-64,-103,-70,-72,-96,-60,-58,-103,-45,-63,]),'COLON':([21,35,],[36,65,]),'STRING':([26,31,],[39,49,]),'PRIVATE':([27,41,47,51,81,82,83,84,91,127,128,129,134,138,161,166,167,177,186,],[-29,-28,-37,94,-35,-31,-33,-36,94,-34,-30,-32,94,-22,-38,-21,-24,-23,-45,]),'PUBLIC':([27,41,47,51,81,82,83,84,91,127,128,129,134,138,161,166,167,177,186,],[-29,-28,-37,95,-35,-31,-33,-36,95,-34,-30,-32,95,-22,-38,-21,-24,-23,-45,]),'PROTECTED':([27,41,47,51,81,82,83,84,91,127,128,129,134,138,161,166,167,177,186,],[-29,-28,-37,96,-35,-31,-33,-36,96,-34,-30,-32,96,-22,-38,-21,-24,-23,-45,]),'MINUSMINUS':([45,46,54,55,57,59,60,61,62,139,142,143,170,171,],[-101,-102,100,-92,-71,-88,-93,-94,-95,-91,-92,-87,-72,-96,]),'PLUSPLUS':([45,46,54,55,57,59,60,61,62,139,142,143,170,171,],[-101,-102,101,-92,-71,-88,-93,-94,-95,-91,-92,-87,-72,-96,]),'TIMES':([45,46,54,55,57,59,60,61,62,139,141,142,143,152,170,171,],[-101,-102,103,-92,-71,-88,-93,-94,-95,-91,103,-92,-87,103,-72,-96,]),'DIVIDE':([45,46,54,55,57,59,60,61,62,139,141,142,143,152,170,171,],[-101,-102,104,-92,-71,-88,-93,-94,-95,-91,104,-92,-87,104,-72,-96,]),'LESS':([45,46,54,55,57,58,59,60,61,62,100,101,139,142,143,152,170,171,],[-101,-102,-82,-92,-71,110,-88,-93,-94,-95,-83,-84,-91,-92,-87,-81,-72,-96,]),'LESSEQUAL':([45,46,54,55,57,58,59,60,61,62,100,101,139,142,143,152,170,171,],[-101,-102,-82,-92,-71,111,-88,-93,-94,-95,-83,-84,-91,-92,-87,-81,-72,-96,]),'GREATER':([45,46,54,55,57,58,59,60,61,62,100,101,139,142,143,152,170,171,],[-101,-102,-82,-92,-71,112,-88,-93,-94,-95,-83,-84,-91,-92,-87,-81,-72,-96,]),'GREATEREQUAL':([45,46,54,55,57,58,59,60,61,62,100,101,139,142,143,152,170,171,],[-101,-102,-82,-92,-71,113,-88,-93,-94,-95,-83,-84,-91,-92,-87,-81,-72,-96,]),'DEQUAL':([45,46,54,55,57,58,59,60,61,62,100,101,139,142,143,152,170,171,],[-101,-102,-82,-92,-71,114,-88,-93,-94,-95,-83,-84,-91,-92,-87,-81,-72,-96,]),'ISEQUAL':([45,46,54,55,57,58,59,60,61,62,100,101,139,142,143,152,170,171,],[-101,-102,-82,-92,-71,115,-88,-93,-94,-95,-83,-84,-91,-92,-87,-81,-72,-96,]),'PLUS':([45,46,53,54,55,56,57,58,59,60,61,62,68,78,97,100,101,124,139,141,142,143,144,146,150,151,152,159,169,170,171,179,182,],[-101,-102,99,-82,-92,-69,-71,116,-88,-93,-94,-95,99,99,99,-83,-84,99,-91,-3,-92,-87,99,99,99,116,-81,99,-70,-72,-96,99,116,]),'MINUS':([45,46,54,55,57,58,59,60,61,62,100,101,139,142,143,151,152,170,171,182,],[-101,-102,-82,-92,-71,117,-88,-93,-94,-95,-83,-84,-91,-92,-87,117,-81,-72,-96,117,]),'RPAREN':([45,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,78,85,86,87,88,89,97,100,101,107,139,141,142,143,144,147,148,149,150,151,152,162,163,169,170,171,179,182,],[-101,-102,-103,90,98,-82,-92,-69,-71,-74,-88,-93,-94,-95,118,-71,126,130,-39,-40,-42,-43,139,-83,-84,-103,-91,-3,-92,-87,-68,171,-97,-98,-100,-73,-81,-41,-44,-70,-72,-96,-99,185,]),'RBRACKET':([45,46,54,55,56,57,58,59,60,61,62,100,101,132,139,141,142,143,144,146,151,152,169,170,171,],[-101,-102,-82,-92,-69,-71,-74,-88,-93,-94,-95,-83,-84,163,-91,-3,-92,-87,-68,170,-73,-81,-70,-72,-96,]),'COMMA':([45,46,54,55,56,57,58,59,60,61,62,86,88,89,100,101,139,141,142,143,144,148,150,151,152,162,163,169,170,171,179,],[-101,-102,-82,-92,-69,-71,-74,-88,-93,-94,-95,131,-42,-43,-83,-84,-91,-3,-92,-87,-68,172,-100,-73,-81,-41,-44,-70,-72,-96,-99,]),'LBRACKET':([57,64,89,],[106,106,132,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([2,],[3,]),'declaration':([2,3,],[4,25,]),'var_declaration':([2,3,27,37,47,81,82,83,93,136,156,],[5,5,41,77,84,127,128,129,138,166,175,]),'fun_declaration':([2,3,136,165,],[6,6,167,177,]),'header_declaration':([2,3,],[7,7,]),'class_declaration':([2,3,],[8,8,]),'print_stmt':([2,3,36,65,74,98,118,126,156,168,180,185,],[9,9,75,75,122,75,75,75,174,75,183,75,]),'selection_stmt':([2,3,36,65,98,118,126,168,180,185,],[10,10,71,71,71,71,71,71,71,71,]),'iteration_stmt':([2,3,36,65,98,118,126,168,180,185,],[11,11,72,72,72,72,72,72,72,72,]),'empty':([2,3,36,48,51,65,74,98,107,118,122,126,156,168,174,180,185,],[17,17,17,87,92,17,17,17,149,17,157,17,17,17,181,17,17,]),'boolean':([28,33,36,38,52,65,76,98,99,102,105,106,107,108,109,118,125,126,168,172,176,180,185,],[44,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'class_stmt':([32,],[50,]),'expression':([33,36,38,52,65,76,98,105,106,107,118,125,126,168,172,180,185,],[53,68,78,97,68,124,68,144,146,150,68,159,68,68,179,68,68,]),'term':([33,36,38,52,65,76,98,99,105,106,107,108,109,118,125,126,168,172,176,180,185,],[54,54,54,54,54,54,54,141,54,54,54,54,152,54,54,54,54,54,54,54,54,]),'var':([33,34,36,38,52,65,76,98,99,102,105,106,107,108,109,118,125,126,168,172,176,180,185,],[55,63,55,55,55,55,55,55,142,142,55,55,55,142,142,55,55,55,55,55,142,55,55,]),'simple_expression':([33,36,38,52,65,76,98,105,106,107,118,125,126,168,172,180,185,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'additive_expression':([33,36,38,52,65,76,98,105,106,107,108,118,125,126,168,172,176,180,185,],[58,58,58,58,58,58,58,58,58,58,151,58,58,58,58,58,182,58,58,]),'factor':([33,36,38,52,65,76,98,99,102,105,106,107,108,109,118,125,126,168,172,176,180,185,],[59,59,59,59,59,59,59,59,143,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'call':([33,36,38,52,65,76,98,99,102,105,106,107,108,109,118,125,126,168,172,176,180,185,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'statement':([36,65,98,118,126,168,180,185,],[66,119,140,153,160,178,184,187,]),'expression_stmt':([36,65,98,118,126,168,180,185,],[69,69,69,69,69,69,69,69,]),'compount_stmt':([36,65,98,118,126,130,168,180,185,],[70,70,70,70,70,161,70,70,70,]),'return_stmt':([36,65,98,118,126,168,180,185,],[73,73,73,73,73,73,73,73,]),'params':([48,],[85,]),'param_list':([48,],[86,]),'param':([48,131,],[88,162,]),'attributes':([51,],[91,]),'scope':([51,91,134,],[93,136,165,]),'mulop':([54,141,152,],[102,102,102,]),'relop':([58,],[108,]),'addop':([58,151,182,],[109,109,109,]),'methods':([91,],[134,]),'args':([107,],[147,]),'args_list':([107,],[148,]),'local_declarations':([122,],[156,]),'statement_list':([174,],[180,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> OPEN_TAG declaration_list CLOSE_TAG','program',3,'p_program','Parser.py',23),
  ('statement -> expression','statement',1,'p_statement_expr','Parser.py',28),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','Parser.py',32),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','Parser.py',36),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','Parser.py',40),
  ('declaration -> var_declaration','declaration',1,'p_declaration','Parser.py',44),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','Parser.py',45),
  ('declaration -> header_declaration','declaration',1,'p_declaration','Parser.py',46),
  ('declaration -> class_declaration','declaration',1,'p_declaration','Parser.py',47),
  ('declaration -> print_stmt','declaration',1,'p_declaration','Parser.py',48),
  ('declaration -> selection_stmt','declaration',1,'p_declaration','Parser.py',49),
  ('declaration -> iteration_stmt','declaration',1,'p_declaration','Parser.py',50),
  ('print_stmt -> print_stmt ECHO STRING SEMICOLON','print_stmt',4,'p_print_stmt','Parser.py',55),
  ('print_stmt -> print_stmt ECHO ID SEMICOLON','print_stmt',4,'p_print_stmt','Parser.py',56),
  ('print_stmt -> empty','print_stmt',1,'p_print_stmt','Parser.py',57),
  ('header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON','header_declaration',5,'p_header_declaration','Parser.py',62),
  ('class_declaration -> CLASS FUNCTION_NAME class_stmt','class_declaration',3,'p_class_declaration','Parser.py',66),
  ('class_stmt -> LBLOCK attributes methods RBLOCK','class_stmt',4,'p_class_stmt1','Parser.py',70),
  ('class_stmt -> LBLOCK empty RBLOCK','class_stmt',3,'p_class_stmt2','Parser.py',74),
  ('class_stmt -> LBLOCK attributes RBLOCK','class_stmt',3,'p_class_stmt3','Parser.py',78),
  ('attributes -> attributes scope var_declaration','attributes',3,'p_attributes1','Parser.py',82),
  ('attributes -> scope var_declaration','attributes',2,'p_attributes2','Parser.py',86),
  ('methods -> methods scope fun_declaration','methods',3,'p_methods1','Parser.py',90),
  ('methods -> scope fun_declaration','methods',2,'p_methods2','Parser.py',94),
  ('scope -> PRIVATE','scope',1,'p_scope','Parser.py',98),
  ('scope -> PUBLIC','scope',1,'p_scope','Parser.py',99),
  ('scope -> PROTECTED','scope',1,'p_scope','Parser.py',100),
  ('var_declaration -> ID SEMICOLON var_declaration','var_declaration',3,'p_var_declaration','Parser.py',105),
  ('var_declaration -> ID SEMICOLON','var_declaration',2,'p_var_declaration','Parser.py',106),
  ('var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration','var_declaration',5,'p_var_declaration','Parser.py',107),
  ('var_declaration -> ID EQUAL NUMBER SEMICOLON','var_declaration',4,'p_var_declaration','Parser.py',108),
  ('var_declaration -> ID EQUAL boolean SEMICOLON var_declaration','var_declaration',5,'p_var_declaration','Parser.py',109),
  ('var_declaration -> ID EQUAL boolean SEMICOLON','var_declaration',4,'p_var_declaration','Parser.py',110),
  ('var_declaration -> ID EQUAL ID SEMICOLON var_declaration','var_declaration',5,'p_var_declaration','Parser.py',111),
  ('var_declaration -> ID EQUAL ID SEMICOLON','var_declaration',4,'p_var_declaration','Parser.py',112),
  ('var_declaration -> AMPERSANT ID SEMICOLON var_declaration','var_declaration',4,'p_var_declaration','Parser.py',113),
  ('var_declaration -> AMPERSANT ID SEMICOLON','var_declaration',3,'p_var_declaration','Parser.py',114),
  ('fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt','fun_declaration',6,'p_fun_declaration','Parser.py',119),
  ('params -> param_list','params',1,'p_params_1','Parser.py',123),
  ('params -> empty','params',1,'p_params_2','Parser.py',127),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list_1','Parser.py',131),
  ('param_list -> param','param_list',1,'p_param_list_2','Parser.py',135),
  ('param -> ID','param',1,'p_param_1','Parser.py',139),
  ('param -> ID LBRACKET RBRACKET','param',3,'p_param_2','Parser.py',143),
  ('compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK','compount_stmt',7,'p_compount_stmt','Parser.py',147),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations_1','Parser.py',151),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations_2','Parser.py',155),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','Parser.py',159),
  ('statement_list -> empty','statement_list',1,'p_statement_list_2','Parser.py',163),
  ('statement -> expression_stmt','statement',1,'p_statement','Parser.py',167),
  ('statement -> compount_stmt','statement',1,'p_statement','Parser.py',168),
  ('statement -> selection_stmt','statement',1,'p_statement','Parser.py',169),
  ('statement -> iteration_stmt','statement',1,'p_statement','Parser.py',170),
  ('statement -> return_stmt','statement',1,'p_statement','Parser.py',171),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt_1','Parser.py',176),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt_2','Parser.py',180),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt','Parser.py',184),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt','Parser.py',185),
  ('selection_stmt -> SWITCH LPAREN var RPAREN statement','selection_stmt',5,'p_selection_stmt','Parser.py',186),
  ('selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON','selection_stmt',6,'p_selection_stmt','Parser.py',187),
  ('selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON','selection_stmt',5,'p_selection_stmt','Parser.py',188),
  ('selection_stmt -> print_stmt','selection_stmt',1,'p_selection_stmt','Parser.py',189),
  ('iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement','iteration_stmt',9,'p_iteration_stmt','Parser.py',194),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt','Parser.py',195),
  ('iteration_stmt -> print_stmt','iteration_stmt',1,'p_iteration_stmt_3','Parser.py',200),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt_1','Parser.py',204),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt_2','Parser.py',208),
  ('expression -> var EQUAL expression','expression',3,'p_expression_1','Parser.py',212),
  ('expression -> simple_expression','expression',1,'p_expression_2','Parser.py',216),
  ('expression -> var EQUAL AMPERSANT ID','expression',4,'p_expression_3','Parser.py',220),
  ('var -> ID','var',1,'p_var_1','Parser.py',224),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var_2','Parser.py',228),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression_1','Parser.py',232),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression_2','Parser.py',236),
  ('relop -> LESS','relop',1,'p_relop','Parser.py',240),
  ('relop -> LESSEQUAL','relop',1,'p_relop','Parser.py',241),
  ('relop -> GREATER','relop',1,'p_relop','Parser.py',242),
  ('relop -> GREATEREQUAL','relop',1,'p_relop','Parser.py',243),
  ('relop -> DEQUAL','relop',1,'p_relop','Parser.py',244),
  ('relop -> ISEQUAL','relop',1,'p_relop','Parser.py',245),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression_1','Parser.py',250),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression_2','Parser.py',254),
  ('additive_expression -> term MINUSMINUS','additive_expression',2,'p_additive_expression_3','Parser.py',258),
  ('additive_expression -> term PLUSPLUS','additive_expression',2,'p_additive_expression_4','Parser.py',262),
  ('addop -> PLUS','addop',1,'p_addop','Parser.py',266),
  ('addop -> MINUS','addop',1,'p_addop','Parser.py',267),
  ('term -> term mulop factor','term',3,'p_term_1','Parser.py',272),
  ('term -> factor','term',1,'p_term_2','Parser.py',276),
  ('mulop -> TIMES','mulop',1,'p_mulop','Parser.py',280),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','Parser.py',281),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_1','Parser.py',286),
  ('factor -> var','factor',1,'p_factor_2','Parser.py',290),
  ('factor -> call','factor',1,'p_factor_3','Parser.py',294),
  ('factor -> NUMBER','factor',1,'p_factor_4','Parser.py',298),
  ('factor -> boolean','factor',1,'p_factor_5','Parser.py',302),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','Parser.py',306),
  ('args -> args_list','args',1,'p_args','Parser.py',310),
  ('args -> empty','args',1,'p_args','Parser.py',311),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list_1','Parser.py',316),
  ('args_list -> expression','args_list',1,'p_args_list_2','Parser.py',320),
  ('boolean -> TRUE','boolean',1,'p_boolean','Parser.py',324),
  ('boolean -> FALSE','boolean',1,'p_boolean','Parser.py',325),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',330),
]
