Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> OPEN_TAG declaration_list CLOSE_TAG
Rule 2     statement -> expression
Rule 3     expression -> expression PLUS term
Rule 4     expression -> expression MINUS term
Rule 5     term -> term TIMES factor
Rule 6     term -> term DIVIDE factor
Rule 7     declaration_list -> declaration_list declaration
Rule 8     declaration_list -> declaration
Rule 9     declaration -> var_declaration
Rule 10    declaration -> fun_declaration
Rule 11    declaration -> header_declaration
Rule 12    declaration -> class_declaration
Rule 13    declaration -> print_stmt
Rule 14    declaration -> selection_stmt
Rule 15    declaration -> iteration_stmt
Rule 16    print_stmt -> print_stmt ECHO STRING SEMICOLON
Rule 17    print_stmt -> print_stmt ECHO ID SEMICOLON
Rule 18    print_stmt -> empty
Rule 19    header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON
Rule 20    class_declaration -> CLASS FUNCTION_NAME class_stmt
Rule 21    class_stmt -> LBLOCK attributes methods RBLOCK
Rule 22    class_stmt -> LBLOCK empty RBLOCK
Rule 23    class_stmt -> LBLOCK attributes RBLOCK
Rule 24    attributes -> attributes scope var_declaration
Rule 25    attributes -> scope var_declaration
Rule 26    methods -> methods scope fun_declaration
Rule 27    methods -> scope fun_declaration
Rule 28    scope -> PRIVATE
Rule 29    scope -> PUBLIC
Rule 30    scope -> PROTECTED
Rule 31    var_declaration -> ID SEMICOLON var_declaration
Rule 32    var_declaration -> ID SEMICOLON
Rule 33    var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration
Rule 34    var_declaration -> ID EQUAL NUMBER SEMICOLON
Rule 35    var_declaration -> ID EQUAL boolean SEMICOLON var_declaration
Rule 36    var_declaration -> ID EQUAL boolean SEMICOLON
Rule 37    var_declaration -> ID EQUAL ID SEMICOLON var_declaration
Rule 38    var_declaration -> ID EQUAL ID SEMICOLON
Rule 39    var_declaration -> AMPERSANT ID SEMICOLON var_declaration
Rule 40    var_declaration -> AMPERSANT ID SEMICOLON
Rule 41    fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt
Rule 42    params -> param_list
Rule 43    params -> empty
Rule 44    param_list -> param_list COMMA param
Rule 45    param_list -> param
Rule 46    param -> ID
Rule 47    param -> ID LBRACKET RBRACKET
Rule 48    compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
Rule 49    local_declarations -> local_declarations var_declaration
Rule 50    local_declarations -> empty
Rule 51    statement_list -> statement_list statement
Rule 52    statement_list -> empty
Rule 53    statement -> expression_stmt
Rule 54    statement -> compount_stmt
Rule 55    statement -> selection_stmt
Rule 56    statement -> iteration_stmt
Rule 57    statement -> return_stmt
Rule 58    expression_stmt -> expression SEMICOLON
Rule 59    expression_stmt -> SEMICOLON
Rule 60    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 61    selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 62    selection_stmt -> SWITCH LPAREN var RPAREN statement
Rule 63    selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON
Rule 64    selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON
Rule 65    selection_stmt -> print_stmt
Rule 66    iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
Rule 67    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 68    iteration_stmt -> print_stmt
Rule 69    return_stmt -> RETURN SEMICOLON
Rule 70    return_stmt -> RETURN expression SEMICOLON
Rule 71    expression -> var EQUAL expression
Rule 72    expression -> simple_expression
Rule 73    expression -> var EQUAL AMPERSANT ID
Rule 74    var -> ID
Rule 75    var -> ID LBRACKET expression RBRACKET
Rule 76    simple_expression -> additive_expression relop additive_expression
Rule 77    simple_expression -> additive_expression
Rule 78    relop -> LESS
Rule 79    relop -> LESSEQUAL
Rule 80    relop -> GREATER
Rule 81    relop -> GREATEREQUAL
Rule 82    relop -> DEQUAL
Rule 83    relop -> ISEQUAL
Rule 84    additive_expression -> additive_expression addop term
Rule 85    additive_expression -> term
Rule 86    additive_expression -> term MINUSMINUS
Rule 87    additive_expression -> term PLUSPLUS
Rule 88    addop -> PLUS
Rule 89    addop -> MINUS
Rule 90    term -> term mulop factor
Rule 91    term -> factor
Rule 92    mulop -> TIMES
Rule 93    mulop -> DIVIDE
Rule 94    factor -> LPAREN expression RPAREN
Rule 95    factor -> var
Rule 96    factor -> call
Rule 97    factor -> NUMBER
Rule 98    factor -> boolean
Rule 99    call -> ID LPAREN args RPAREN
Rule 100   args -> args_list
Rule 101   args -> empty
Rule 102   args_list -> args_list COMMA expression
Rule 103   args_list -> expression
Rule 104   boolean -> TRUE
Rule 105   boolean -> FALSE
Rule 106   empty -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 39 40 73
BREAK                : 63 64
CASE                 : 63
CLASS                : 20
CLOSE_TAG            : 1
COLON                : 63 64
COMMA                : 44 102
DEFAULT              : 64
DEQUAL               : 82
DIVIDE               : 6 93
ECHO                 : 16 17
ELSE                 : 61
EQUAL                : 33 34 35 36 37 38 71 73
FALSE                : 105
FOR                  : 66
FUNCTION             : 41
FUNCTION_NAME        : 20 41
GREATER              : 80
GREATEREQUAL         : 81
ID                   : 17 31 32 33 34 35 36 37 37 38 38 39 40 46 47 73 74 75 99
IF                   : 60 61
ISEQUAL              : 83
LBLOCK               : 21 22 23 48
LBRACKET             : 47 75
LESS                 : 78
LESSEQUAL            : 79
LPAREN               : 19 41 60 61 62 66 67 94 99
MINUS                : 4 89
MINUSMINUS           : 86
NUMBER               : 33 34 63 97
OPEN_TAG             : 1
PLUS                 : 3 88
PLUSPLUS             : 87
PRIVATE              : 28
PROTECTED            : 30
PUBLIC               : 29
RBLOCK               : 21 22 23 48
RBRACKET             : 47 75
REQUIRE              : 19
RETURN               : 69 70
RPAREN               : 19 41 60 61 62 66 67 94 99
SEMICOLON            : 16 17 19 31 32 33 34 35 36 37 38 39 40 58 59 63 64 66 66 69 70
STRING               : 16 19
SWITCH               : 62
TIMES                : 5 92
TRUE                 : 104
WHILE                : 67
error                : 

Nonterminals, with rules where they appear

additive_expression  : 66 76 76 77 84
addop                : 84
args                 : 99
args_list            : 100 102
attributes           : 21 23 24
boolean              : 35 36 98
call                 : 96
class_declaration    : 12
class_stmt           : 20
compount_stmt        : 41 54
declaration          : 7 8
declaration_list     : 1 7
empty                : 18 22 43 50 52 101
expression           : 2 3 4 58 60 61 66 67 70 71 75 94 102 103
expression_stmt      : 53
factor               : 5 6 90 91
fun_declaration      : 10 26 27
header_declaration   : 11
iteration_stmt       : 15 56
local_declarations   : 48 49
methods              : 21 26
mulop                : 90
param                : 44 45
param_list           : 42 44
params               : 41
print_stmt           : 13 16 17 48 48 48 65 68
program              : 0
relop                : 76
return_stmt          : 57
scope                : 24 25 26 27
selection_stmt       : 14 55
simple_expression    : 72
statement            : 51 60 61 61 62 63 64 66 67
statement_list       : 48 51
term                 : 3 4 5 6 84 85 86 87 90
var                  : 62 71 73 95
var_declaration      : 9 24 25 31 33 35 37 39 49 66

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPEN_TAG declaration_list CLOSE_TAG

    OPEN_TAG        shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> OPEN_TAG . declaration_list CLOSE_TAG
    (7) declaration_list -> . declaration_list declaration
    (8) declaration_list -> . declaration
    (9) declaration -> . var_declaration
    (10) declaration -> . fun_declaration
    (11) declaration -> . header_declaration
    (12) declaration -> . class_declaration
    (13) declaration -> . print_stmt
    (14) declaration -> . selection_stmt
    (15) declaration -> . iteration_stmt
    (31) var_declaration -> . ID SEMICOLON var_declaration
    (32) var_declaration -> . ID SEMICOLON
    (33) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (35) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL boolean SEMICOLON
    (37) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL ID SEMICOLON
    (39) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (40) var_declaration -> . AMPERSANT ID SEMICOLON
    (41) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt
    (19) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMICOLON
    (20) class_declaration -> . CLASS FUNCTION_NAME class_stmt
    (16) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (17) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (18) print_stmt -> . empty
    (60) selection_stmt -> . IF LPAREN expression RPAREN statement
    (61) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (62) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (63) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (64) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (65) selection_stmt -> . print_stmt
    (66) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (67) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (68) iteration_stmt -> . print_stmt
    (106) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13
    FUNCTION        shift and go to state 14
    REQUIRE         shift and go to state 15
    CLASS           shift and go to state 16
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    ECHO            reduce using rule 106 (empty -> .)
    CLOSE_TAG       reduce using rule 106 (empty -> .)

  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 106 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 106 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 106 (empty -> .) ]
  ! CLASS           [ reduce using rule 106 (empty -> .) ]
  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]

    declaration_list               shift and go to state 3
    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    header_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    print_stmt                     shift and go to state 9
    selection_stmt                 shift and go to state 10
    iteration_stmt                 shift and go to state 11
    empty                          shift and go to state 17

state 3

    (1) program -> OPEN_TAG declaration_list . CLOSE_TAG
    (7) declaration_list -> declaration_list . declaration
    (9) declaration -> . var_declaration
    (10) declaration -> . fun_declaration
    (11) declaration -> . header_declaration
    (12) declaration -> . class_declaration
    (13) declaration -> . print_stmt
    (14) declaration -> . selection_stmt
    (15) declaration -> . iteration_stmt
    (31) var_declaration -> . ID SEMICOLON var_declaration
    (32) var_declaration -> . ID SEMICOLON
    (33) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (35) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL boolean SEMICOLON
    (37) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL ID SEMICOLON
    (39) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (40) var_declaration -> . AMPERSANT ID SEMICOLON
    (41) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt
    (19) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMICOLON
    (20) class_declaration -> . CLASS FUNCTION_NAME class_stmt
    (16) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (17) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (18) print_stmt -> . empty
    (60) selection_stmt -> . IF LPAREN expression RPAREN statement
    (61) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (62) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (63) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (64) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (65) selection_stmt -> . print_stmt
    (66) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (67) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (68) iteration_stmt -> . print_stmt
    (106) empty -> .

  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    CLOSE_TAG       shift and go to state 24
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13
    FUNCTION        shift and go to state 14
    REQUIRE         shift and go to state 15
    CLASS           shift and go to state 16
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    ECHO            reduce using rule 106 (empty -> .)

  ! CLOSE_TAG       [ reduce using rule 106 (empty -> .) ]
  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 106 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 106 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 106 (empty -> .) ]
  ! CLASS           [ reduce using rule 106 (empty -> .) ]
  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]

    declaration                    shift and go to state 25
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    header_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    print_stmt                     shift and go to state 9
    selection_stmt                 shift and go to state 10
    iteration_stmt                 shift and go to state 11
    empty                          shift and go to state 17

state 4

    (8) declaration_list -> declaration .

    CLOSE_TAG       reduce using rule 8 (declaration_list -> declaration .)
    ID              reduce using rule 8 (declaration_list -> declaration .)
    AMPERSANT       reduce using rule 8 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 8 (declaration_list -> declaration .)
    REQUIRE         reduce using rule 8 (declaration_list -> declaration .)
    CLASS           reduce using rule 8 (declaration_list -> declaration .)
    IF              reduce using rule 8 (declaration_list -> declaration .)
    SWITCH          reduce using rule 8 (declaration_list -> declaration .)
    CASE            reduce using rule 8 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 8 (declaration_list -> declaration .)
    FOR             reduce using rule 8 (declaration_list -> declaration .)
    WHILE           reduce using rule 8 (declaration_list -> declaration .)
    ECHO            reduce using rule 8 (declaration_list -> declaration .)


state 5

    (9) declaration -> var_declaration .

    CLOSE_TAG       reduce using rule 9 (declaration -> var_declaration .)
    ID              reduce using rule 9 (declaration -> var_declaration .)
    AMPERSANT       reduce using rule 9 (declaration -> var_declaration .)
    FUNCTION        reduce using rule 9 (declaration -> var_declaration .)
    REQUIRE         reduce using rule 9 (declaration -> var_declaration .)
    CLASS           reduce using rule 9 (declaration -> var_declaration .)
    IF              reduce using rule 9 (declaration -> var_declaration .)
    SWITCH          reduce using rule 9 (declaration -> var_declaration .)
    CASE            reduce using rule 9 (declaration -> var_declaration .)
    DEFAULT         reduce using rule 9 (declaration -> var_declaration .)
    FOR             reduce using rule 9 (declaration -> var_declaration .)
    WHILE           reduce using rule 9 (declaration -> var_declaration .)
    ECHO            reduce using rule 9 (declaration -> var_declaration .)


state 6

    (10) declaration -> fun_declaration .

    CLOSE_TAG       reduce using rule 10 (declaration -> fun_declaration .)
    ID              reduce using rule 10 (declaration -> fun_declaration .)
    AMPERSANT       reduce using rule 10 (declaration -> fun_declaration .)
    FUNCTION        reduce using rule 10 (declaration -> fun_declaration .)
    REQUIRE         reduce using rule 10 (declaration -> fun_declaration .)
    CLASS           reduce using rule 10 (declaration -> fun_declaration .)
    IF              reduce using rule 10 (declaration -> fun_declaration .)
    SWITCH          reduce using rule 10 (declaration -> fun_declaration .)
    CASE            reduce using rule 10 (declaration -> fun_declaration .)
    DEFAULT         reduce using rule 10 (declaration -> fun_declaration .)
    FOR             reduce using rule 10 (declaration -> fun_declaration .)
    WHILE           reduce using rule 10 (declaration -> fun_declaration .)
    ECHO            reduce using rule 10 (declaration -> fun_declaration .)


state 7

    (11) declaration -> header_declaration .

    CLOSE_TAG       reduce using rule 11 (declaration -> header_declaration .)
    ID              reduce using rule 11 (declaration -> header_declaration .)
    AMPERSANT       reduce using rule 11 (declaration -> header_declaration .)
    FUNCTION        reduce using rule 11 (declaration -> header_declaration .)
    REQUIRE         reduce using rule 11 (declaration -> header_declaration .)
    CLASS           reduce using rule 11 (declaration -> header_declaration .)
    IF              reduce using rule 11 (declaration -> header_declaration .)
    SWITCH          reduce using rule 11 (declaration -> header_declaration .)
    CASE            reduce using rule 11 (declaration -> header_declaration .)
    DEFAULT         reduce using rule 11 (declaration -> header_declaration .)
    FOR             reduce using rule 11 (declaration -> header_declaration .)
    WHILE           reduce using rule 11 (declaration -> header_declaration .)
    ECHO            reduce using rule 11 (declaration -> header_declaration .)


state 8

    (12) declaration -> class_declaration .

    CLOSE_TAG       reduce using rule 12 (declaration -> class_declaration .)
    ID              reduce using rule 12 (declaration -> class_declaration .)
    AMPERSANT       reduce using rule 12 (declaration -> class_declaration .)
    FUNCTION        reduce using rule 12 (declaration -> class_declaration .)
    REQUIRE         reduce using rule 12 (declaration -> class_declaration .)
    CLASS           reduce using rule 12 (declaration -> class_declaration .)
    IF              reduce using rule 12 (declaration -> class_declaration .)
    SWITCH          reduce using rule 12 (declaration -> class_declaration .)
    CASE            reduce using rule 12 (declaration -> class_declaration .)
    DEFAULT         reduce using rule 12 (declaration -> class_declaration .)
    FOR             reduce using rule 12 (declaration -> class_declaration .)
    WHILE           reduce using rule 12 (declaration -> class_declaration .)
    ECHO            reduce using rule 12 (declaration -> class_declaration .)


state 9

    (13) declaration -> print_stmt .
    (16) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (17) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (65) selection_stmt -> print_stmt .
    (68) iteration_stmt -> print_stmt .

  ! shift/reduce conflict for ECHO resolved as shift
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 13 (declaration -> print_stmt .)
  ! shift/reduce conflict for ECHO resolved as shift
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 13 (declaration -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 13 (declaration -> print_stmt .)
  ! shift/reduce conflict for ECHO resolved as shift
    CLOSE_TAG       reduce using rule 13 (declaration -> print_stmt .)
    ID              reduce using rule 13 (declaration -> print_stmt .)
    AMPERSANT       reduce using rule 13 (declaration -> print_stmt .)
    FUNCTION        reduce using rule 13 (declaration -> print_stmt .)
    REQUIRE         reduce using rule 13 (declaration -> print_stmt .)
    CLASS           reduce using rule 13 (declaration -> print_stmt .)
    IF              reduce using rule 13 (declaration -> print_stmt .)
    SWITCH          reduce using rule 13 (declaration -> print_stmt .)
    CASE            reduce using rule 13 (declaration -> print_stmt .)
    DEFAULT         reduce using rule 13 (declaration -> print_stmt .)
    FOR             reduce using rule 13 (declaration -> print_stmt .)
    WHILE           reduce using rule 13 (declaration -> print_stmt .)
    ECHO            shift and go to state 26

  ! ECHO            [ reduce using rule 13 (declaration -> print_stmt .) ]
  ! CLOSE_TAG       [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! AMPERSANT       [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! FUNCTION        [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! REQUIRE         [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! CLASS           [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! CLOSE_TAG       [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! AMPERSANT       [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! FUNCTION        [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! REQUIRE         [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! CLASS           [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]


state 10

    (14) declaration -> selection_stmt .

    CLOSE_TAG       reduce using rule 14 (declaration -> selection_stmt .)
    ID              reduce using rule 14 (declaration -> selection_stmt .)
    AMPERSANT       reduce using rule 14 (declaration -> selection_stmt .)
    FUNCTION        reduce using rule 14 (declaration -> selection_stmt .)
    REQUIRE         reduce using rule 14 (declaration -> selection_stmt .)
    CLASS           reduce using rule 14 (declaration -> selection_stmt .)
    IF              reduce using rule 14 (declaration -> selection_stmt .)
    SWITCH          reduce using rule 14 (declaration -> selection_stmt .)
    CASE            reduce using rule 14 (declaration -> selection_stmt .)
    DEFAULT         reduce using rule 14 (declaration -> selection_stmt .)
    FOR             reduce using rule 14 (declaration -> selection_stmt .)
    WHILE           reduce using rule 14 (declaration -> selection_stmt .)
    ECHO            reduce using rule 14 (declaration -> selection_stmt .)


state 11

    (15) declaration -> iteration_stmt .

    CLOSE_TAG       reduce using rule 15 (declaration -> iteration_stmt .)
    ID              reduce using rule 15 (declaration -> iteration_stmt .)
    AMPERSANT       reduce using rule 15 (declaration -> iteration_stmt .)
    FUNCTION        reduce using rule 15 (declaration -> iteration_stmt .)
    REQUIRE         reduce using rule 15 (declaration -> iteration_stmt .)
    CLASS           reduce using rule 15 (declaration -> iteration_stmt .)
    IF              reduce using rule 15 (declaration -> iteration_stmt .)
    SWITCH          reduce using rule 15 (declaration -> iteration_stmt .)
    CASE            reduce using rule 15 (declaration -> iteration_stmt .)
    DEFAULT         reduce using rule 15 (declaration -> iteration_stmt .)
    FOR             reduce using rule 15 (declaration -> iteration_stmt .)
    WHILE           reduce using rule 15 (declaration -> iteration_stmt .)
    ECHO            reduce using rule 15 (declaration -> iteration_stmt .)


state 12

    (31) var_declaration -> ID . SEMICOLON var_declaration
    (32) var_declaration -> ID . SEMICOLON
    (33) var_declaration -> ID . EQUAL NUMBER SEMICOLON var_declaration
    (34) var_declaration -> ID . EQUAL NUMBER SEMICOLON
    (35) var_declaration -> ID . EQUAL boolean SEMICOLON var_declaration
    (36) var_declaration -> ID . EQUAL boolean SEMICOLON
    (37) var_declaration -> ID . EQUAL ID SEMICOLON var_declaration
    (38) var_declaration -> ID . EQUAL ID SEMICOLON

    SEMICOLON       shift and go to state 27
    EQUAL           shift and go to state 28


state 13

    (39) var_declaration -> AMPERSANT . ID SEMICOLON var_declaration
    (40) var_declaration -> AMPERSANT . ID SEMICOLON

    ID              shift and go to state 29


state 14

    (41) fun_declaration -> FUNCTION . FUNCTION_NAME LPAREN params RPAREN compount_stmt

    FUNCTION_NAME   shift and go to state 30


state 15

    (19) header_declaration -> REQUIRE . LPAREN STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 31


state 16

    (20) class_declaration -> CLASS . FUNCTION_NAME class_stmt

    FUNCTION_NAME   shift and go to state 32


state 17

    (18) print_stmt -> empty .

    ECHO            reduce using rule 18 (print_stmt -> empty .)
    CLOSE_TAG       reduce using rule 18 (print_stmt -> empty .)
    ID              reduce using rule 18 (print_stmt -> empty .)
    AMPERSANT       reduce using rule 18 (print_stmt -> empty .)
    FUNCTION        reduce using rule 18 (print_stmt -> empty .)
    REQUIRE         reduce using rule 18 (print_stmt -> empty .)
    CLASS           reduce using rule 18 (print_stmt -> empty .)
    IF              reduce using rule 18 (print_stmt -> empty .)
    SWITCH          reduce using rule 18 (print_stmt -> empty .)
    CASE            reduce using rule 18 (print_stmt -> empty .)
    DEFAULT         reduce using rule 18 (print_stmt -> empty .)
    FOR             reduce using rule 18 (print_stmt -> empty .)
    WHILE           reduce using rule 18 (print_stmt -> empty .)
    BREAK           reduce using rule 18 (print_stmt -> empty .)
    SEMICOLON       reduce using rule 18 (print_stmt -> empty .)
    LBLOCK          reduce using rule 18 (print_stmt -> empty .)
    RETURN          reduce using rule 18 (print_stmt -> empty .)
    LPAREN          reduce using rule 18 (print_stmt -> empty .)
    NUMBER          reduce using rule 18 (print_stmt -> empty .)
    TRUE            reduce using rule 18 (print_stmt -> empty .)
    FALSE           reduce using rule 18 (print_stmt -> empty .)
    RBLOCK          reduce using rule 18 (print_stmt -> empty .)
    ELSE            reduce using rule 18 (print_stmt -> empty .)


state 18

    (60) selection_stmt -> IF . LPAREN expression RPAREN statement
    (61) selection_stmt -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 33


state 19

    (62) selection_stmt -> SWITCH . LPAREN var RPAREN statement

    LPAREN          shift and go to state 34


state 20

    (63) selection_stmt -> CASE . NUMBER COLON statement BREAK SEMICOLON

    NUMBER          shift and go to state 35


state 21

    (64) selection_stmt -> DEFAULT . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 36


state 22

    (66) iteration_stmt -> FOR . LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    LPAREN          shift and go to state 37


state 23

    (67) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 38


state 24

    (1) program -> OPEN_TAG declaration_list CLOSE_TAG .

    $end            reduce using rule 1 (program -> OPEN_TAG declaration_list CLOSE_TAG .)


state 25

    (7) declaration_list -> declaration_list declaration .

    CLOSE_TAG       reduce using rule 7 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 7 (declaration_list -> declaration_list declaration .)
    AMPERSANT       reduce using rule 7 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 7 (declaration_list -> declaration_list declaration .)
    REQUIRE         reduce using rule 7 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 7 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 7 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 7 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 7 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 7 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 7 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 7 (declaration_list -> declaration_list declaration .)
    ECHO            reduce using rule 7 (declaration_list -> declaration_list declaration .)


state 26

    (16) print_stmt -> print_stmt ECHO . STRING SEMICOLON
    (17) print_stmt -> print_stmt ECHO . ID SEMICOLON

    STRING          shift and go to state 39
    ID              shift and go to state 40


state 27

    (31) var_declaration -> ID SEMICOLON . var_declaration
    (32) var_declaration -> ID SEMICOLON .
    (31) var_declaration -> . ID SEMICOLON var_declaration
    (32) var_declaration -> . ID SEMICOLON
    (33) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (35) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL boolean SEMICOLON
    (37) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL ID SEMICOLON
    (39) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (40) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    FUNCTION        reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    REQUIRE         reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    CLASS           reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    IF              reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    SWITCH          reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    CASE            reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    DEFAULT         reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    FOR             reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    WHILE           reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    ECHO            reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    SEMICOLON       reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    RBLOCK          reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    PRIVATE         reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    PUBLIC          reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    PROTECTED       reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    LBLOCK          reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    RETURN          reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    LPAREN          reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    NUMBER          reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    TRUE            reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    FALSE           reduce using rule 32 (var_declaration -> ID SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 32 (var_declaration -> ID SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 32 (var_declaration -> ID SEMICOLON .) ]

    var_declaration                shift and go to state 41

state 28

    (33) var_declaration -> ID EQUAL . NUMBER SEMICOLON var_declaration
    (34) var_declaration -> ID EQUAL . NUMBER SEMICOLON
    (35) var_declaration -> ID EQUAL . boolean SEMICOLON var_declaration
    (36) var_declaration -> ID EQUAL . boolean SEMICOLON
    (37) var_declaration -> ID EQUAL . ID SEMICOLON var_declaration
    (38) var_declaration -> ID EQUAL . ID SEMICOLON
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    NUMBER          shift and go to state 43
    ID              shift and go to state 42
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    boolean                        shift and go to state 44

state 29

    (39) var_declaration -> AMPERSANT ID . SEMICOLON var_declaration
    (40) var_declaration -> AMPERSANT ID . SEMICOLON

    SEMICOLON       shift and go to state 47


state 30

    (41) fun_declaration -> FUNCTION FUNCTION_NAME . LPAREN params RPAREN compount_stmt

    LPAREN          shift and go to state 48


state 31

    (19) header_declaration -> REQUIRE LPAREN . STRING RPAREN SEMICOLON

    STRING          shift and go to state 49


state 32

    (20) class_declaration -> CLASS FUNCTION_NAME . class_stmt
    (21) class_stmt -> . LBLOCK attributes methods RBLOCK
    (22) class_stmt -> . LBLOCK empty RBLOCK
    (23) class_stmt -> . LBLOCK attributes RBLOCK

    LBLOCK          shift and go to state 51

    class_stmt                     shift and go to state 50

state 33

    (60) selection_stmt -> IF LPAREN . expression RPAREN statement
    (61) selection_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 53
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 34

    (62) selection_stmt -> SWITCH LPAREN . var RPAREN statement
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 64

    var                            shift and go to state 63

state 35

    (63) selection_stmt -> CASE NUMBER . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 65


state 36

    (64) selection_stmt -> DEFAULT COLON . statement BREAK SEMICOLON
    (2) statement -> . expression
    (53) statement -> . expression_stmt
    (54) statement -> . compount_stmt
    (55) statement -> . selection_stmt
    (56) statement -> . iteration_stmt
    (57) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (58) expression_stmt -> . expression SEMICOLON
    (59) expression_stmt -> . SEMICOLON
    (48) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (60) selection_stmt -> . IF LPAREN expression RPAREN statement
    (61) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (62) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (63) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (64) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (65) selection_stmt -> . print_stmt
    (66) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (67) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (68) iteration_stmt -> . print_stmt
    (69) return_stmt -> . RETURN SEMICOLON
    (70) return_stmt -> . RETURN expression SEMICOLON
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (16) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (17) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (18) print_stmt -> . empty
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (106) empty -> .
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    statement                      shift and go to state 66
    expression                     shift and go to state 68
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    additive_expression            shift and go to state 58
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 37

    (66) iteration_stmt -> FOR LPAREN . var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (31) var_declaration -> . ID SEMICOLON var_declaration
    (32) var_declaration -> . ID SEMICOLON
    (33) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (35) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL boolean SEMICOLON
    (37) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL ID SEMICOLON
    (39) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (40) var_declaration -> . AMPERSANT ID SEMICOLON

    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

    var_declaration                shift and go to state 77

state 38

    (67) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 78
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 39

    (16) print_stmt -> print_stmt ECHO STRING . SEMICOLON

    SEMICOLON       shift and go to state 79


state 40

    (17) print_stmt -> print_stmt ECHO ID . SEMICOLON

    SEMICOLON       shift and go to state 80


state 41

    (31) var_declaration -> ID SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    ID              reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    CLASS           reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    IF              reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    SWITCH          reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    CASE            reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    FOR             reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    WHILE           reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    ECHO            reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    RETURN          reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    LPAREN          reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    NUMBER          reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    TRUE            reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)
    FALSE           reduce using rule 31 (var_declaration -> ID SEMICOLON var_declaration .)


state 42

    (37) var_declaration -> ID EQUAL ID . SEMICOLON var_declaration
    (38) var_declaration -> ID EQUAL ID . SEMICOLON

    SEMICOLON       shift and go to state 81


state 43

    (33) var_declaration -> ID EQUAL NUMBER . SEMICOLON var_declaration
    (34) var_declaration -> ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 82


state 44

    (35) var_declaration -> ID EQUAL boolean . SEMICOLON var_declaration
    (36) var_declaration -> ID EQUAL boolean . SEMICOLON

    SEMICOLON       shift and go to state 83


state 45

    (104) boolean -> TRUE .

    SEMICOLON       reduce using rule 104 (boolean -> TRUE .)
    MINUSMINUS      reduce using rule 104 (boolean -> TRUE .)
    PLUSPLUS        reduce using rule 104 (boolean -> TRUE .)
    TIMES           reduce using rule 104 (boolean -> TRUE .)
    DIVIDE          reduce using rule 104 (boolean -> TRUE .)
    LESS            reduce using rule 104 (boolean -> TRUE .)
    LESSEQUAL       reduce using rule 104 (boolean -> TRUE .)
    GREATER         reduce using rule 104 (boolean -> TRUE .)
    GREATEREQUAL    reduce using rule 104 (boolean -> TRUE .)
    DEQUAL          reduce using rule 104 (boolean -> TRUE .)
    ISEQUAL         reduce using rule 104 (boolean -> TRUE .)
    PLUS            reduce using rule 104 (boolean -> TRUE .)
    MINUS           reduce using rule 104 (boolean -> TRUE .)
    RPAREN          reduce using rule 104 (boolean -> TRUE .)
    BREAK           reduce using rule 104 (boolean -> TRUE .)
    ELSE            reduce using rule 104 (boolean -> TRUE .)
    CLOSE_TAG       reduce using rule 104 (boolean -> TRUE .)
    ID              reduce using rule 104 (boolean -> TRUE .)
    AMPERSANT       reduce using rule 104 (boolean -> TRUE .)
    FUNCTION        reduce using rule 104 (boolean -> TRUE .)
    REQUIRE         reduce using rule 104 (boolean -> TRUE .)
    CLASS           reduce using rule 104 (boolean -> TRUE .)
    IF              reduce using rule 104 (boolean -> TRUE .)
    SWITCH          reduce using rule 104 (boolean -> TRUE .)
    CASE            reduce using rule 104 (boolean -> TRUE .)
    DEFAULT         reduce using rule 104 (boolean -> TRUE .)
    FOR             reduce using rule 104 (boolean -> TRUE .)
    WHILE           reduce using rule 104 (boolean -> TRUE .)
    ECHO            reduce using rule 104 (boolean -> TRUE .)
    LBLOCK          reduce using rule 104 (boolean -> TRUE .)
    RETURN          reduce using rule 104 (boolean -> TRUE .)
    LPAREN          reduce using rule 104 (boolean -> TRUE .)
    NUMBER          reduce using rule 104 (boolean -> TRUE .)
    TRUE            reduce using rule 104 (boolean -> TRUE .)
    FALSE           reduce using rule 104 (boolean -> TRUE .)
    RBLOCK          reduce using rule 104 (boolean -> TRUE .)
    RBRACKET        reduce using rule 104 (boolean -> TRUE .)
    COMMA           reduce using rule 104 (boolean -> TRUE .)


state 46

    (105) boolean -> FALSE .

    SEMICOLON       reduce using rule 105 (boolean -> FALSE .)
    MINUSMINUS      reduce using rule 105 (boolean -> FALSE .)
    PLUSPLUS        reduce using rule 105 (boolean -> FALSE .)
    TIMES           reduce using rule 105 (boolean -> FALSE .)
    DIVIDE          reduce using rule 105 (boolean -> FALSE .)
    LESS            reduce using rule 105 (boolean -> FALSE .)
    LESSEQUAL       reduce using rule 105 (boolean -> FALSE .)
    GREATER         reduce using rule 105 (boolean -> FALSE .)
    GREATEREQUAL    reduce using rule 105 (boolean -> FALSE .)
    DEQUAL          reduce using rule 105 (boolean -> FALSE .)
    ISEQUAL         reduce using rule 105 (boolean -> FALSE .)
    PLUS            reduce using rule 105 (boolean -> FALSE .)
    MINUS           reduce using rule 105 (boolean -> FALSE .)
    RPAREN          reduce using rule 105 (boolean -> FALSE .)
    BREAK           reduce using rule 105 (boolean -> FALSE .)
    ELSE            reduce using rule 105 (boolean -> FALSE .)
    CLOSE_TAG       reduce using rule 105 (boolean -> FALSE .)
    ID              reduce using rule 105 (boolean -> FALSE .)
    AMPERSANT       reduce using rule 105 (boolean -> FALSE .)
    FUNCTION        reduce using rule 105 (boolean -> FALSE .)
    REQUIRE         reduce using rule 105 (boolean -> FALSE .)
    CLASS           reduce using rule 105 (boolean -> FALSE .)
    IF              reduce using rule 105 (boolean -> FALSE .)
    SWITCH          reduce using rule 105 (boolean -> FALSE .)
    CASE            reduce using rule 105 (boolean -> FALSE .)
    DEFAULT         reduce using rule 105 (boolean -> FALSE .)
    FOR             reduce using rule 105 (boolean -> FALSE .)
    WHILE           reduce using rule 105 (boolean -> FALSE .)
    ECHO            reduce using rule 105 (boolean -> FALSE .)
    LBLOCK          reduce using rule 105 (boolean -> FALSE .)
    RETURN          reduce using rule 105 (boolean -> FALSE .)
    LPAREN          reduce using rule 105 (boolean -> FALSE .)
    NUMBER          reduce using rule 105 (boolean -> FALSE .)
    TRUE            reduce using rule 105 (boolean -> FALSE .)
    FALSE           reduce using rule 105 (boolean -> FALSE .)
    RBLOCK          reduce using rule 105 (boolean -> FALSE .)
    RBRACKET        reduce using rule 105 (boolean -> FALSE .)
    COMMA           reduce using rule 105 (boolean -> FALSE .)


state 47

    (39) var_declaration -> AMPERSANT ID SEMICOLON . var_declaration
    (40) var_declaration -> AMPERSANT ID SEMICOLON .
    (31) var_declaration -> . ID SEMICOLON var_declaration
    (32) var_declaration -> . ID SEMICOLON
    (33) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (35) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL boolean SEMICOLON
    (37) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL ID SEMICOLON
    (39) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (40) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    FUNCTION        reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    REQUIRE         reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    CLASS           reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    IF              reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    SWITCH          reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    CASE            reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    DEFAULT         reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    FOR             reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    WHILE           reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    ECHO            reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    SEMICOLON       reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    RBLOCK          reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    PRIVATE         reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    PUBLIC          reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    PROTECTED       reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    LBLOCK          reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    RETURN          reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    LPAREN          reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    NUMBER          reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    TRUE            reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    FALSE           reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 40 (var_declaration -> AMPERSANT ID SEMICOLON .) ]

    var_declaration                shift and go to state 84

state 48

    (41) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN . params RPAREN compount_stmt
    (42) params -> . param_list
    (43) params -> . empty
    (44) param_list -> . param_list COMMA param
    (45) param_list -> . param
    (106) empty -> .
    (46) param -> . ID
    (47) param -> . ID LBRACKET RBRACKET

    RPAREN          reduce using rule 106 (empty -> .)
    ID              shift and go to state 89

    params                         shift and go to state 85
    param_list                     shift and go to state 86
    empty                          shift and go to state 87
    param                          shift and go to state 88

state 49

    (19) header_declaration -> REQUIRE LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 90


state 50

    (20) class_declaration -> CLASS FUNCTION_NAME class_stmt .

    CLOSE_TAG       reduce using rule 20 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    ID              reduce using rule 20 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    AMPERSANT       reduce using rule 20 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    FUNCTION        reduce using rule 20 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    REQUIRE         reduce using rule 20 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    CLASS           reduce using rule 20 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    IF              reduce using rule 20 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    SWITCH          reduce using rule 20 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    CASE            reduce using rule 20 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    DEFAULT         reduce using rule 20 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    FOR             reduce using rule 20 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    WHILE           reduce using rule 20 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    ECHO            reduce using rule 20 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)


state 51

    (21) class_stmt -> LBLOCK . attributes methods RBLOCK
    (22) class_stmt -> LBLOCK . empty RBLOCK
    (23) class_stmt -> LBLOCK . attributes RBLOCK
    (24) attributes -> . attributes scope var_declaration
    (25) attributes -> . scope var_declaration
    (106) empty -> .
    (28) scope -> . PRIVATE
    (29) scope -> . PUBLIC
    (30) scope -> . PROTECTED

    RBLOCK          reduce using rule 106 (empty -> .)
    PRIVATE         shift and go to state 94
    PUBLIC          shift and go to state 95
    PROTECTED       shift and go to state 96

    attributes                     shift and go to state 91
    empty                          shift and go to state 92
    scope                          shift and go to state 93

state 52

    (94) factor -> LPAREN . expression RPAREN
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 97
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 53

    (60) selection_stmt -> IF LPAREN expression . RPAREN statement
    (61) selection_stmt -> IF LPAREN expression . RPAREN statement ELSE statement
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    RPAREN          shift and go to state 98
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100


state 54

    (85) additive_expression -> term .
    (86) additive_expression -> term . MINUSMINUS
    (87) additive_expression -> term . PLUSPLUS
    (5) term -> term . TIMES factor
    (6) term -> term . DIVIDE factor
    (90) term -> term . mulop factor
    (92) mulop -> . TIMES
    (93) mulop -> . DIVIDE

    LESS            reduce using rule 85 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 85 (additive_expression -> term .)
    GREATER         reduce using rule 85 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 85 (additive_expression -> term .)
    DEQUAL          reduce using rule 85 (additive_expression -> term .)
    ISEQUAL         reduce using rule 85 (additive_expression -> term .)
    PLUS            reduce using rule 85 (additive_expression -> term .)
    MINUS           reduce using rule 85 (additive_expression -> term .)
    RPAREN          reduce using rule 85 (additive_expression -> term .)
    SEMICOLON       reduce using rule 85 (additive_expression -> term .)
    BREAK           reduce using rule 85 (additive_expression -> term .)
    ELSE            reduce using rule 85 (additive_expression -> term .)
    CLOSE_TAG       reduce using rule 85 (additive_expression -> term .)
    ID              reduce using rule 85 (additive_expression -> term .)
    AMPERSANT       reduce using rule 85 (additive_expression -> term .)
    FUNCTION        reduce using rule 85 (additive_expression -> term .)
    REQUIRE         reduce using rule 85 (additive_expression -> term .)
    CLASS           reduce using rule 85 (additive_expression -> term .)
    IF              reduce using rule 85 (additive_expression -> term .)
    SWITCH          reduce using rule 85 (additive_expression -> term .)
    CASE            reduce using rule 85 (additive_expression -> term .)
    DEFAULT         reduce using rule 85 (additive_expression -> term .)
    FOR             reduce using rule 85 (additive_expression -> term .)
    WHILE           reduce using rule 85 (additive_expression -> term .)
    ECHO            reduce using rule 85 (additive_expression -> term .)
    LBLOCK          reduce using rule 85 (additive_expression -> term .)
    RETURN          reduce using rule 85 (additive_expression -> term .)
    LPAREN          reduce using rule 85 (additive_expression -> term .)
    NUMBER          reduce using rule 85 (additive_expression -> term .)
    TRUE            reduce using rule 85 (additive_expression -> term .)
    FALSE           reduce using rule 85 (additive_expression -> term .)
    RBLOCK          reduce using rule 85 (additive_expression -> term .)
    RBRACKET        reduce using rule 85 (additive_expression -> term .)
    COMMA           reduce using rule 85 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 101
    PLUSPLUS        shift and go to state 102
    TIMES           shift and go to state 103
    DIVIDE          shift and go to state 104

    mulop                          shift and go to state 105

state 55

    (71) expression -> var . EQUAL expression
    (73) expression -> var . EQUAL AMPERSANT ID
    (95) factor -> var .

    EQUAL           shift and go to state 106
    MINUSMINUS      reduce using rule 95 (factor -> var .)
    PLUSPLUS        reduce using rule 95 (factor -> var .)
    TIMES           reduce using rule 95 (factor -> var .)
    DIVIDE          reduce using rule 95 (factor -> var .)
    LESS            reduce using rule 95 (factor -> var .)
    LESSEQUAL       reduce using rule 95 (factor -> var .)
    GREATER         reduce using rule 95 (factor -> var .)
    GREATEREQUAL    reduce using rule 95 (factor -> var .)
    DEQUAL          reduce using rule 95 (factor -> var .)
    ISEQUAL         reduce using rule 95 (factor -> var .)
    PLUS            reduce using rule 95 (factor -> var .)
    MINUS           reduce using rule 95 (factor -> var .)
    RPAREN          reduce using rule 95 (factor -> var .)
    SEMICOLON       reduce using rule 95 (factor -> var .)
    BREAK           reduce using rule 95 (factor -> var .)
    ELSE            reduce using rule 95 (factor -> var .)
    CLOSE_TAG       reduce using rule 95 (factor -> var .)
    ID              reduce using rule 95 (factor -> var .)
    AMPERSANT       reduce using rule 95 (factor -> var .)
    FUNCTION        reduce using rule 95 (factor -> var .)
    REQUIRE         reduce using rule 95 (factor -> var .)
    CLASS           reduce using rule 95 (factor -> var .)
    IF              reduce using rule 95 (factor -> var .)
    SWITCH          reduce using rule 95 (factor -> var .)
    CASE            reduce using rule 95 (factor -> var .)
    DEFAULT         reduce using rule 95 (factor -> var .)
    FOR             reduce using rule 95 (factor -> var .)
    WHILE           reduce using rule 95 (factor -> var .)
    ECHO            reduce using rule 95 (factor -> var .)
    LBLOCK          reduce using rule 95 (factor -> var .)
    RETURN          reduce using rule 95 (factor -> var .)
    LPAREN          reduce using rule 95 (factor -> var .)
    NUMBER          reduce using rule 95 (factor -> var .)
    TRUE            reduce using rule 95 (factor -> var .)
    FALSE           reduce using rule 95 (factor -> var .)
    RBLOCK          reduce using rule 95 (factor -> var .)
    RBRACKET        reduce using rule 95 (factor -> var .)
    COMMA           reduce using rule 95 (factor -> var .)


state 56

    (72) expression -> simple_expression .

    RPAREN          reduce using rule 72 (expression -> simple_expression .)
    PLUS            reduce using rule 72 (expression -> simple_expression .)
    MINUS           reduce using rule 72 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 72 (expression -> simple_expression .)
    BREAK           reduce using rule 72 (expression -> simple_expression .)
    ELSE            reduce using rule 72 (expression -> simple_expression .)
    CLOSE_TAG       reduce using rule 72 (expression -> simple_expression .)
    ID              reduce using rule 72 (expression -> simple_expression .)
    AMPERSANT       reduce using rule 72 (expression -> simple_expression .)
    FUNCTION        reduce using rule 72 (expression -> simple_expression .)
    REQUIRE         reduce using rule 72 (expression -> simple_expression .)
    CLASS           reduce using rule 72 (expression -> simple_expression .)
    IF              reduce using rule 72 (expression -> simple_expression .)
    SWITCH          reduce using rule 72 (expression -> simple_expression .)
    CASE            reduce using rule 72 (expression -> simple_expression .)
    DEFAULT         reduce using rule 72 (expression -> simple_expression .)
    FOR             reduce using rule 72 (expression -> simple_expression .)
    WHILE           reduce using rule 72 (expression -> simple_expression .)
    ECHO            reduce using rule 72 (expression -> simple_expression .)
    LBLOCK          reduce using rule 72 (expression -> simple_expression .)
    RETURN          reduce using rule 72 (expression -> simple_expression .)
    LPAREN          reduce using rule 72 (expression -> simple_expression .)
    NUMBER          reduce using rule 72 (expression -> simple_expression .)
    TRUE            reduce using rule 72 (expression -> simple_expression .)
    FALSE           reduce using rule 72 (expression -> simple_expression .)
    RBLOCK          reduce using rule 72 (expression -> simple_expression .)
    RBRACKET        reduce using rule 72 (expression -> simple_expression .)
    COMMA           reduce using rule 72 (expression -> simple_expression .)


state 57

    (74) var -> ID .
    (75) var -> ID . LBRACKET expression RBRACKET
    (99) call -> ID . LPAREN args RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUAL           reduce using rule 74 (var -> ID .)
    MINUSMINUS      reduce using rule 74 (var -> ID .)
    PLUSPLUS        reduce using rule 74 (var -> ID .)
    TIMES           reduce using rule 74 (var -> ID .)
    DIVIDE          reduce using rule 74 (var -> ID .)
    LESS            reduce using rule 74 (var -> ID .)
    LESSEQUAL       reduce using rule 74 (var -> ID .)
    GREATER         reduce using rule 74 (var -> ID .)
    GREATEREQUAL    reduce using rule 74 (var -> ID .)
    DEQUAL          reduce using rule 74 (var -> ID .)
    ISEQUAL         reduce using rule 74 (var -> ID .)
    PLUS            reduce using rule 74 (var -> ID .)
    MINUS           reduce using rule 74 (var -> ID .)
    RPAREN          reduce using rule 74 (var -> ID .)
    SEMICOLON       reduce using rule 74 (var -> ID .)
    BREAK           reduce using rule 74 (var -> ID .)
    ELSE            reduce using rule 74 (var -> ID .)
    CLOSE_TAG       reduce using rule 74 (var -> ID .)
    ID              reduce using rule 74 (var -> ID .)
    AMPERSANT       reduce using rule 74 (var -> ID .)
    FUNCTION        reduce using rule 74 (var -> ID .)
    REQUIRE         reduce using rule 74 (var -> ID .)
    CLASS           reduce using rule 74 (var -> ID .)
    IF              reduce using rule 74 (var -> ID .)
    SWITCH          reduce using rule 74 (var -> ID .)
    CASE            reduce using rule 74 (var -> ID .)
    DEFAULT         reduce using rule 74 (var -> ID .)
    FOR             reduce using rule 74 (var -> ID .)
    WHILE           reduce using rule 74 (var -> ID .)
    ECHO            reduce using rule 74 (var -> ID .)
    LBLOCK          reduce using rule 74 (var -> ID .)
    RETURN          reduce using rule 74 (var -> ID .)
    NUMBER          reduce using rule 74 (var -> ID .)
    TRUE            reduce using rule 74 (var -> ID .)
    FALSE           reduce using rule 74 (var -> ID .)
    RBLOCK          reduce using rule 74 (var -> ID .)
    RBRACKET        reduce using rule 74 (var -> ID .)
    COMMA           reduce using rule 74 (var -> ID .)
    LBRACKET        shift and go to state 107
    LPAREN          shift and go to state 108

  ! LPAREN          [ reduce using rule 74 (var -> ID .) ]


state 58

    (76) simple_expression -> additive_expression . relop additive_expression
    (77) simple_expression -> additive_expression .
    (84) additive_expression -> additive_expression . addop term
    (78) relop -> . LESS
    (79) relop -> . LESSEQUAL
    (80) relop -> . GREATER
    (81) relop -> . GREATEREQUAL
    (82) relop -> . DEQUAL
    (83) relop -> . ISEQUAL
    (88) addop -> . PLUS
    (89) addop -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          reduce using rule 77 (simple_expression -> additive_expression .)
    SEMICOLON       reduce using rule 77 (simple_expression -> additive_expression .)
    BREAK           reduce using rule 77 (simple_expression -> additive_expression .)
    ELSE            reduce using rule 77 (simple_expression -> additive_expression .)
    CLOSE_TAG       reduce using rule 77 (simple_expression -> additive_expression .)
    ID              reduce using rule 77 (simple_expression -> additive_expression .)
    AMPERSANT       reduce using rule 77 (simple_expression -> additive_expression .)
    FUNCTION        reduce using rule 77 (simple_expression -> additive_expression .)
    REQUIRE         reduce using rule 77 (simple_expression -> additive_expression .)
    CLASS           reduce using rule 77 (simple_expression -> additive_expression .)
    IF              reduce using rule 77 (simple_expression -> additive_expression .)
    SWITCH          reduce using rule 77 (simple_expression -> additive_expression .)
    CASE            reduce using rule 77 (simple_expression -> additive_expression .)
    DEFAULT         reduce using rule 77 (simple_expression -> additive_expression .)
    FOR             reduce using rule 77 (simple_expression -> additive_expression .)
    WHILE           reduce using rule 77 (simple_expression -> additive_expression .)
    ECHO            reduce using rule 77 (simple_expression -> additive_expression .)
    LBLOCK          reduce using rule 77 (simple_expression -> additive_expression .)
    RETURN          reduce using rule 77 (simple_expression -> additive_expression .)
    LPAREN          reduce using rule 77 (simple_expression -> additive_expression .)
    NUMBER          reduce using rule 77 (simple_expression -> additive_expression .)
    TRUE            reduce using rule 77 (simple_expression -> additive_expression .)
    FALSE           reduce using rule 77 (simple_expression -> additive_expression .)
    RBLOCK          reduce using rule 77 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 77 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 77 (simple_expression -> additive_expression .)
    LESS            shift and go to state 111
    LESSEQUAL       shift and go to state 112
    GREATER         shift and go to state 113
    GREATEREQUAL    shift and go to state 114
    DEQUAL          shift and go to state 115
    ISEQUAL         shift and go to state 116
    PLUS            shift and go to state 117
    MINUS           shift and go to state 118

  ! PLUS            [ reduce using rule 77 (simple_expression -> additive_expression .) ]
  ! MINUS           [ reduce using rule 77 (simple_expression -> additive_expression .) ]

    relop                          shift and go to state 109
    addop                          shift and go to state 110

state 59

    (91) term -> factor .

    MINUSMINUS      reduce using rule 91 (term -> factor .)
    PLUSPLUS        reduce using rule 91 (term -> factor .)
    TIMES           reduce using rule 91 (term -> factor .)
    DIVIDE          reduce using rule 91 (term -> factor .)
    LESS            reduce using rule 91 (term -> factor .)
    LESSEQUAL       reduce using rule 91 (term -> factor .)
    GREATER         reduce using rule 91 (term -> factor .)
    GREATEREQUAL    reduce using rule 91 (term -> factor .)
    DEQUAL          reduce using rule 91 (term -> factor .)
    ISEQUAL         reduce using rule 91 (term -> factor .)
    PLUS            reduce using rule 91 (term -> factor .)
    MINUS           reduce using rule 91 (term -> factor .)
    RPAREN          reduce using rule 91 (term -> factor .)
    SEMICOLON       reduce using rule 91 (term -> factor .)
    BREAK           reduce using rule 91 (term -> factor .)
    ELSE            reduce using rule 91 (term -> factor .)
    CLOSE_TAG       reduce using rule 91 (term -> factor .)
    ID              reduce using rule 91 (term -> factor .)
    AMPERSANT       reduce using rule 91 (term -> factor .)
    FUNCTION        reduce using rule 91 (term -> factor .)
    REQUIRE         reduce using rule 91 (term -> factor .)
    CLASS           reduce using rule 91 (term -> factor .)
    IF              reduce using rule 91 (term -> factor .)
    SWITCH          reduce using rule 91 (term -> factor .)
    CASE            reduce using rule 91 (term -> factor .)
    DEFAULT         reduce using rule 91 (term -> factor .)
    FOR             reduce using rule 91 (term -> factor .)
    WHILE           reduce using rule 91 (term -> factor .)
    ECHO            reduce using rule 91 (term -> factor .)
    LBLOCK          reduce using rule 91 (term -> factor .)
    RETURN          reduce using rule 91 (term -> factor .)
    LPAREN          reduce using rule 91 (term -> factor .)
    NUMBER          reduce using rule 91 (term -> factor .)
    TRUE            reduce using rule 91 (term -> factor .)
    FALSE           reduce using rule 91 (term -> factor .)
    RBLOCK          reduce using rule 91 (term -> factor .)
    RBRACKET        reduce using rule 91 (term -> factor .)
    COMMA           reduce using rule 91 (term -> factor .)


state 60

    (96) factor -> call .

    MINUSMINUS      reduce using rule 96 (factor -> call .)
    PLUSPLUS        reduce using rule 96 (factor -> call .)
    TIMES           reduce using rule 96 (factor -> call .)
    DIVIDE          reduce using rule 96 (factor -> call .)
    LESS            reduce using rule 96 (factor -> call .)
    LESSEQUAL       reduce using rule 96 (factor -> call .)
    GREATER         reduce using rule 96 (factor -> call .)
    GREATEREQUAL    reduce using rule 96 (factor -> call .)
    DEQUAL          reduce using rule 96 (factor -> call .)
    ISEQUAL         reduce using rule 96 (factor -> call .)
    PLUS            reduce using rule 96 (factor -> call .)
    MINUS           reduce using rule 96 (factor -> call .)
    RPAREN          reduce using rule 96 (factor -> call .)
    SEMICOLON       reduce using rule 96 (factor -> call .)
    BREAK           reduce using rule 96 (factor -> call .)
    ELSE            reduce using rule 96 (factor -> call .)
    CLOSE_TAG       reduce using rule 96 (factor -> call .)
    ID              reduce using rule 96 (factor -> call .)
    AMPERSANT       reduce using rule 96 (factor -> call .)
    FUNCTION        reduce using rule 96 (factor -> call .)
    REQUIRE         reduce using rule 96 (factor -> call .)
    CLASS           reduce using rule 96 (factor -> call .)
    IF              reduce using rule 96 (factor -> call .)
    SWITCH          reduce using rule 96 (factor -> call .)
    CASE            reduce using rule 96 (factor -> call .)
    DEFAULT         reduce using rule 96 (factor -> call .)
    FOR             reduce using rule 96 (factor -> call .)
    WHILE           reduce using rule 96 (factor -> call .)
    ECHO            reduce using rule 96 (factor -> call .)
    LBLOCK          reduce using rule 96 (factor -> call .)
    RETURN          reduce using rule 96 (factor -> call .)
    LPAREN          reduce using rule 96 (factor -> call .)
    NUMBER          reduce using rule 96 (factor -> call .)
    TRUE            reduce using rule 96 (factor -> call .)
    FALSE           reduce using rule 96 (factor -> call .)
    RBLOCK          reduce using rule 96 (factor -> call .)
    RBRACKET        reduce using rule 96 (factor -> call .)
    COMMA           reduce using rule 96 (factor -> call .)


state 61

    (97) factor -> NUMBER .

    MINUSMINUS      reduce using rule 97 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 97 (factor -> NUMBER .)
    TIMES           reduce using rule 97 (factor -> NUMBER .)
    DIVIDE          reduce using rule 97 (factor -> NUMBER .)
    LESS            reduce using rule 97 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 97 (factor -> NUMBER .)
    GREATER         reduce using rule 97 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 97 (factor -> NUMBER .)
    DEQUAL          reduce using rule 97 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 97 (factor -> NUMBER .)
    PLUS            reduce using rule 97 (factor -> NUMBER .)
    MINUS           reduce using rule 97 (factor -> NUMBER .)
    RPAREN          reduce using rule 97 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 97 (factor -> NUMBER .)
    BREAK           reduce using rule 97 (factor -> NUMBER .)
    ELSE            reduce using rule 97 (factor -> NUMBER .)
    CLOSE_TAG       reduce using rule 97 (factor -> NUMBER .)
    ID              reduce using rule 97 (factor -> NUMBER .)
    AMPERSANT       reduce using rule 97 (factor -> NUMBER .)
    FUNCTION        reduce using rule 97 (factor -> NUMBER .)
    REQUIRE         reduce using rule 97 (factor -> NUMBER .)
    CLASS           reduce using rule 97 (factor -> NUMBER .)
    IF              reduce using rule 97 (factor -> NUMBER .)
    SWITCH          reduce using rule 97 (factor -> NUMBER .)
    CASE            reduce using rule 97 (factor -> NUMBER .)
    DEFAULT         reduce using rule 97 (factor -> NUMBER .)
    FOR             reduce using rule 97 (factor -> NUMBER .)
    WHILE           reduce using rule 97 (factor -> NUMBER .)
    ECHO            reduce using rule 97 (factor -> NUMBER .)
    LBLOCK          reduce using rule 97 (factor -> NUMBER .)
    RETURN          reduce using rule 97 (factor -> NUMBER .)
    LPAREN          reduce using rule 97 (factor -> NUMBER .)
    NUMBER          reduce using rule 97 (factor -> NUMBER .)
    TRUE            reduce using rule 97 (factor -> NUMBER .)
    FALSE           reduce using rule 97 (factor -> NUMBER .)
    RBLOCK          reduce using rule 97 (factor -> NUMBER .)
    RBRACKET        reduce using rule 97 (factor -> NUMBER .)
    COMMA           reduce using rule 97 (factor -> NUMBER .)


state 62

    (98) factor -> boolean .

    MINUSMINUS      reduce using rule 98 (factor -> boolean .)
    PLUSPLUS        reduce using rule 98 (factor -> boolean .)
    TIMES           reduce using rule 98 (factor -> boolean .)
    DIVIDE          reduce using rule 98 (factor -> boolean .)
    LESS            reduce using rule 98 (factor -> boolean .)
    LESSEQUAL       reduce using rule 98 (factor -> boolean .)
    GREATER         reduce using rule 98 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 98 (factor -> boolean .)
    DEQUAL          reduce using rule 98 (factor -> boolean .)
    ISEQUAL         reduce using rule 98 (factor -> boolean .)
    PLUS            reduce using rule 98 (factor -> boolean .)
    MINUS           reduce using rule 98 (factor -> boolean .)
    RPAREN          reduce using rule 98 (factor -> boolean .)
    SEMICOLON       reduce using rule 98 (factor -> boolean .)
    BREAK           reduce using rule 98 (factor -> boolean .)
    ELSE            reduce using rule 98 (factor -> boolean .)
    CLOSE_TAG       reduce using rule 98 (factor -> boolean .)
    ID              reduce using rule 98 (factor -> boolean .)
    AMPERSANT       reduce using rule 98 (factor -> boolean .)
    FUNCTION        reduce using rule 98 (factor -> boolean .)
    REQUIRE         reduce using rule 98 (factor -> boolean .)
    CLASS           reduce using rule 98 (factor -> boolean .)
    IF              reduce using rule 98 (factor -> boolean .)
    SWITCH          reduce using rule 98 (factor -> boolean .)
    CASE            reduce using rule 98 (factor -> boolean .)
    DEFAULT         reduce using rule 98 (factor -> boolean .)
    FOR             reduce using rule 98 (factor -> boolean .)
    WHILE           reduce using rule 98 (factor -> boolean .)
    ECHO            reduce using rule 98 (factor -> boolean .)
    LBLOCK          reduce using rule 98 (factor -> boolean .)
    RETURN          reduce using rule 98 (factor -> boolean .)
    LPAREN          reduce using rule 98 (factor -> boolean .)
    NUMBER          reduce using rule 98 (factor -> boolean .)
    TRUE            reduce using rule 98 (factor -> boolean .)
    FALSE           reduce using rule 98 (factor -> boolean .)
    RBLOCK          reduce using rule 98 (factor -> boolean .)
    RBRACKET        reduce using rule 98 (factor -> boolean .)
    COMMA           reduce using rule 98 (factor -> boolean .)


state 63

    (62) selection_stmt -> SWITCH LPAREN var . RPAREN statement

    RPAREN          shift and go to state 119


state 64

    (74) var -> ID .
    (75) var -> ID . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 74 (var -> ID .)
    LBRACKET        shift and go to state 107


state 65

    (63) selection_stmt -> CASE NUMBER COLON . statement BREAK SEMICOLON
    (2) statement -> . expression
    (53) statement -> . expression_stmt
    (54) statement -> . compount_stmt
    (55) statement -> . selection_stmt
    (56) statement -> . iteration_stmt
    (57) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (58) expression_stmt -> . expression SEMICOLON
    (59) expression_stmt -> . SEMICOLON
    (48) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (60) selection_stmt -> . IF LPAREN expression RPAREN statement
    (61) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (62) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (63) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (64) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (65) selection_stmt -> . print_stmt
    (66) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (67) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (68) iteration_stmt -> . print_stmt
    (69) return_stmt -> . RETURN SEMICOLON
    (70) return_stmt -> . RETURN expression SEMICOLON
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (16) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (17) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (18) print_stmt -> . empty
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (106) empty -> .
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    statement                      shift and go to state 120
    expression                     shift and go to state 68
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    additive_expression            shift and go to state 58
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 66

    (64) selection_stmt -> DEFAULT COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 121


state 67

    (59) expression_stmt -> SEMICOLON .

    BREAK           reduce using rule 59 (expression_stmt -> SEMICOLON .)
    ELSE            reduce using rule 59 (expression_stmt -> SEMICOLON .)
    CLOSE_TAG       reduce using rule 59 (expression_stmt -> SEMICOLON .)
    ID              reduce using rule 59 (expression_stmt -> SEMICOLON .)
    AMPERSANT       reduce using rule 59 (expression_stmt -> SEMICOLON .)
    FUNCTION        reduce using rule 59 (expression_stmt -> SEMICOLON .)
    REQUIRE         reduce using rule 59 (expression_stmt -> SEMICOLON .)
    CLASS           reduce using rule 59 (expression_stmt -> SEMICOLON .)
    IF              reduce using rule 59 (expression_stmt -> SEMICOLON .)
    SWITCH          reduce using rule 59 (expression_stmt -> SEMICOLON .)
    CASE            reduce using rule 59 (expression_stmt -> SEMICOLON .)
    DEFAULT         reduce using rule 59 (expression_stmt -> SEMICOLON .)
    FOR             reduce using rule 59 (expression_stmt -> SEMICOLON .)
    WHILE           reduce using rule 59 (expression_stmt -> SEMICOLON .)
    ECHO            reduce using rule 59 (expression_stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 59 (expression_stmt -> SEMICOLON .)
    LBLOCK          reduce using rule 59 (expression_stmt -> SEMICOLON .)
    RETURN          reduce using rule 59 (expression_stmt -> SEMICOLON .)
    LPAREN          reduce using rule 59 (expression_stmt -> SEMICOLON .)
    NUMBER          reduce using rule 59 (expression_stmt -> SEMICOLON .)
    TRUE            reduce using rule 59 (expression_stmt -> SEMICOLON .)
    FALSE           reduce using rule 59 (expression_stmt -> SEMICOLON .)
    RBLOCK          reduce using rule 59 (expression_stmt -> SEMICOLON .)


state 68

    (2) statement -> expression .
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term
    (58) expression_stmt -> expression . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    BREAK           reduce using rule 2 (statement -> expression .)
    ELSE            reduce using rule 2 (statement -> expression .)
    CLOSE_TAG       reduce using rule 2 (statement -> expression .)
    ID              reduce using rule 2 (statement -> expression .)
    AMPERSANT       reduce using rule 2 (statement -> expression .)
    FUNCTION        reduce using rule 2 (statement -> expression .)
    REQUIRE         reduce using rule 2 (statement -> expression .)
    CLASS           reduce using rule 2 (statement -> expression .)
    IF              reduce using rule 2 (statement -> expression .)
    SWITCH          reduce using rule 2 (statement -> expression .)
    CASE            reduce using rule 2 (statement -> expression .)
    DEFAULT         reduce using rule 2 (statement -> expression .)
    FOR             reduce using rule 2 (statement -> expression .)
    WHILE           reduce using rule 2 (statement -> expression .)
    ECHO            reduce using rule 2 (statement -> expression .)
    LBLOCK          reduce using rule 2 (statement -> expression .)
    RETURN          reduce using rule 2 (statement -> expression .)
    LPAREN          reduce using rule 2 (statement -> expression .)
    NUMBER          reduce using rule 2 (statement -> expression .)
    TRUE            reduce using rule 2 (statement -> expression .)
    FALSE           reduce using rule 2 (statement -> expression .)
    RBLOCK          reduce using rule 2 (statement -> expression .)
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100
    SEMICOLON       shift and go to state 122

  ! SEMICOLON       [ reduce using rule 2 (statement -> expression .) ]


state 69

    (53) statement -> expression_stmt .

    BREAK           reduce using rule 53 (statement -> expression_stmt .)
    ELSE            reduce using rule 53 (statement -> expression_stmt .)
    CLOSE_TAG       reduce using rule 53 (statement -> expression_stmt .)
    ID              reduce using rule 53 (statement -> expression_stmt .)
    AMPERSANT       reduce using rule 53 (statement -> expression_stmt .)
    FUNCTION        reduce using rule 53 (statement -> expression_stmt .)
    REQUIRE         reduce using rule 53 (statement -> expression_stmt .)
    CLASS           reduce using rule 53 (statement -> expression_stmt .)
    IF              reduce using rule 53 (statement -> expression_stmt .)
    SWITCH          reduce using rule 53 (statement -> expression_stmt .)
    CASE            reduce using rule 53 (statement -> expression_stmt .)
    DEFAULT         reduce using rule 53 (statement -> expression_stmt .)
    FOR             reduce using rule 53 (statement -> expression_stmt .)
    WHILE           reduce using rule 53 (statement -> expression_stmt .)
    ECHO            reduce using rule 53 (statement -> expression_stmt .)
    SEMICOLON       reduce using rule 53 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 53 (statement -> expression_stmt .)
    RETURN          reduce using rule 53 (statement -> expression_stmt .)
    LPAREN          reduce using rule 53 (statement -> expression_stmt .)
    NUMBER          reduce using rule 53 (statement -> expression_stmt .)
    TRUE            reduce using rule 53 (statement -> expression_stmt .)
    FALSE           reduce using rule 53 (statement -> expression_stmt .)
    RBLOCK          reduce using rule 53 (statement -> expression_stmt .)


state 70

    (54) statement -> compount_stmt .

    BREAK           reduce using rule 54 (statement -> compount_stmt .)
    ELSE            reduce using rule 54 (statement -> compount_stmt .)
    CLOSE_TAG       reduce using rule 54 (statement -> compount_stmt .)
    ID              reduce using rule 54 (statement -> compount_stmt .)
    AMPERSANT       reduce using rule 54 (statement -> compount_stmt .)
    FUNCTION        reduce using rule 54 (statement -> compount_stmt .)
    REQUIRE         reduce using rule 54 (statement -> compount_stmt .)
    CLASS           reduce using rule 54 (statement -> compount_stmt .)
    IF              reduce using rule 54 (statement -> compount_stmt .)
    SWITCH          reduce using rule 54 (statement -> compount_stmt .)
    CASE            reduce using rule 54 (statement -> compount_stmt .)
    DEFAULT         reduce using rule 54 (statement -> compount_stmt .)
    FOR             reduce using rule 54 (statement -> compount_stmt .)
    WHILE           reduce using rule 54 (statement -> compount_stmt .)
    ECHO            reduce using rule 54 (statement -> compount_stmt .)
    SEMICOLON       reduce using rule 54 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 54 (statement -> compount_stmt .)
    RETURN          reduce using rule 54 (statement -> compount_stmt .)
    LPAREN          reduce using rule 54 (statement -> compount_stmt .)
    NUMBER          reduce using rule 54 (statement -> compount_stmt .)
    TRUE            reduce using rule 54 (statement -> compount_stmt .)
    FALSE           reduce using rule 54 (statement -> compount_stmt .)
    RBLOCK          reduce using rule 54 (statement -> compount_stmt .)


state 71

    (55) statement -> selection_stmt .

    BREAK           reduce using rule 55 (statement -> selection_stmt .)
    ELSE            reduce using rule 55 (statement -> selection_stmt .)
    CLOSE_TAG       reduce using rule 55 (statement -> selection_stmt .)
    ID              reduce using rule 55 (statement -> selection_stmt .)
    AMPERSANT       reduce using rule 55 (statement -> selection_stmt .)
    FUNCTION        reduce using rule 55 (statement -> selection_stmt .)
    REQUIRE         reduce using rule 55 (statement -> selection_stmt .)
    CLASS           reduce using rule 55 (statement -> selection_stmt .)
    IF              reduce using rule 55 (statement -> selection_stmt .)
    SWITCH          reduce using rule 55 (statement -> selection_stmt .)
    CASE            reduce using rule 55 (statement -> selection_stmt .)
    DEFAULT         reduce using rule 55 (statement -> selection_stmt .)
    FOR             reduce using rule 55 (statement -> selection_stmt .)
    WHILE           reduce using rule 55 (statement -> selection_stmt .)
    ECHO            reduce using rule 55 (statement -> selection_stmt .)
    SEMICOLON       reduce using rule 55 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 55 (statement -> selection_stmt .)
    RETURN          reduce using rule 55 (statement -> selection_stmt .)
    LPAREN          reduce using rule 55 (statement -> selection_stmt .)
    NUMBER          reduce using rule 55 (statement -> selection_stmt .)
    TRUE            reduce using rule 55 (statement -> selection_stmt .)
    FALSE           reduce using rule 55 (statement -> selection_stmt .)
    RBLOCK          reduce using rule 55 (statement -> selection_stmt .)


state 72

    (56) statement -> iteration_stmt .

    BREAK           reduce using rule 56 (statement -> iteration_stmt .)
    ELSE            reduce using rule 56 (statement -> iteration_stmt .)
    CLOSE_TAG       reduce using rule 56 (statement -> iteration_stmt .)
    ID              reduce using rule 56 (statement -> iteration_stmt .)
    AMPERSANT       reduce using rule 56 (statement -> iteration_stmt .)
    FUNCTION        reduce using rule 56 (statement -> iteration_stmt .)
    REQUIRE         reduce using rule 56 (statement -> iteration_stmt .)
    CLASS           reduce using rule 56 (statement -> iteration_stmt .)
    IF              reduce using rule 56 (statement -> iteration_stmt .)
    SWITCH          reduce using rule 56 (statement -> iteration_stmt .)
    CASE            reduce using rule 56 (statement -> iteration_stmt .)
    DEFAULT         reduce using rule 56 (statement -> iteration_stmt .)
    FOR             reduce using rule 56 (statement -> iteration_stmt .)
    WHILE           reduce using rule 56 (statement -> iteration_stmt .)
    ECHO            reduce using rule 56 (statement -> iteration_stmt .)
    SEMICOLON       reduce using rule 56 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 56 (statement -> iteration_stmt .)
    RETURN          reduce using rule 56 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 56 (statement -> iteration_stmt .)
    NUMBER          reduce using rule 56 (statement -> iteration_stmt .)
    TRUE            reduce using rule 56 (statement -> iteration_stmt .)
    FALSE           reduce using rule 56 (statement -> iteration_stmt .)
    RBLOCK          reduce using rule 56 (statement -> iteration_stmt .)


state 73

    (57) statement -> return_stmt .

    BREAK           reduce using rule 57 (statement -> return_stmt .)
    ELSE            reduce using rule 57 (statement -> return_stmt .)
    CLOSE_TAG       reduce using rule 57 (statement -> return_stmt .)
    ID              reduce using rule 57 (statement -> return_stmt .)
    AMPERSANT       reduce using rule 57 (statement -> return_stmt .)
    FUNCTION        reduce using rule 57 (statement -> return_stmt .)
    REQUIRE         reduce using rule 57 (statement -> return_stmt .)
    CLASS           reduce using rule 57 (statement -> return_stmt .)
    IF              reduce using rule 57 (statement -> return_stmt .)
    SWITCH          reduce using rule 57 (statement -> return_stmt .)
    CASE            reduce using rule 57 (statement -> return_stmt .)
    DEFAULT         reduce using rule 57 (statement -> return_stmt .)
    FOR             reduce using rule 57 (statement -> return_stmt .)
    WHILE           reduce using rule 57 (statement -> return_stmt .)
    ECHO            reduce using rule 57 (statement -> return_stmt .)
    SEMICOLON       reduce using rule 57 (statement -> return_stmt .)
    LBLOCK          reduce using rule 57 (statement -> return_stmt .)
    RETURN          reduce using rule 57 (statement -> return_stmt .)
    LPAREN          reduce using rule 57 (statement -> return_stmt .)
    NUMBER          reduce using rule 57 (statement -> return_stmt .)
    TRUE            reduce using rule 57 (statement -> return_stmt .)
    FALSE           reduce using rule 57 (statement -> return_stmt .)
    RBLOCK          reduce using rule 57 (statement -> return_stmt .)


state 74

    (48) compount_stmt -> LBLOCK . print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (16) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (17) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (18) print_stmt -> . empty
    (106) empty -> .

    ECHO            reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    LBLOCK          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    SWITCH          reduce using rule 106 (empty -> .)
    CASE            reduce using rule 106 (empty -> .)
    DEFAULT         reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    LPAREN          reduce using rule 106 (empty -> .)
    NUMBER          reduce using rule 106 (empty -> .)
    TRUE            reduce using rule 106 (empty -> .)
    FALSE           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)

    print_stmt                     shift and go to state 123
    empty                          shift and go to state 17

state 75

    (65) selection_stmt -> print_stmt .
    (68) iteration_stmt -> print_stmt .
    (16) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (17) print_stmt -> print_stmt . ECHO ID SEMICOLON

  ! reduce/reduce conflict for BREAK resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ELSE resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ECHO resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LBLOCK resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for RETURN resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LPAREN resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for NUMBER resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for TRUE resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FALSE resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 65 (selection_stmt -> print_stmt .)
  ! shift/reduce conflict for ECHO resolved as shift
    BREAK           reduce using rule 65 (selection_stmt -> print_stmt .)
    ELSE            reduce using rule 65 (selection_stmt -> print_stmt .)
    CLOSE_TAG       reduce using rule 65 (selection_stmt -> print_stmt .)
    ID              reduce using rule 65 (selection_stmt -> print_stmt .)
    AMPERSANT       reduce using rule 65 (selection_stmt -> print_stmt .)
    FUNCTION        reduce using rule 65 (selection_stmt -> print_stmt .)
    REQUIRE         reduce using rule 65 (selection_stmt -> print_stmt .)
    CLASS           reduce using rule 65 (selection_stmt -> print_stmt .)
    IF              reduce using rule 65 (selection_stmt -> print_stmt .)
    SWITCH          reduce using rule 65 (selection_stmt -> print_stmt .)
    CASE            reduce using rule 65 (selection_stmt -> print_stmt .)
    DEFAULT         reduce using rule 65 (selection_stmt -> print_stmt .)
    FOR             reduce using rule 65 (selection_stmt -> print_stmt .)
    WHILE           reduce using rule 65 (selection_stmt -> print_stmt .)
    SEMICOLON       reduce using rule 65 (selection_stmt -> print_stmt .)
    LBLOCK          reduce using rule 65 (selection_stmt -> print_stmt .)
    RETURN          reduce using rule 65 (selection_stmt -> print_stmt .)
    LPAREN          reduce using rule 65 (selection_stmt -> print_stmt .)
    NUMBER          reduce using rule 65 (selection_stmt -> print_stmt .)
    TRUE            reduce using rule 65 (selection_stmt -> print_stmt .)
    FALSE           reduce using rule 65 (selection_stmt -> print_stmt .)
    RBLOCK          reduce using rule 65 (selection_stmt -> print_stmt .)
    ECHO            shift and go to state 26

  ! ECHO            [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! BREAK           [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! ELSE            [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! CLOSE_TAG       [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! AMPERSANT       [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! FUNCTION        [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! REQUIRE         [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! CLASS           [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! SEMICOLON       [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! LBLOCK          [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! RETURN          [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! LPAREN          [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! NUMBER          [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! TRUE            [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! FALSE           [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! RBLOCK          [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]


state 76

    (69) return_stmt -> RETURN . SEMICOLON
    (70) return_stmt -> RETURN . expression SEMICOLON
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    SEMICOLON       shift and go to state 124
    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 125
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 77

    (66) iteration_stmt -> FOR LPAREN var_declaration . SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    SEMICOLON       shift and go to state 126


state 78

    (67) iteration_stmt -> WHILE LPAREN expression . RPAREN statement
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    RPAREN          shift and go to state 127
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100


state 79

    (16) print_stmt -> print_stmt ECHO STRING SEMICOLON .

    ECHO            reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    CLOSE_TAG       reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    ID              reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    AMPERSANT       reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    FUNCTION        reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    REQUIRE         reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    CLASS           reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    IF              reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    SWITCH          reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    CASE            reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    DEFAULT         reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    FOR             reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    WHILE           reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    BREAK           reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    SEMICOLON       reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    LBLOCK          reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    RETURN          reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    LPAREN          reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    NUMBER          reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    TRUE            reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    FALSE           reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    RBLOCK          reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    ELSE            reduce using rule 16 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)


state 80

    (17) print_stmt -> print_stmt ECHO ID SEMICOLON .

    ECHO            reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    CLOSE_TAG       reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    ID              reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    AMPERSANT       reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    FUNCTION        reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    REQUIRE         reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    CLASS           reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    IF              reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    SWITCH          reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    CASE            reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    DEFAULT         reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    FOR             reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    WHILE           reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    BREAK           reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    SEMICOLON       reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    LBLOCK          reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    RETURN          reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    LPAREN          reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    NUMBER          reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    TRUE            reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    FALSE           reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    RBLOCK          reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    ELSE            reduce using rule 17 (print_stmt -> print_stmt ECHO ID SEMICOLON .)


state 81

    (37) var_declaration -> ID EQUAL ID SEMICOLON . var_declaration
    (38) var_declaration -> ID EQUAL ID SEMICOLON .
    (31) var_declaration -> . ID SEMICOLON var_declaration
    (32) var_declaration -> . ID SEMICOLON
    (33) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (35) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL boolean SEMICOLON
    (37) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL ID SEMICOLON
    (39) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (40) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    FUNCTION        reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    REQUIRE         reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    CLASS           reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    IF              reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    SWITCH          reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    CASE            reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    DEFAULT         reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    FOR             reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    WHILE           reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    ECHO            reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    SEMICOLON       reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    RBLOCK          reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    PRIVATE         reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    PUBLIC          reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    PROTECTED       reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    LBLOCK          reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    RETURN          reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    LPAREN          reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    NUMBER          reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    TRUE            reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    FALSE           reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 38 (var_declaration -> ID EQUAL ID SEMICOLON .) ]

    var_declaration                shift and go to state 128

state 82

    (33) var_declaration -> ID EQUAL NUMBER SEMICOLON . var_declaration
    (34) var_declaration -> ID EQUAL NUMBER SEMICOLON .
    (31) var_declaration -> . ID SEMICOLON var_declaration
    (32) var_declaration -> . ID SEMICOLON
    (33) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (35) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL boolean SEMICOLON
    (37) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL ID SEMICOLON
    (39) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (40) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    REQUIRE         reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    CLASS           reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    IF              reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    SWITCH          reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    CASE            reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    DEFAULT         reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    FOR             reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    WHILE           reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    ECHO            reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    SEMICOLON       reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    PRIVATE         reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    PUBLIC          reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    PROTECTED       reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    LBLOCK          reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    RETURN          reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    LPAREN          reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    NUMBER          reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    TRUE            reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    FALSE           reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 34 (var_declaration -> ID EQUAL NUMBER SEMICOLON .) ]

    var_declaration                shift and go to state 129

state 83

    (35) var_declaration -> ID EQUAL boolean SEMICOLON . var_declaration
    (36) var_declaration -> ID EQUAL boolean SEMICOLON .
    (31) var_declaration -> . ID SEMICOLON var_declaration
    (32) var_declaration -> . ID SEMICOLON
    (33) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (35) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL boolean SEMICOLON
    (37) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL ID SEMICOLON
    (39) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (40) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    FUNCTION        reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    REQUIRE         reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    CLASS           reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    IF              reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    SWITCH          reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    CASE            reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    DEFAULT         reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    FOR             reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    WHILE           reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    ECHO            reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    SEMICOLON       reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    RBLOCK          reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    PRIVATE         reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    PUBLIC          reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    PROTECTED       reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    LBLOCK          reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    RETURN          reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    LPAREN          reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    NUMBER          reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    TRUE            reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    FALSE           reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 36 (var_declaration -> ID EQUAL boolean SEMICOLON .) ]

    var_declaration                shift and go to state 130

state 84

    (39) var_declaration -> AMPERSANT ID SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    ID              reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    CLASS           reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    IF              reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    SWITCH          reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    CASE            reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    FOR             reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    WHILE           reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    ECHO            reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    RETURN          reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    LPAREN          reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    NUMBER          reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    TRUE            reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    FALSE           reduce using rule 39 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)


state 85

    (41) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 131


state 86

    (42) params -> param_list .
    (44) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 42 (params -> param_list .)
    COMMA           shift and go to state 132


state 87

    (43) params -> empty .

    RPAREN          reduce using rule 43 (params -> empty .)


state 88

    (45) param_list -> param .

    COMMA           reduce using rule 45 (param_list -> param .)
    RPAREN          reduce using rule 45 (param_list -> param .)


state 89

    (46) param -> ID .
    (47) param -> ID . LBRACKET RBRACKET

    COMMA           reduce using rule 46 (param -> ID .)
    RPAREN          reduce using rule 46 (param -> ID .)
    LBRACKET        shift and go to state 133


state 90

    (19) header_declaration -> REQUIRE LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 134


state 91

    (21) class_stmt -> LBLOCK attributes . methods RBLOCK
    (23) class_stmt -> LBLOCK attributes . RBLOCK
    (24) attributes -> attributes . scope var_declaration
    (26) methods -> . methods scope fun_declaration
    (27) methods -> . scope fun_declaration
    (28) scope -> . PRIVATE
    (29) scope -> . PUBLIC
    (30) scope -> . PROTECTED

    RBLOCK          shift and go to state 136
    PRIVATE         shift and go to state 94
    PUBLIC          shift and go to state 95
    PROTECTED       shift and go to state 96

    methods                        shift and go to state 135
    scope                          shift and go to state 137

state 92

    (22) class_stmt -> LBLOCK empty . RBLOCK

    RBLOCK          shift and go to state 138


state 93

    (25) attributes -> scope . var_declaration
    (31) var_declaration -> . ID SEMICOLON var_declaration
    (32) var_declaration -> . ID SEMICOLON
    (33) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (35) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL boolean SEMICOLON
    (37) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL ID SEMICOLON
    (39) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (40) var_declaration -> . AMPERSANT ID SEMICOLON

    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

    var_declaration                shift and go to state 139

state 94

    (28) scope -> PRIVATE .

    ID              reduce using rule 28 (scope -> PRIVATE .)
    AMPERSANT       reduce using rule 28 (scope -> PRIVATE .)
    FUNCTION        reduce using rule 28 (scope -> PRIVATE .)


state 95

    (29) scope -> PUBLIC .

    ID              reduce using rule 29 (scope -> PUBLIC .)
    AMPERSANT       reduce using rule 29 (scope -> PUBLIC .)
    FUNCTION        reduce using rule 29 (scope -> PUBLIC .)


state 96

    (30) scope -> PROTECTED .

    ID              reduce using rule 30 (scope -> PROTECTED .)
    AMPERSANT       reduce using rule 30 (scope -> PROTECTED .)
    FUNCTION        reduce using rule 30 (scope -> PROTECTED .)


state 97

    (94) factor -> LPAREN expression . RPAREN
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    RPAREN          shift and go to state 140
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100


state 98

    (60) selection_stmt -> IF LPAREN expression RPAREN . statement
    (61) selection_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (2) statement -> . expression
    (53) statement -> . expression_stmt
    (54) statement -> . compount_stmt
    (55) statement -> . selection_stmt
    (56) statement -> . iteration_stmt
    (57) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (58) expression_stmt -> . expression SEMICOLON
    (59) expression_stmt -> . SEMICOLON
    (48) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (60) selection_stmt -> . IF LPAREN expression RPAREN statement
    (61) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (62) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (63) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (64) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (65) selection_stmt -> . print_stmt
    (66) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (67) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (68) iteration_stmt -> . print_stmt
    (69) return_stmt -> . RETURN SEMICOLON
    (70) return_stmt -> . RETURN expression SEMICOLON
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (16) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (17) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (18) print_stmt -> . empty
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (106) empty -> .
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 106 (empty -> .)
    ELSE            reduce using rule 106 (empty -> .)
    CLOSE_TAG       reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    FUNCTION        reduce using rule 106 (empty -> .)
    REQUIRE         reduce using rule 106 (empty -> .)
    CLASS           reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 106 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 106 (empty -> .) ]
  ! RETURN          [ reduce using rule 106 (empty -> .) ]
  ! LPAREN          [ reduce using rule 106 (empty -> .) ]
  ! NUMBER          [ reduce using rule 106 (empty -> .) ]
  ! TRUE            [ reduce using rule 106 (empty -> .) ]
  ! FALSE           [ reduce using rule 106 (empty -> .) ]

    expression                     shift and go to state 68
    statement                      shift and go to state 141
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    additive_expression            shift and go to state 58
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 99

    (3) expression -> expression PLUS . term
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    term                           shift and go to state 142
    factor                         shift and go to state 59
    var                            shift and go to state 143
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 100

    (4) expression -> expression MINUS . term
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    term                           shift and go to state 144
    factor                         shift and go to state 59
    var                            shift and go to state 143
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 101

    (86) additive_expression -> term MINUSMINUS .

    LESS            reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    LESSEQUAL       reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    GREATER         reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    GREATEREQUAL    reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    DEQUAL          reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    ISEQUAL         reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    PLUS            reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    MINUS           reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    RPAREN          reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    SEMICOLON       reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    BREAK           reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    ELSE            reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    CLOSE_TAG       reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    ID              reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    AMPERSANT       reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    FUNCTION        reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    REQUIRE         reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    CLASS           reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    IF              reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    SWITCH          reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    CASE            reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    DEFAULT         reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    FOR             reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    WHILE           reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    ECHO            reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    LBLOCK          reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    RETURN          reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    LPAREN          reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    NUMBER          reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    TRUE            reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    FALSE           reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    RBLOCK          reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    RBRACKET        reduce using rule 86 (additive_expression -> term MINUSMINUS .)
    COMMA           reduce using rule 86 (additive_expression -> term MINUSMINUS .)


state 102

    (87) additive_expression -> term PLUSPLUS .

    LESS            reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    LESSEQUAL       reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    GREATER         reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    GREATEREQUAL    reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    DEQUAL          reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    ISEQUAL         reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    PLUS            reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    MINUS           reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    RPAREN          reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    SEMICOLON       reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    BREAK           reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    ELSE            reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    CLOSE_TAG       reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    ID              reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    AMPERSANT       reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    FUNCTION        reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    REQUIRE         reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    CLASS           reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    IF              reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    SWITCH          reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    CASE            reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    DEFAULT         reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    FOR             reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    WHILE           reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    ECHO            reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    LBLOCK          reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    RETURN          reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    LPAREN          reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    NUMBER          reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    TRUE            reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    FALSE           reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    RBLOCK          reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    RBRACKET        reduce using rule 87 (additive_expression -> term PLUSPLUS .)
    COMMA           reduce using rule 87 (additive_expression -> term PLUSPLUS .)


state 103

    (5) term -> term TIMES . factor
    (92) mulop -> TIMES .
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! LPAREN          [ reduce using rule 92 (mulop -> TIMES .) ]
  ! NUMBER          [ reduce using rule 92 (mulop -> TIMES .) ]
  ! ID              [ reduce using rule 92 (mulop -> TIMES .) ]
  ! TRUE            [ reduce using rule 92 (mulop -> TIMES .) ]
  ! FALSE           [ reduce using rule 92 (mulop -> TIMES .) ]

    factor                         shift and go to state 145
    var                            shift and go to state 143
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 104

    (6) term -> term DIVIDE . factor
    (93) mulop -> DIVIDE .
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! LPAREN          [ reduce using rule 93 (mulop -> DIVIDE .) ]
  ! NUMBER          [ reduce using rule 93 (mulop -> DIVIDE .) ]
  ! ID              [ reduce using rule 93 (mulop -> DIVIDE .) ]
  ! TRUE            [ reduce using rule 93 (mulop -> DIVIDE .) ]
  ! FALSE           [ reduce using rule 93 (mulop -> DIVIDE .) ]

    factor                         shift and go to state 146
    var                            shift and go to state 143
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 105

    (90) term -> term mulop . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    factor                         shift and go to state 147
    var                            shift and go to state 143
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 106

    (71) expression -> var EQUAL . expression
    (73) expression -> var EQUAL . AMPERSANT ID
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    AMPERSANT       shift and go to state 149
    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    var                            shift and go to state 55
    expression                     shift and go to state 148
    term                           shift and go to state 54
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 107

    (75) var -> ID LBRACKET . expression RBRACKET
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 150
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 108

    (99) call -> ID LPAREN . args RPAREN
    (100) args -> . args_list
    (101) args -> . empty
    (102) args_list -> . args_list COMMA expression
    (103) args_list -> . expression
    (106) empty -> .
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    RPAREN          reduce using rule 106 (empty -> .)
    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    args                           shift and go to state 151
    args_list                      shift and go to state 152
    empty                          shift and go to state 153
    expression                     shift and go to state 154
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 109

    (76) simple_expression -> additive_expression relop . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    additive_expression            shift and go to state 155
    term                           shift and go to state 54
    factor                         shift and go to state 59
    var                            shift and go to state 143
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 110

    (84) additive_expression -> additive_expression addop . term
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    term                           shift and go to state 156
    factor                         shift and go to state 59
    var                            shift and go to state 143
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 111

    (78) relop -> LESS .

    LPAREN          reduce using rule 78 (relop -> LESS .)
    NUMBER          reduce using rule 78 (relop -> LESS .)
    ID              reduce using rule 78 (relop -> LESS .)
    TRUE            reduce using rule 78 (relop -> LESS .)
    FALSE           reduce using rule 78 (relop -> LESS .)


state 112

    (79) relop -> LESSEQUAL .

    LPAREN          reduce using rule 79 (relop -> LESSEQUAL .)
    NUMBER          reduce using rule 79 (relop -> LESSEQUAL .)
    ID              reduce using rule 79 (relop -> LESSEQUAL .)
    TRUE            reduce using rule 79 (relop -> LESSEQUAL .)
    FALSE           reduce using rule 79 (relop -> LESSEQUAL .)


state 113

    (80) relop -> GREATER .

    LPAREN          reduce using rule 80 (relop -> GREATER .)
    NUMBER          reduce using rule 80 (relop -> GREATER .)
    ID              reduce using rule 80 (relop -> GREATER .)
    TRUE            reduce using rule 80 (relop -> GREATER .)
    FALSE           reduce using rule 80 (relop -> GREATER .)


state 114

    (81) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 81 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 81 (relop -> GREATEREQUAL .)
    ID              reduce using rule 81 (relop -> GREATEREQUAL .)
    TRUE            reduce using rule 81 (relop -> GREATEREQUAL .)
    FALSE           reduce using rule 81 (relop -> GREATEREQUAL .)


state 115

    (82) relop -> DEQUAL .

    LPAREN          reduce using rule 82 (relop -> DEQUAL .)
    NUMBER          reduce using rule 82 (relop -> DEQUAL .)
    ID              reduce using rule 82 (relop -> DEQUAL .)
    TRUE            reduce using rule 82 (relop -> DEQUAL .)
    FALSE           reduce using rule 82 (relop -> DEQUAL .)


state 116

    (83) relop -> ISEQUAL .

    LPAREN          reduce using rule 83 (relop -> ISEQUAL .)
    NUMBER          reduce using rule 83 (relop -> ISEQUAL .)
    ID              reduce using rule 83 (relop -> ISEQUAL .)
    TRUE            reduce using rule 83 (relop -> ISEQUAL .)
    FALSE           reduce using rule 83 (relop -> ISEQUAL .)


state 117

    (88) addop -> PLUS .

    LPAREN          reduce using rule 88 (addop -> PLUS .)
    NUMBER          reduce using rule 88 (addop -> PLUS .)
    ID              reduce using rule 88 (addop -> PLUS .)
    TRUE            reduce using rule 88 (addop -> PLUS .)
    FALSE           reduce using rule 88 (addop -> PLUS .)


state 118

    (89) addop -> MINUS .

    LPAREN          reduce using rule 89 (addop -> MINUS .)
    NUMBER          reduce using rule 89 (addop -> MINUS .)
    ID              reduce using rule 89 (addop -> MINUS .)
    TRUE            reduce using rule 89 (addop -> MINUS .)
    FALSE           reduce using rule 89 (addop -> MINUS .)


state 119

    (62) selection_stmt -> SWITCH LPAREN var RPAREN . statement
    (2) statement -> . expression
    (53) statement -> . expression_stmt
    (54) statement -> . compount_stmt
    (55) statement -> . selection_stmt
    (56) statement -> . iteration_stmt
    (57) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (58) expression_stmt -> . expression SEMICOLON
    (59) expression_stmt -> . SEMICOLON
    (48) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (60) selection_stmt -> . IF LPAREN expression RPAREN statement
    (61) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (62) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (63) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (64) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (65) selection_stmt -> . print_stmt
    (66) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (67) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (68) iteration_stmt -> . print_stmt
    (69) return_stmt -> . RETURN SEMICOLON
    (70) return_stmt -> . RETURN expression SEMICOLON
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (16) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (17) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (18) print_stmt -> . empty
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (106) empty -> .
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 106 (empty -> .)
    ELSE            reduce using rule 106 (empty -> .)
    CLOSE_TAG       reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    FUNCTION        reduce using rule 106 (empty -> .)
    REQUIRE         reduce using rule 106 (empty -> .)
    CLASS           reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 106 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 106 (empty -> .) ]
  ! RETURN          [ reduce using rule 106 (empty -> .) ]
  ! LPAREN          [ reduce using rule 106 (empty -> .) ]
  ! NUMBER          [ reduce using rule 106 (empty -> .) ]
  ! TRUE            [ reduce using rule 106 (empty -> .) ]
  ! FALSE           [ reduce using rule 106 (empty -> .) ]

    var                            shift and go to state 55
    statement                      shift and go to state 157
    expression                     shift and go to state 68
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    additive_expression            shift and go to state 58
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 120

    (63) selection_stmt -> CASE NUMBER COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 158


state 121

    (64) selection_stmt -> DEFAULT COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 159


state 122

    (58) expression_stmt -> expression SEMICOLON .

    BREAK           reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    ELSE            reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    CLOSE_TAG       reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    ID              reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    AMPERSANT       reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    FUNCTION        reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    REQUIRE         reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    CLASS           reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    SWITCH          reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    CASE            reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    DEFAULT         reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    FOR             reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    ECHO            reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    LBLOCK          reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    TRUE            reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    FALSE           reduce using rule 58 (expression_stmt -> expression SEMICOLON .)
    RBLOCK          reduce using rule 58 (expression_stmt -> expression SEMICOLON .)


state 123

    (48) compount_stmt -> LBLOCK print_stmt . local_declarations print_stmt statement_list print_stmt RBLOCK
    (16) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (17) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (49) local_declarations -> . local_declarations var_declaration
    (50) local_declarations -> . empty
    (106) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 26
    ID              reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    LBLOCK          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    SWITCH          reduce using rule 106 (empty -> .)
    CASE            reduce using rule 106 (empty -> .)
    DEFAULT         reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    LPAREN          reduce using rule 106 (empty -> .)
    NUMBER          reduce using rule 106 (empty -> .)
    TRUE            reduce using rule 106 (empty -> .)
    FALSE           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)

  ! ECHO            [ reduce using rule 106 (empty -> .) ]

    local_declarations             shift and go to state 160
    empty                          shift and go to state 161

state 124

    (69) return_stmt -> RETURN SEMICOLON .

    BREAK           reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    CLOSE_TAG       reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    AMPERSANT       reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    REQUIRE         reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    CLASS           reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    CASE            reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    ECHO            reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    LBLOCK          reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    TRUE            reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    FALSE           reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)
    RBLOCK          reduce using rule 69 (return_stmt -> RETURN SEMICOLON .)


state 125

    (70) return_stmt -> RETURN expression . SEMICOLON
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 162
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100


state 126

    (66) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON . expression SEMICOLON additive_expression RPAREN statement
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 163
    additive_expression            shift and go to state 58
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 127

    (67) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (2) statement -> . expression
    (53) statement -> . expression_stmt
    (54) statement -> . compount_stmt
    (55) statement -> . selection_stmt
    (56) statement -> . iteration_stmt
    (57) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (58) expression_stmt -> . expression SEMICOLON
    (59) expression_stmt -> . SEMICOLON
    (48) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (60) selection_stmt -> . IF LPAREN expression RPAREN statement
    (61) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (62) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (63) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (64) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (65) selection_stmt -> . print_stmt
    (66) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (67) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (68) iteration_stmt -> . print_stmt
    (69) return_stmt -> . RETURN SEMICOLON
    (70) return_stmt -> . RETURN expression SEMICOLON
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (16) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (17) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (18) print_stmt -> . empty
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (106) empty -> .
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 106 (empty -> .)
    ELSE            reduce using rule 106 (empty -> .)
    CLOSE_TAG       reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    FUNCTION        reduce using rule 106 (empty -> .)
    REQUIRE         reduce using rule 106 (empty -> .)
    CLASS           reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 106 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 106 (empty -> .) ]
  ! RETURN          [ reduce using rule 106 (empty -> .) ]
  ! LPAREN          [ reduce using rule 106 (empty -> .) ]
  ! NUMBER          [ reduce using rule 106 (empty -> .) ]
  ! TRUE            [ reduce using rule 106 (empty -> .) ]
  ! FALSE           [ reduce using rule 106 (empty -> .) ]

    expression                     shift and go to state 68
    statement                      shift and go to state 164
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    additive_expression            shift and go to state 58
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 128

    (37) var_declaration -> ID EQUAL ID SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    ID              reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    CLASS           reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    IF              reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    SWITCH          reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    CASE            reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    FOR             reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    WHILE           reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    ECHO            reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    RETURN          reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    LPAREN          reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    NUMBER          reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    TRUE            reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    FALSE           reduce using rule 37 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)


state 129

    (33) var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    ID              reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    CLASS           reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    IF              reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    SWITCH          reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    CASE            reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    FOR             reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    WHILE           reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    ECHO            reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    RETURN          reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    LPAREN          reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    NUMBER          reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    TRUE            reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    FALSE           reduce using rule 33 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)


state 130

    (35) var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    ID              reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    CLASS           reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    IF              reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    SWITCH          reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    CASE            reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    FOR             reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    WHILE           reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    ECHO            reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    RETURN          reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    LPAREN          reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    NUMBER          reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    TRUE            reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    FALSE           reduce using rule 35 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)


state 131

    (41) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN . compount_stmt
    (48) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK

    LBLOCK          shift and go to state 74

    compount_stmt                  shift and go to state 165

state 132

    (44) param_list -> param_list COMMA . param
    (46) param -> . ID
    (47) param -> . ID LBRACKET RBRACKET

    ID              shift and go to state 89

    param                          shift and go to state 166

state 133

    (47) param -> ID LBRACKET . RBRACKET

    RBRACKET        shift and go to state 167


state 134

    (19) header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .

    CLOSE_TAG       reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    ID              reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    AMPERSANT       reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    REQUIRE         reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    CLASS           reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    SWITCH          reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    CASE            reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    ECHO            reduce using rule 19 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)


state 135

    (21) class_stmt -> LBLOCK attributes methods . RBLOCK
    (26) methods -> methods . scope fun_declaration
    (28) scope -> . PRIVATE
    (29) scope -> . PUBLIC
    (30) scope -> . PROTECTED

    RBLOCK          shift and go to state 168
    PRIVATE         shift and go to state 94
    PUBLIC          shift and go to state 95
    PROTECTED       shift and go to state 96

    scope                          shift and go to state 169

state 136

    (23) class_stmt -> LBLOCK attributes RBLOCK .

    CLOSE_TAG       reduce using rule 23 (class_stmt -> LBLOCK attributes RBLOCK .)
    ID              reduce using rule 23 (class_stmt -> LBLOCK attributes RBLOCK .)
    AMPERSANT       reduce using rule 23 (class_stmt -> LBLOCK attributes RBLOCK .)
    FUNCTION        reduce using rule 23 (class_stmt -> LBLOCK attributes RBLOCK .)
    REQUIRE         reduce using rule 23 (class_stmt -> LBLOCK attributes RBLOCK .)
    CLASS           reduce using rule 23 (class_stmt -> LBLOCK attributes RBLOCK .)
    IF              reduce using rule 23 (class_stmt -> LBLOCK attributes RBLOCK .)
    SWITCH          reduce using rule 23 (class_stmt -> LBLOCK attributes RBLOCK .)
    CASE            reduce using rule 23 (class_stmt -> LBLOCK attributes RBLOCK .)
    DEFAULT         reduce using rule 23 (class_stmt -> LBLOCK attributes RBLOCK .)
    FOR             reduce using rule 23 (class_stmt -> LBLOCK attributes RBLOCK .)
    WHILE           reduce using rule 23 (class_stmt -> LBLOCK attributes RBLOCK .)
    ECHO            reduce using rule 23 (class_stmt -> LBLOCK attributes RBLOCK .)


state 137

    (24) attributes -> attributes scope . var_declaration
    (27) methods -> scope . fun_declaration
    (31) var_declaration -> . ID SEMICOLON var_declaration
    (32) var_declaration -> . ID SEMICOLON
    (33) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (35) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL boolean SEMICOLON
    (37) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL ID SEMICOLON
    (39) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (40) var_declaration -> . AMPERSANT ID SEMICOLON
    (41) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt

    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13
    FUNCTION        shift and go to state 14

    var_declaration                shift and go to state 170
    fun_declaration                shift and go to state 171

state 138

    (22) class_stmt -> LBLOCK empty RBLOCK .

    CLOSE_TAG       reduce using rule 22 (class_stmt -> LBLOCK empty RBLOCK .)
    ID              reduce using rule 22 (class_stmt -> LBLOCK empty RBLOCK .)
    AMPERSANT       reduce using rule 22 (class_stmt -> LBLOCK empty RBLOCK .)
    FUNCTION        reduce using rule 22 (class_stmt -> LBLOCK empty RBLOCK .)
    REQUIRE         reduce using rule 22 (class_stmt -> LBLOCK empty RBLOCK .)
    CLASS           reduce using rule 22 (class_stmt -> LBLOCK empty RBLOCK .)
    IF              reduce using rule 22 (class_stmt -> LBLOCK empty RBLOCK .)
    SWITCH          reduce using rule 22 (class_stmt -> LBLOCK empty RBLOCK .)
    CASE            reduce using rule 22 (class_stmt -> LBLOCK empty RBLOCK .)
    DEFAULT         reduce using rule 22 (class_stmt -> LBLOCK empty RBLOCK .)
    FOR             reduce using rule 22 (class_stmt -> LBLOCK empty RBLOCK .)
    WHILE           reduce using rule 22 (class_stmt -> LBLOCK empty RBLOCK .)
    ECHO            reduce using rule 22 (class_stmt -> LBLOCK empty RBLOCK .)


state 139

    (25) attributes -> scope var_declaration .

    RBLOCK          reduce using rule 25 (attributes -> scope var_declaration .)
    PRIVATE         reduce using rule 25 (attributes -> scope var_declaration .)
    PUBLIC          reduce using rule 25 (attributes -> scope var_declaration .)
    PROTECTED       reduce using rule 25 (attributes -> scope var_declaration .)


state 140

    (94) factor -> LPAREN expression RPAREN .

    MINUSMINUS      reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    CLOSE_TAG       reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    AMPERSANT       reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    REQUIRE         reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    CLASS           reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    CASE            reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    ECHO            reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    LBLOCK          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    RBLOCK          reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 94 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 94 (factor -> LPAREN expression RPAREN .)


state 141

    (60) selection_stmt -> IF LPAREN expression RPAREN statement .
    (61) selection_stmt -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    CLOSE_TAG       reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 172

  ! ELSE            [ reduce using rule 60 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]


state 142

    (3) expression -> expression PLUS term .
    (5) term -> term . TIMES factor
    (6) term -> term . DIVIDE factor
    (90) term -> term . mulop factor
    (92) mulop -> . TIMES
    (93) mulop -> . DIVIDE

    RPAREN          reduce using rule 3 (expression -> expression PLUS term .)
    PLUS            reduce using rule 3 (expression -> expression PLUS term .)
    MINUS           reduce using rule 3 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 3 (expression -> expression PLUS term .)
    BREAK           reduce using rule 3 (expression -> expression PLUS term .)
    ELSE            reduce using rule 3 (expression -> expression PLUS term .)
    CLOSE_TAG       reduce using rule 3 (expression -> expression PLUS term .)
    ID              reduce using rule 3 (expression -> expression PLUS term .)
    AMPERSANT       reduce using rule 3 (expression -> expression PLUS term .)
    FUNCTION        reduce using rule 3 (expression -> expression PLUS term .)
    REQUIRE         reduce using rule 3 (expression -> expression PLUS term .)
    CLASS           reduce using rule 3 (expression -> expression PLUS term .)
    IF              reduce using rule 3 (expression -> expression PLUS term .)
    SWITCH          reduce using rule 3 (expression -> expression PLUS term .)
    CASE            reduce using rule 3 (expression -> expression PLUS term .)
    DEFAULT         reduce using rule 3 (expression -> expression PLUS term .)
    FOR             reduce using rule 3 (expression -> expression PLUS term .)
    WHILE           reduce using rule 3 (expression -> expression PLUS term .)
    ECHO            reduce using rule 3 (expression -> expression PLUS term .)
    LBLOCK          reduce using rule 3 (expression -> expression PLUS term .)
    RETURN          reduce using rule 3 (expression -> expression PLUS term .)
    LPAREN          reduce using rule 3 (expression -> expression PLUS term .)
    NUMBER          reduce using rule 3 (expression -> expression PLUS term .)
    TRUE            reduce using rule 3 (expression -> expression PLUS term .)
    FALSE           reduce using rule 3 (expression -> expression PLUS term .)
    RBLOCK          reduce using rule 3 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 3 (expression -> expression PLUS term .)
    COMMA           reduce using rule 3 (expression -> expression PLUS term .)
    TIMES           shift and go to state 103
    DIVIDE          shift and go to state 104

    mulop                          shift and go to state 105

state 143

    (95) factor -> var .

    TIMES           reduce using rule 95 (factor -> var .)
    DIVIDE          reduce using rule 95 (factor -> var .)
    RPAREN          reduce using rule 95 (factor -> var .)
    PLUS            reduce using rule 95 (factor -> var .)
    MINUS           reduce using rule 95 (factor -> var .)
    SEMICOLON       reduce using rule 95 (factor -> var .)
    BREAK           reduce using rule 95 (factor -> var .)
    ELSE            reduce using rule 95 (factor -> var .)
    CLOSE_TAG       reduce using rule 95 (factor -> var .)
    ID              reduce using rule 95 (factor -> var .)
    AMPERSANT       reduce using rule 95 (factor -> var .)
    FUNCTION        reduce using rule 95 (factor -> var .)
    REQUIRE         reduce using rule 95 (factor -> var .)
    CLASS           reduce using rule 95 (factor -> var .)
    IF              reduce using rule 95 (factor -> var .)
    SWITCH          reduce using rule 95 (factor -> var .)
    CASE            reduce using rule 95 (factor -> var .)
    DEFAULT         reduce using rule 95 (factor -> var .)
    FOR             reduce using rule 95 (factor -> var .)
    WHILE           reduce using rule 95 (factor -> var .)
    ECHO            reduce using rule 95 (factor -> var .)
    LBLOCK          reduce using rule 95 (factor -> var .)
    RETURN          reduce using rule 95 (factor -> var .)
    LPAREN          reduce using rule 95 (factor -> var .)
    NUMBER          reduce using rule 95 (factor -> var .)
    TRUE            reduce using rule 95 (factor -> var .)
    FALSE           reduce using rule 95 (factor -> var .)
    RBLOCK          reduce using rule 95 (factor -> var .)
    RBRACKET        reduce using rule 95 (factor -> var .)
    COMMA           reduce using rule 95 (factor -> var .)
    MINUSMINUS      reduce using rule 95 (factor -> var .)
    PLUSPLUS        reduce using rule 95 (factor -> var .)
    LESS            reduce using rule 95 (factor -> var .)
    LESSEQUAL       reduce using rule 95 (factor -> var .)
    GREATER         reduce using rule 95 (factor -> var .)
    GREATEREQUAL    reduce using rule 95 (factor -> var .)
    DEQUAL          reduce using rule 95 (factor -> var .)
    ISEQUAL         reduce using rule 95 (factor -> var .)


state 144

    (4) expression -> expression MINUS term .
    (5) term -> term . TIMES factor
    (6) term -> term . DIVIDE factor
    (90) term -> term . mulop factor
    (92) mulop -> . TIMES
    (93) mulop -> . DIVIDE

    RPAREN          reduce using rule 4 (expression -> expression MINUS term .)
    PLUS            reduce using rule 4 (expression -> expression MINUS term .)
    MINUS           reduce using rule 4 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 4 (expression -> expression MINUS term .)
    BREAK           reduce using rule 4 (expression -> expression MINUS term .)
    ELSE            reduce using rule 4 (expression -> expression MINUS term .)
    CLOSE_TAG       reduce using rule 4 (expression -> expression MINUS term .)
    ID              reduce using rule 4 (expression -> expression MINUS term .)
    AMPERSANT       reduce using rule 4 (expression -> expression MINUS term .)
    FUNCTION        reduce using rule 4 (expression -> expression MINUS term .)
    REQUIRE         reduce using rule 4 (expression -> expression MINUS term .)
    CLASS           reduce using rule 4 (expression -> expression MINUS term .)
    IF              reduce using rule 4 (expression -> expression MINUS term .)
    SWITCH          reduce using rule 4 (expression -> expression MINUS term .)
    CASE            reduce using rule 4 (expression -> expression MINUS term .)
    DEFAULT         reduce using rule 4 (expression -> expression MINUS term .)
    FOR             reduce using rule 4 (expression -> expression MINUS term .)
    WHILE           reduce using rule 4 (expression -> expression MINUS term .)
    ECHO            reduce using rule 4 (expression -> expression MINUS term .)
    LBLOCK          reduce using rule 4 (expression -> expression MINUS term .)
    RETURN          reduce using rule 4 (expression -> expression MINUS term .)
    LPAREN          reduce using rule 4 (expression -> expression MINUS term .)
    NUMBER          reduce using rule 4 (expression -> expression MINUS term .)
    TRUE            reduce using rule 4 (expression -> expression MINUS term .)
    FALSE           reduce using rule 4 (expression -> expression MINUS term .)
    RBLOCK          reduce using rule 4 (expression -> expression MINUS term .)
    RBRACKET        reduce using rule 4 (expression -> expression MINUS term .)
    COMMA           reduce using rule 4 (expression -> expression MINUS term .)
    TIMES           shift and go to state 103
    DIVIDE          shift and go to state 104

    mulop                          shift and go to state 105

state 145

    (5) term -> term TIMES factor .

    MINUSMINUS      reduce using rule 5 (term -> term TIMES factor .)
    PLUSPLUS        reduce using rule 5 (term -> term TIMES factor .)
    TIMES           reduce using rule 5 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 5 (term -> term TIMES factor .)
    LESS            reduce using rule 5 (term -> term TIMES factor .)
    LESSEQUAL       reduce using rule 5 (term -> term TIMES factor .)
    GREATER         reduce using rule 5 (term -> term TIMES factor .)
    GREATEREQUAL    reduce using rule 5 (term -> term TIMES factor .)
    DEQUAL          reduce using rule 5 (term -> term TIMES factor .)
    ISEQUAL         reduce using rule 5 (term -> term TIMES factor .)
    PLUS            reduce using rule 5 (term -> term TIMES factor .)
    MINUS           reduce using rule 5 (term -> term TIMES factor .)
    RPAREN          reduce using rule 5 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 5 (term -> term TIMES factor .)
    BREAK           reduce using rule 5 (term -> term TIMES factor .)
    ELSE            reduce using rule 5 (term -> term TIMES factor .)
    CLOSE_TAG       reduce using rule 5 (term -> term TIMES factor .)
    ID              reduce using rule 5 (term -> term TIMES factor .)
    AMPERSANT       reduce using rule 5 (term -> term TIMES factor .)
    FUNCTION        reduce using rule 5 (term -> term TIMES factor .)
    REQUIRE         reduce using rule 5 (term -> term TIMES factor .)
    CLASS           reduce using rule 5 (term -> term TIMES factor .)
    IF              reduce using rule 5 (term -> term TIMES factor .)
    SWITCH          reduce using rule 5 (term -> term TIMES factor .)
    CASE            reduce using rule 5 (term -> term TIMES factor .)
    DEFAULT         reduce using rule 5 (term -> term TIMES factor .)
    FOR             reduce using rule 5 (term -> term TIMES factor .)
    WHILE           reduce using rule 5 (term -> term TIMES factor .)
    ECHO            reduce using rule 5 (term -> term TIMES factor .)
    LBLOCK          reduce using rule 5 (term -> term TIMES factor .)
    RETURN          reduce using rule 5 (term -> term TIMES factor .)
    LPAREN          reduce using rule 5 (term -> term TIMES factor .)
    NUMBER          reduce using rule 5 (term -> term TIMES factor .)
    TRUE            reduce using rule 5 (term -> term TIMES factor .)
    FALSE           reduce using rule 5 (term -> term TIMES factor .)
    RBLOCK          reduce using rule 5 (term -> term TIMES factor .)
    RBRACKET        reduce using rule 5 (term -> term TIMES factor .)
    COMMA           reduce using rule 5 (term -> term TIMES factor .)


state 146

    (6) term -> term DIVIDE factor .

    MINUSMINUS      reduce using rule 6 (term -> term DIVIDE factor .)
    PLUSPLUS        reduce using rule 6 (term -> term DIVIDE factor .)
    TIMES           reduce using rule 6 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 6 (term -> term DIVIDE factor .)
    LESS            reduce using rule 6 (term -> term DIVIDE factor .)
    LESSEQUAL       reduce using rule 6 (term -> term DIVIDE factor .)
    GREATER         reduce using rule 6 (term -> term DIVIDE factor .)
    GREATEREQUAL    reduce using rule 6 (term -> term DIVIDE factor .)
    DEQUAL          reduce using rule 6 (term -> term DIVIDE factor .)
    ISEQUAL         reduce using rule 6 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 6 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 6 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 6 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 6 (term -> term DIVIDE factor .)
    BREAK           reduce using rule 6 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 6 (term -> term DIVIDE factor .)
    CLOSE_TAG       reduce using rule 6 (term -> term DIVIDE factor .)
    ID              reduce using rule 6 (term -> term DIVIDE factor .)
    AMPERSANT       reduce using rule 6 (term -> term DIVIDE factor .)
    FUNCTION        reduce using rule 6 (term -> term DIVIDE factor .)
    REQUIRE         reduce using rule 6 (term -> term DIVIDE factor .)
    CLASS           reduce using rule 6 (term -> term DIVIDE factor .)
    IF              reduce using rule 6 (term -> term DIVIDE factor .)
    SWITCH          reduce using rule 6 (term -> term DIVIDE factor .)
    CASE            reduce using rule 6 (term -> term DIVIDE factor .)
    DEFAULT         reduce using rule 6 (term -> term DIVIDE factor .)
    FOR             reduce using rule 6 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 6 (term -> term DIVIDE factor .)
    ECHO            reduce using rule 6 (term -> term DIVIDE factor .)
    LBLOCK          reduce using rule 6 (term -> term DIVIDE factor .)
    RETURN          reduce using rule 6 (term -> term DIVIDE factor .)
    LPAREN          reduce using rule 6 (term -> term DIVIDE factor .)
    NUMBER          reduce using rule 6 (term -> term DIVIDE factor .)
    TRUE            reduce using rule 6 (term -> term DIVIDE factor .)
    FALSE           reduce using rule 6 (term -> term DIVIDE factor .)
    RBLOCK          reduce using rule 6 (term -> term DIVIDE factor .)
    RBRACKET        reduce using rule 6 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 6 (term -> term DIVIDE factor .)


state 147

    (90) term -> term mulop factor .

    MINUSMINUS      reduce using rule 90 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 90 (term -> term mulop factor .)
    TIMES           reduce using rule 90 (term -> term mulop factor .)
    DIVIDE          reduce using rule 90 (term -> term mulop factor .)
    LESS            reduce using rule 90 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 90 (term -> term mulop factor .)
    GREATER         reduce using rule 90 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 90 (term -> term mulop factor .)
    DEQUAL          reduce using rule 90 (term -> term mulop factor .)
    ISEQUAL         reduce using rule 90 (term -> term mulop factor .)
    PLUS            reduce using rule 90 (term -> term mulop factor .)
    MINUS           reduce using rule 90 (term -> term mulop factor .)
    RPAREN          reduce using rule 90 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 90 (term -> term mulop factor .)
    BREAK           reduce using rule 90 (term -> term mulop factor .)
    ELSE            reduce using rule 90 (term -> term mulop factor .)
    CLOSE_TAG       reduce using rule 90 (term -> term mulop factor .)
    ID              reduce using rule 90 (term -> term mulop factor .)
    AMPERSANT       reduce using rule 90 (term -> term mulop factor .)
    FUNCTION        reduce using rule 90 (term -> term mulop factor .)
    REQUIRE         reduce using rule 90 (term -> term mulop factor .)
    CLASS           reduce using rule 90 (term -> term mulop factor .)
    IF              reduce using rule 90 (term -> term mulop factor .)
    SWITCH          reduce using rule 90 (term -> term mulop factor .)
    CASE            reduce using rule 90 (term -> term mulop factor .)
    DEFAULT         reduce using rule 90 (term -> term mulop factor .)
    FOR             reduce using rule 90 (term -> term mulop factor .)
    WHILE           reduce using rule 90 (term -> term mulop factor .)
    ECHO            reduce using rule 90 (term -> term mulop factor .)
    LBLOCK          reduce using rule 90 (term -> term mulop factor .)
    RETURN          reduce using rule 90 (term -> term mulop factor .)
    LPAREN          reduce using rule 90 (term -> term mulop factor .)
    NUMBER          reduce using rule 90 (term -> term mulop factor .)
    TRUE            reduce using rule 90 (term -> term mulop factor .)
    FALSE           reduce using rule 90 (term -> term mulop factor .)
    RBLOCK          reduce using rule 90 (term -> term mulop factor .)
    RBRACKET        reduce using rule 90 (term -> term mulop factor .)
    COMMA           reduce using rule 90 (term -> term mulop factor .)


state 148

    (71) expression -> var EQUAL expression .
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          reduce using rule 71 (expression -> var EQUAL expression .)
    SEMICOLON       reduce using rule 71 (expression -> var EQUAL expression .)
    BREAK           reduce using rule 71 (expression -> var EQUAL expression .)
    ELSE            reduce using rule 71 (expression -> var EQUAL expression .)
    CLOSE_TAG       reduce using rule 71 (expression -> var EQUAL expression .)
    ID              reduce using rule 71 (expression -> var EQUAL expression .)
    AMPERSANT       reduce using rule 71 (expression -> var EQUAL expression .)
    FUNCTION        reduce using rule 71 (expression -> var EQUAL expression .)
    REQUIRE         reduce using rule 71 (expression -> var EQUAL expression .)
    CLASS           reduce using rule 71 (expression -> var EQUAL expression .)
    IF              reduce using rule 71 (expression -> var EQUAL expression .)
    SWITCH          reduce using rule 71 (expression -> var EQUAL expression .)
    CASE            reduce using rule 71 (expression -> var EQUAL expression .)
    DEFAULT         reduce using rule 71 (expression -> var EQUAL expression .)
    FOR             reduce using rule 71 (expression -> var EQUAL expression .)
    WHILE           reduce using rule 71 (expression -> var EQUAL expression .)
    ECHO            reduce using rule 71 (expression -> var EQUAL expression .)
    LBLOCK          reduce using rule 71 (expression -> var EQUAL expression .)
    RETURN          reduce using rule 71 (expression -> var EQUAL expression .)
    LPAREN          reduce using rule 71 (expression -> var EQUAL expression .)
    NUMBER          reduce using rule 71 (expression -> var EQUAL expression .)
    TRUE            reduce using rule 71 (expression -> var EQUAL expression .)
    FALSE           reduce using rule 71 (expression -> var EQUAL expression .)
    RBLOCK          reduce using rule 71 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 71 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 71 (expression -> var EQUAL expression .)
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100

  ! PLUS            [ reduce using rule 71 (expression -> var EQUAL expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> var EQUAL expression .) ]


state 149

    (73) expression -> var EQUAL AMPERSANT . ID

    ID              shift and go to state 173


state 150

    (75) var -> ID LBRACKET expression . RBRACKET
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    RBRACKET        shift and go to state 174
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100


state 151

    (99) call -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 175


state 152

    (100) args -> args_list .
    (102) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 100 (args -> args_list .)
    COMMA           shift and go to state 176


state 153

    (101) args -> empty .

    RPAREN          reduce using rule 101 (args -> empty .)


state 154

    (103) args_list -> expression .
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    COMMA           reduce using rule 103 (args_list -> expression .)
    RPAREN          reduce using rule 103 (args_list -> expression .)
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100


state 155

    (76) simple_expression -> additive_expression relop additive_expression .
    (84) additive_expression -> additive_expression . addop term
    (88) addop -> . PLUS
    (89) addop -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    SEMICOLON       reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    BREAK           reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    ELSE            reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    CLOSE_TAG       reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    ID              reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    AMPERSANT       reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    FUNCTION        reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    REQUIRE         reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    CLASS           reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    IF              reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    SWITCH          reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    CASE            reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    DEFAULT         reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    FOR             reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    WHILE           reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    ECHO            reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    LBLOCK          reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    RETURN          reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    LPAREN          reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    NUMBER          reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    TRUE            reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    FALSE           reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    RBLOCK          reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 117
    MINUS           shift and go to state 118

  ! PLUS            [ reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .) ]
  ! MINUS           [ reduce using rule 76 (simple_expression -> additive_expression relop additive_expression .) ]

    addop                          shift and go to state 110

state 156

    (84) additive_expression -> additive_expression addop term .
    (5) term -> term . TIMES factor
    (6) term -> term . DIVIDE factor
    (90) term -> term . mulop factor
    (92) mulop -> . TIMES
    (93) mulop -> . DIVIDE

    LESS            reduce using rule 84 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 84 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 84 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 84 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 84 (additive_expression -> additive_expression addop term .)
    ISEQUAL         reduce using rule 84 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 84 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 84 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 84 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 84 (additive_expression -> additive_expression addop term .)
    BREAK           reduce using rule 84 (additive_expression -> additive_expression addop term .)
    ELSE            reduce using rule 84 (additive_expression -> additive_expression addop term .)
    CLOSE_TAG       reduce using rule 84 (additive_expression -> additive_expression addop term .)
    ID              reduce using rule 84 (additive_expression -> additive_expression addop term .)
    AMPERSANT       reduce using rule 84 (additive_expression -> additive_expression addop term .)
    FUNCTION        reduce using rule 84 (additive_expression -> additive_expression addop term .)
    REQUIRE         reduce using rule 84 (additive_expression -> additive_expression addop term .)
    CLASS           reduce using rule 84 (additive_expression -> additive_expression addop term .)
    IF              reduce using rule 84 (additive_expression -> additive_expression addop term .)
    SWITCH          reduce using rule 84 (additive_expression -> additive_expression addop term .)
    CASE            reduce using rule 84 (additive_expression -> additive_expression addop term .)
    DEFAULT         reduce using rule 84 (additive_expression -> additive_expression addop term .)
    FOR             reduce using rule 84 (additive_expression -> additive_expression addop term .)
    WHILE           reduce using rule 84 (additive_expression -> additive_expression addop term .)
    ECHO            reduce using rule 84 (additive_expression -> additive_expression addop term .)
    LBLOCK          reduce using rule 84 (additive_expression -> additive_expression addop term .)
    RETURN          reduce using rule 84 (additive_expression -> additive_expression addop term .)
    LPAREN          reduce using rule 84 (additive_expression -> additive_expression addop term .)
    NUMBER          reduce using rule 84 (additive_expression -> additive_expression addop term .)
    TRUE            reduce using rule 84 (additive_expression -> additive_expression addop term .)
    FALSE           reduce using rule 84 (additive_expression -> additive_expression addop term .)
    RBLOCK          reduce using rule 84 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 84 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 84 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 103
    DIVIDE          shift and go to state 104

    mulop                          shift and go to state 105

state 157

    (62) selection_stmt -> SWITCH LPAREN var RPAREN statement .

    CLOSE_TAG       reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ID              reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    AMPERSANT       reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FUNCTION        reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    REQUIRE         reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CLASS           reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IF              reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SWITCH          reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CASE            reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DEFAULT         reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FOR             reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    WHILE           reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ECHO            reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    BREAK           reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSE            reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SEMICOLON       reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LBLOCK          reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RETURN          reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LPAREN          reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    NUMBER          reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TRUE            reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FALSE           reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RBLOCK          reduce using rule 62 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)


state 158

    (63) selection_stmt -> CASE NUMBER COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 177


state 159

    (64) selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .

    CLOSE_TAG       reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    AMPERSANT       reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    REQUIRE         reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CLASS           reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    TRUE            reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FALSE           reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 64 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)


state 160

    (48) compount_stmt -> LBLOCK print_stmt local_declarations . print_stmt statement_list print_stmt RBLOCK
    (49) local_declarations -> local_declarations . var_declaration
    (16) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (17) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (18) print_stmt -> . empty
    (31) var_declaration -> . ID SEMICOLON var_declaration
    (32) var_declaration -> . ID SEMICOLON
    (33) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (34) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (35) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (36) var_declaration -> . ID EQUAL boolean SEMICOLON
    (37) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (38) var_declaration -> . ID EQUAL ID SEMICOLON
    (39) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (40) var_declaration -> . AMPERSANT ID SEMICOLON
    (106) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13
    ECHO            reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    LBLOCK          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    SWITCH          reduce using rule 106 (empty -> .)
    CASE            reduce using rule 106 (empty -> .)
    DEFAULT         reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    LPAREN          reduce using rule 106 (empty -> .)
    NUMBER          reduce using rule 106 (empty -> .)
    TRUE            reduce using rule 106 (empty -> .)
    FALSE           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)

  ! ID              [ reduce using rule 106 (empty -> .) ]

    print_stmt                     shift and go to state 178
    var_declaration                shift and go to state 179
    empty                          shift and go to state 17

state 161

    (50) local_declarations -> empty .

    ID              reduce using rule 50 (local_declarations -> empty .)
    AMPERSANT       reduce using rule 50 (local_declarations -> empty .)
    ECHO            reduce using rule 50 (local_declarations -> empty .)
    SEMICOLON       reduce using rule 50 (local_declarations -> empty .)
    LBLOCK          reduce using rule 50 (local_declarations -> empty .)
    IF              reduce using rule 50 (local_declarations -> empty .)
    SWITCH          reduce using rule 50 (local_declarations -> empty .)
    CASE            reduce using rule 50 (local_declarations -> empty .)
    DEFAULT         reduce using rule 50 (local_declarations -> empty .)
    FOR             reduce using rule 50 (local_declarations -> empty .)
    WHILE           reduce using rule 50 (local_declarations -> empty .)
    RETURN          reduce using rule 50 (local_declarations -> empty .)
    LPAREN          reduce using rule 50 (local_declarations -> empty .)
    NUMBER          reduce using rule 50 (local_declarations -> empty .)
    TRUE            reduce using rule 50 (local_declarations -> empty .)
    FALSE           reduce using rule 50 (local_declarations -> empty .)
    RBLOCK          reduce using rule 50 (local_declarations -> empty .)


state 162

    (70) return_stmt -> RETURN expression SEMICOLON .

    BREAK           reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    CLOSE_TAG       reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    AMPERSANT       reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    REQUIRE         reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    ECHO            reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    LBLOCK          reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)
    RBLOCK          reduce using rule 70 (return_stmt -> RETURN expression SEMICOLON .)


state 163

    (66) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression . SEMICOLON additive_expression RPAREN statement
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 180
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100


state 164

    (67) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    CLOSE_TAG       reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 67 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 165

    (41) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .

    CLOSE_TAG       reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    ID              reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    AMPERSANT       reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    FUNCTION        reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    REQUIRE         reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    CLASS           reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    IF              reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    SWITCH          reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    CASE            reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    DEFAULT         reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    FOR             reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    WHILE           reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    ECHO            reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    RBLOCK          reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    PRIVATE         reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    PUBLIC          reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    PROTECTED       reduce using rule 41 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)


state 166

    (44) param_list -> param_list COMMA param .

    COMMA           reduce using rule 44 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 44 (param_list -> param_list COMMA param .)


state 167

    (47) param -> ID LBRACKET RBRACKET .

    COMMA           reduce using rule 47 (param -> ID LBRACKET RBRACKET .)
    RPAREN          reduce using rule 47 (param -> ID LBRACKET RBRACKET .)


state 168

    (21) class_stmt -> LBLOCK attributes methods RBLOCK .

    CLOSE_TAG       reduce using rule 21 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    ID              reduce using rule 21 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    AMPERSANT       reduce using rule 21 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    FUNCTION        reduce using rule 21 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    REQUIRE         reduce using rule 21 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    CLASS           reduce using rule 21 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    IF              reduce using rule 21 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    SWITCH          reduce using rule 21 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    CASE            reduce using rule 21 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    DEFAULT         reduce using rule 21 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    FOR             reduce using rule 21 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    WHILE           reduce using rule 21 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    ECHO            reduce using rule 21 (class_stmt -> LBLOCK attributes methods RBLOCK .)


state 169

    (26) methods -> methods scope . fun_declaration
    (41) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt

    FUNCTION        shift and go to state 14

    fun_declaration                shift and go to state 181

state 170

    (24) attributes -> attributes scope var_declaration .

    RBLOCK          reduce using rule 24 (attributes -> attributes scope var_declaration .)
    PRIVATE         reduce using rule 24 (attributes -> attributes scope var_declaration .)
    PUBLIC          reduce using rule 24 (attributes -> attributes scope var_declaration .)
    PROTECTED       reduce using rule 24 (attributes -> attributes scope var_declaration .)


state 171

    (27) methods -> scope fun_declaration .

    RBLOCK          reduce using rule 27 (methods -> scope fun_declaration .)
    PRIVATE         reduce using rule 27 (methods -> scope fun_declaration .)
    PUBLIC          reduce using rule 27 (methods -> scope fun_declaration .)
    PROTECTED       reduce using rule 27 (methods -> scope fun_declaration .)


state 172

    (61) selection_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (2) statement -> . expression
    (53) statement -> . expression_stmt
    (54) statement -> . compount_stmt
    (55) statement -> . selection_stmt
    (56) statement -> . iteration_stmt
    (57) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (58) expression_stmt -> . expression SEMICOLON
    (59) expression_stmt -> . SEMICOLON
    (48) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (60) selection_stmt -> . IF LPAREN expression RPAREN statement
    (61) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (62) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (63) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (64) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (65) selection_stmt -> . print_stmt
    (66) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (67) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (68) iteration_stmt -> . print_stmt
    (69) return_stmt -> . RETURN SEMICOLON
    (70) return_stmt -> . RETURN expression SEMICOLON
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (16) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (17) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (18) print_stmt -> . empty
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (106) empty -> .
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 106 (empty -> .)
    ELSE            reduce using rule 106 (empty -> .)
    CLOSE_TAG       reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    FUNCTION        reduce using rule 106 (empty -> .)
    REQUIRE         reduce using rule 106 (empty -> .)
    CLASS           reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 106 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 106 (empty -> .) ]
  ! RETURN          [ reduce using rule 106 (empty -> .) ]
  ! LPAREN          [ reduce using rule 106 (empty -> .) ]
  ! NUMBER          [ reduce using rule 106 (empty -> .) ]
  ! TRUE            [ reduce using rule 106 (empty -> .) ]
  ! FALSE           [ reduce using rule 106 (empty -> .) ]

    expression                     shift and go to state 68
    statement                      shift and go to state 182
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    additive_expression            shift and go to state 58
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 173

    (73) expression -> var EQUAL AMPERSANT ID .

    RPAREN          reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    PLUS            reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    MINUS           reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    SEMICOLON       reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    BREAK           reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    ELSE            reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    CLOSE_TAG       reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    ID              reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    AMPERSANT       reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    FUNCTION        reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    REQUIRE         reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    CLASS           reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    IF              reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    SWITCH          reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    CASE            reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    DEFAULT         reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    FOR             reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    WHILE           reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    ECHO            reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    LBLOCK          reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    RETURN          reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    LPAREN          reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    NUMBER          reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    TRUE            reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    FALSE           reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    RBLOCK          reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    RBRACKET        reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)
    COMMA           reduce using rule 73 (expression -> var EQUAL AMPERSANT ID .)


state 174

    (75) var -> ID LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    ISEQUAL         reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    BREAK           reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    CLOSE_TAG       reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    ID              reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    AMPERSANT       reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    FUNCTION        reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    REQUIRE         reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    CLASS           reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    IF              reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    SWITCH          reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    CASE            reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    DEFAULT         reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    FOR             reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    ECHO            reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    LBLOCK          reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    RBLOCK          reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 75 (var -> ID LBRACKET expression RBRACKET .)


state 175

    (99) call -> ID LPAREN args RPAREN .

    MINUSMINUS      reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    PLUSPLUS        reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    TIMES           reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    LESS            reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    GREATER         reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    DEQUAL          reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    ISEQUAL         reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    BREAK           reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    ELSE            reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    CLOSE_TAG       reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    ID              reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    AMPERSANT       reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    FUNCTION        reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    REQUIRE         reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    CLASS           reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    IF              reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    SWITCH          reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    CASE            reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    DEFAULT         reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    FOR             reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    WHILE           reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    ECHO            reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    LBLOCK          reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    RETURN          reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    LPAREN          reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    NUMBER          reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    TRUE            reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    FALSE           reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    RBLOCK          reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 99 (call -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 99 (call -> ID LPAREN args RPAREN .)


state 176

    (102) args_list -> args_list COMMA . expression
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 183
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 177

    (63) selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .

    CLOSE_TAG       reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    AMPERSANT       reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    REQUIRE         reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CLASS           reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    TRUE            reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FALSE           reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 63 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)


state 178

    (48) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt . statement_list print_stmt RBLOCK
    (16) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (17) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (51) statement_list -> . statement_list statement
    (52) statement_list -> . empty
    (106) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 26
    SEMICOLON       reduce using rule 106 (empty -> .)
    LBLOCK          reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    SWITCH          reduce using rule 106 (empty -> .)
    CASE            reduce using rule 106 (empty -> .)
    DEFAULT         reduce using rule 106 (empty -> .)
    FOR             reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    LPAREN          reduce using rule 106 (empty -> .)
    NUMBER          reduce using rule 106 (empty -> .)
    TRUE            reduce using rule 106 (empty -> .)
    FALSE           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)

  ! ECHO            [ reduce using rule 106 (empty -> .) ]

    statement_list                 shift and go to state 184
    empty                          shift and go to state 185

state 179

    (49) local_declarations -> local_declarations var_declaration .

    ID              reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    AMPERSANT       reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    ECHO            reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    SEMICOLON       reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    LBLOCK          reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    SWITCH          reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    CASE            reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    DEFAULT         reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    NUMBER          reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    TRUE            reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    FALSE           reduce using rule 49 (local_declarations -> local_declarations var_declaration .)
    RBLOCK          reduce using rule 49 (local_declarations -> local_declarations var_declaration .)


state 180

    (66) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON . additive_expression RPAREN statement
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    additive_expression            shift and go to state 186
    term                           shift and go to state 54
    factor                         shift and go to state 59
    var                            shift and go to state 143
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 181

    (26) methods -> methods scope fun_declaration .

    RBLOCK          reduce using rule 26 (methods -> methods scope fun_declaration .)
    PRIVATE         reduce using rule 26 (methods -> methods scope fun_declaration .)
    PUBLIC          reduce using rule 26 (methods -> methods scope fun_declaration .)
    PROTECTED       reduce using rule 26 (methods -> methods scope fun_declaration .)


state 182

    (61) selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    CLOSE_TAG       reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    AMPERSANT       reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNCTION        reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    REQUIRE         reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ECHO            reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBLOCK          reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBLOCK          reduce using rule 61 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)


state 183

    (102) args_list -> args_list COMMA expression .
    (3) expression -> expression . PLUS term
    (4) expression -> expression . MINUS term

    COMMA           reduce using rule 102 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 102 (args_list -> args_list COMMA expression .)
    PLUS            shift and go to state 99
    MINUS           shift and go to state 100


state 184

    (48) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list . print_stmt RBLOCK
    (51) statement_list -> statement_list . statement
    (16) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (17) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (18) print_stmt -> . empty
    (2) statement -> . expression
    (53) statement -> . expression_stmt
    (54) statement -> . compount_stmt
    (55) statement -> . selection_stmt
    (56) statement -> . iteration_stmt
    (57) statement -> . return_stmt
    (106) empty -> .
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (58) expression_stmt -> . expression SEMICOLON
    (59) expression_stmt -> . SEMICOLON
    (48) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (60) selection_stmt -> . IF LPAREN expression RPAREN statement
    (61) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (62) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (63) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (64) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (65) selection_stmt -> . print_stmt
    (66) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (67) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (68) iteration_stmt -> . print_stmt
    (69) return_stmt -> . RETURN SEMICOLON
    (70) return_stmt -> . RETURN expression SEMICOLON
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBLOCK          reduce using rule 106 (empty -> .)
    ECHO            reduce using rule 106 (empty -> .)
    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! SEMICOLON       [ reduce using rule 106 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 106 (empty -> .) ]
  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! RETURN          [ reduce using rule 106 (empty -> .) ]
  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! LPAREN          [ reduce using rule 106 (empty -> .) ]
  ! NUMBER          [ reduce using rule 106 (empty -> .) ]
  ! TRUE            [ reduce using rule 106 (empty -> .) ]
  ! FALSE           [ reduce using rule 106 (empty -> .) ]

    print_stmt                     shift and go to state 187
    statement                      shift and go to state 188
    empty                          shift and go to state 17
    expression                     shift and go to state 68
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 185

    (52) statement_list -> empty .

    SEMICOLON       reduce using rule 52 (statement_list -> empty .)
    LBLOCK          reduce using rule 52 (statement_list -> empty .)
    IF              reduce using rule 52 (statement_list -> empty .)
    SWITCH          reduce using rule 52 (statement_list -> empty .)
    CASE            reduce using rule 52 (statement_list -> empty .)
    DEFAULT         reduce using rule 52 (statement_list -> empty .)
    FOR             reduce using rule 52 (statement_list -> empty .)
    WHILE           reduce using rule 52 (statement_list -> empty .)
    RETURN          reduce using rule 52 (statement_list -> empty .)
    ID              reduce using rule 52 (statement_list -> empty .)
    LPAREN          reduce using rule 52 (statement_list -> empty .)
    NUMBER          reduce using rule 52 (statement_list -> empty .)
    TRUE            reduce using rule 52 (statement_list -> empty .)
    FALSE           reduce using rule 52 (statement_list -> empty .)
    RBLOCK          reduce using rule 52 (statement_list -> empty .)
    ECHO            reduce using rule 52 (statement_list -> empty .)


state 186

    (66) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression . RPAREN statement
    (84) additive_expression -> additive_expression . addop term
    (88) addop -> . PLUS
    (89) addop -> . MINUS

    RPAREN          shift and go to state 189
    PLUS            shift and go to state 117
    MINUS           shift and go to state 118

    addop                          shift and go to state 110

state 187

    (48) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt . RBLOCK
    (16) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (17) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (65) selection_stmt -> print_stmt .
    (68) iteration_stmt -> print_stmt .

  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LBLOCK resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for RETURN resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LPAREN resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for NUMBER resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for TRUE resolved using rule 65 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FALSE resolved using rule 65 (selection_stmt -> print_stmt .)
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
    RBLOCK          shift and go to state 190
    ECHO            shift and go to state 26
    SEMICOLON       reduce using rule 65 (selection_stmt -> print_stmt .)
    LBLOCK          reduce using rule 65 (selection_stmt -> print_stmt .)
    IF              reduce using rule 65 (selection_stmt -> print_stmt .)
    SWITCH          reduce using rule 65 (selection_stmt -> print_stmt .)
    CASE            reduce using rule 65 (selection_stmt -> print_stmt .)
    DEFAULT         reduce using rule 65 (selection_stmt -> print_stmt .)
    FOR             reduce using rule 65 (selection_stmt -> print_stmt .)
    WHILE           reduce using rule 65 (selection_stmt -> print_stmt .)
    RETURN          reduce using rule 65 (selection_stmt -> print_stmt .)
    ID              reduce using rule 65 (selection_stmt -> print_stmt .)
    LPAREN          reduce using rule 65 (selection_stmt -> print_stmt .)
    NUMBER          reduce using rule 65 (selection_stmt -> print_stmt .)
    TRUE            reduce using rule 65 (selection_stmt -> print_stmt .)
    FALSE           reduce using rule 65 (selection_stmt -> print_stmt .)

  ! RBLOCK          [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 65 (selection_stmt -> print_stmt .) ]
  ! SEMICOLON       [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! LBLOCK          [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! RETURN          [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! LPAREN          [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! NUMBER          [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! TRUE            [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! FALSE           [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! RBLOCK          [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 68 (iteration_stmt -> print_stmt .) ]


state 188

    (51) statement_list -> statement_list statement .

    SEMICOLON       reduce using rule 51 (statement_list -> statement_list statement .)
    LBLOCK          reduce using rule 51 (statement_list -> statement_list statement .)
    IF              reduce using rule 51 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 51 (statement_list -> statement_list statement .)
    CASE            reduce using rule 51 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 51 (statement_list -> statement_list statement .)
    FOR             reduce using rule 51 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 51 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 51 (statement_list -> statement_list statement .)
    ID              reduce using rule 51 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 51 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 51 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 51 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 51 (statement_list -> statement_list statement .)
    RBLOCK          reduce using rule 51 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 51 (statement_list -> statement_list statement .)


state 189

    (66) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN . statement
    (2) statement -> . expression
    (53) statement -> . expression_stmt
    (54) statement -> . compount_stmt
    (55) statement -> . selection_stmt
    (56) statement -> . iteration_stmt
    (57) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (4) expression -> . expression MINUS term
    (71) expression -> . var EQUAL expression
    (72) expression -> . simple_expression
    (73) expression -> . var EQUAL AMPERSANT ID
    (58) expression_stmt -> . expression SEMICOLON
    (59) expression_stmt -> . SEMICOLON
    (48) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (60) selection_stmt -> . IF LPAREN expression RPAREN statement
    (61) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (62) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (63) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (64) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (65) selection_stmt -> . print_stmt
    (66) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (67) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (68) iteration_stmt -> . print_stmt
    (69) return_stmt -> . RETURN SEMICOLON
    (70) return_stmt -> . RETURN expression SEMICOLON
    (74) var -> . ID
    (75) var -> . ID LBRACKET expression RBRACKET
    (76) simple_expression -> . additive_expression relop additive_expression
    (77) simple_expression -> . additive_expression
    (16) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (17) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (18) print_stmt -> . empty
    (84) additive_expression -> . additive_expression addop term
    (85) additive_expression -> . term
    (86) additive_expression -> . term MINUSMINUS
    (87) additive_expression -> . term PLUSPLUS
    (106) empty -> .
    (5) term -> . term TIMES factor
    (6) term -> . term DIVIDE factor
    (90) term -> . term mulop factor
    (91) term -> . factor
    (94) factor -> . LPAREN expression RPAREN
    (95) factor -> . var
    (96) factor -> . call
    (97) factor -> . NUMBER
    (98) factor -> . boolean
    (99) call -> . ID LPAREN args RPAREN
    (104) boolean -> . TRUE
    (105) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 106 (empty -> .)
    ELSE            reduce using rule 106 (empty -> .)
    CLOSE_TAG       reduce using rule 106 (empty -> .)
    AMPERSANT       reduce using rule 106 (empty -> .)
    FUNCTION        reduce using rule 106 (empty -> .)
    REQUIRE         reduce using rule 106 (empty -> .)
    CLASS           reduce using rule 106 (empty -> .)
    BREAK           reduce using rule 106 (empty -> .)
    RBLOCK          reduce using rule 106 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! SWITCH          [ reduce using rule 106 (empty -> .) ]
  ! CASE            [ reduce using rule 106 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 106 (empty -> .) ]
  ! FOR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 106 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 106 (empty -> .) ]
  ! RETURN          [ reduce using rule 106 (empty -> .) ]
  ! LPAREN          [ reduce using rule 106 (empty -> .) ]
  ! NUMBER          [ reduce using rule 106 (empty -> .) ]
  ! TRUE            [ reduce using rule 106 (empty -> .) ]
  ! FALSE           [ reduce using rule 106 (empty -> .) ]

    expression                     shift and go to state 68
    additive_expression            shift and go to state 58
    statement                      shift and go to state 191
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 190

    (48) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .

    BREAK           reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    ELSE            reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    CLOSE_TAG       reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    ID              reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    AMPERSANT       reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    FUNCTION        reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    REQUIRE         reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    CLASS           reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    IF              reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    SWITCH          reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    CASE            reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    DEFAULT         reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    FOR             reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    WHILE           reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    ECHO            reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    SEMICOLON       reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    LBLOCK          reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    RETURN          reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    LPAREN          reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    NUMBER          reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    TRUE            reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    FALSE           reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    RBLOCK          reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    PRIVATE         reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    PUBLIC          reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    PROTECTED       reduce using rule 48 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)


state 191

    (66) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .

    CLOSE_TAG       reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ID              reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    AMPERSANT       reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FUNCTION        reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    REQUIRE         reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CLASS           reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    IF              reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SWITCH          reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CASE            reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    DEFAULT         reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FOR             reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    WHILE           reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ECHO            reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    BREAK           reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ELSE            reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SEMICOLON       reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LBLOCK          reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RETURN          reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LPAREN          reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    NUMBER          reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    TRUE            reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FALSE           reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RBLOCK          reduce using rule 66 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for CASE in state 2 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 3 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 3 resolved as shift
WARNING: shift/reduce conflict for CASE in state 3 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 9 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 9 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 9 resolved as shift
WARNING: shift/reduce conflict for ID in state 27 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 27 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 47 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 68 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 83 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 83 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 98 resolved as shift
WARNING: shift/reduce conflict for CASE in state 98 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 98 resolved as shift
WARNING: shift/reduce conflict for FOR in state 98 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 98 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 98 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 98 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 98 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 98 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 98 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 98 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 98 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 103 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 103 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 103 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 103 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 104 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 104 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for IF in state 119 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 119 resolved as shift
WARNING: shift/reduce conflict for CASE in state 119 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 119 resolved as shift
WARNING: shift/reduce conflict for FOR in state 119 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 119 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 119 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 119 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 119 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 119 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 119 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 119 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 119 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 123 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: shift/reduce conflict for IF in state 127 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 127 resolved as shift
WARNING: shift/reduce conflict for CASE in state 127 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 127 resolved as shift
WARNING: shift/reduce conflict for FOR in state 127 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 127 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 127 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 127 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 127 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 127 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 127 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 127 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 127 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 141 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 148 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 148 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 155 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 155 resolved as shift
WARNING: shift/reduce conflict for ID in state 160 resolved as shift
WARNING: shift/reduce conflict for ID in state 172 resolved as shift
WARNING: shift/reduce conflict for IF in state 172 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 172 resolved as shift
WARNING: shift/reduce conflict for CASE in state 172 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 172 resolved as shift
WARNING: shift/reduce conflict for FOR in state 172 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 172 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 172 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 172 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 172 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 172 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 172 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 172 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 172 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 178 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 184 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 184 resolved as shift
WARNING: shift/reduce conflict for IF in state 184 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 184 resolved as shift
WARNING: shift/reduce conflict for CASE in state 184 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 184 resolved as shift
WARNING: shift/reduce conflict for FOR in state 184 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 184 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 184 resolved as shift
WARNING: shift/reduce conflict for ID in state 184 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 184 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 184 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 184 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 184 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 187 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 187 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 187 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 187 resolved as shift
WARNING: shift/reduce conflict for ID in state 189 resolved as shift
WARNING: shift/reduce conflict for IF in state 189 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 189 resolved as shift
WARNING: shift/reduce conflict for CASE in state 189 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 189 resolved as shift
WARNING: shift/reduce conflict for FOR in state 189 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 189 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 189 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 189 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 189 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 189 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 189 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 189 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 189 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (declaration -> print_stmt)
WARNING: rejected rule (selection_stmt -> print_stmt) in state 9
WARNING: reduce/reduce conflict in state 9 resolved using rule (declaration -> print_stmt)
WARNING: rejected rule (iteration_stmt -> print_stmt) in state 9
WARNING: reduce/reduce conflict in state 75 resolved using rule (selection_stmt -> print_stmt)
WARNING: rejected rule (iteration_stmt -> print_stmt) in state 75
WARNING: reduce/reduce conflict in state 187 resolved using rule (selection_stmt -> print_stmt)
WARNING: rejected rule (iteration_stmt -> print_stmt) in state 187
WARNING: Rule (iteration_stmt -> print_stmt) is never reduced
