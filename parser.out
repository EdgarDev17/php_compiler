Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> OPEN_TAG declaration_list CLOSE_TAG
Rule 2     statement -> expression
Rule 3     expression -> expression PLUS term
Rule 4     declaration_list -> declaration_list declaration
Rule 5     declaration_list -> declaration
Rule 6     declaration -> var_declaration
Rule 7     declaration -> fun_declaration
Rule 8     declaration -> header_declaration
Rule 9     declaration -> class_declaration
Rule 10    declaration -> print_stmt
Rule 11    declaration -> selection_stmt
Rule 12    declaration -> iteration_stmt
Rule 13    print_stmt -> print_stmt ECHO STRING SEMICOLON
Rule 14    print_stmt -> print_stmt ECHO ID SEMICOLON
Rule 15    print_stmt -> empty
Rule 16    header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON
Rule 17    class_declaration -> CLASS FUNCTION_NAME class_stmt
Rule 18    class_stmt -> LBLOCK attributes methods RBLOCK
Rule 19    class_stmt -> LBLOCK empty RBLOCK
Rule 20    class_stmt -> LBLOCK attributes RBLOCK
Rule 21    attributes -> attributes scope var_declaration
Rule 22    attributes -> scope var_declaration
Rule 23    methods -> methods scope fun_declaration
Rule 24    methods -> scope fun_declaration
Rule 25    scope -> PRIVATE
Rule 26    scope -> PUBLIC
Rule 27    scope -> PROTECTED
Rule 28    var_declaration -> ID SEMICOLON var_declaration
Rule 29    var_declaration -> ID SEMICOLON
Rule 30    var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration
Rule 31    var_declaration -> ID EQUAL NUMBER SEMICOLON
Rule 32    var_declaration -> ID EQUAL boolean SEMICOLON var_declaration
Rule 33    var_declaration -> ID EQUAL boolean SEMICOLON
Rule 34    var_declaration -> ID EQUAL ID SEMICOLON var_declaration
Rule 35    var_declaration -> ID EQUAL ID SEMICOLON
Rule 36    var_declaration -> AMPERSANT ID SEMICOLON var_declaration
Rule 37    var_declaration -> AMPERSANT ID SEMICOLON
Rule 38    fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt
Rule 39    params -> param_list
Rule 40    params -> empty
Rule 41    param_list -> param_list COMMA param
Rule 42    param_list -> param
Rule 43    param -> ID
Rule 44    param -> ID LBRACKET RBRACKET
Rule 45    compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
Rule 46    local_declarations -> local_declarations var_declaration
Rule 47    local_declarations -> empty
Rule 48    statement_list -> statement_list statement
Rule 49    statement_list -> empty
Rule 50    statement -> expression_stmt
Rule 51    statement -> compount_stmt
Rule 52    statement -> selection_stmt
Rule 53    statement -> iteration_stmt
Rule 54    statement -> return_stmt
Rule 55    expression_stmt -> expression SEMICOLON
Rule 56    expression_stmt -> SEMICOLON
Rule 57    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 58    selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 59    selection_stmt -> SWITCH LPAREN var RPAREN statement
Rule 60    selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON
Rule 61    selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON
Rule 62    selection_stmt -> print_stmt
Rule 63    iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
Rule 64    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 65    iteration_stmt -> print_stmt
Rule 66    return_stmt -> RETURN SEMICOLON
Rule 67    return_stmt -> RETURN expression SEMICOLON
Rule 68    expression -> var EQUAL expression
Rule 69    expression -> simple_expression
Rule 70    expression -> var EQUAL AMPERSANT ID
Rule 71    var -> ID
Rule 72    var -> ID LBRACKET expression RBRACKET
Rule 73    simple_expression -> additive_expression relop additive_expression
Rule 74    simple_expression -> additive_expression
Rule 75    relop -> LESS
Rule 76    relop -> LESSEQUAL
Rule 77    relop -> GREATER
Rule 78    relop -> GREATEREQUAL
Rule 79    relop -> DEQUAL
Rule 80    relop -> ISEQUAL
Rule 81    additive_expression -> additive_expression addop term
Rule 82    additive_expression -> term
Rule 83    additive_expression -> term MINUSMINUS
Rule 84    additive_expression -> term PLUSPLUS
Rule 85    addop -> PLUS
Rule 86    addop -> MINUS
Rule 87    term -> term mulop factor
Rule 88    term -> factor
Rule 89    mulop -> TIMES
Rule 90    mulop -> DIVIDE
Rule 91    factor -> LPAREN expression RPAREN
Rule 92    factor -> var
Rule 93    factor -> call
Rule 94    factor -> NUMBER
Rule 95    factor -> boolean
Rule 96    call -> ID LPAREN args RPAREN
Rule 97    args -> args_list
Rule 98    args -> empty
Rule 99    args_list -> args_list COMMA expression
Rule 100   args_list -> expression
Rule 101   boolean -> TRUE
Rule 102   boolean -> FALSE
Rule 103   empty -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 36 37 70
BREAK                : 60 61
CASE                 : 60
CLASS                : 17
CLOSE_TAG            : 1
COLON                : 60 61
COMMA                : 41 99
DEFAULT              : 61
DEQUAL               : 79
DIVIDE               : 90
ECHO                 : 13 14
ELSE                 : 58
EQUAL                : 30 31 32 33 34 35 68 70
FALSE                : 102
FOR                  : 63
FUNCTION             : 38
FUNCTION_NAME        : 17 38
GREATER              : 77
GREATEREQUAL         : 78
ID                   : 14 28 29 30 31 32 33 34 34 35 35 36 37 43 44 70 71 72 96
IF                   : 57 58
ISEQUAL              : 80
LBLOCK               : 18 19 20 45
LBRACKET             : 44 72
LESS                 : 75
LESSEQUAL            : 76
LPAREN               : 16 38 57 58 59 63 64 91 96
MINUS                : 86
MINUSMINUS           : 83
NUMBER               : 30 31 60 94
OPEN_TAG             : 1
PLUS                 : 3 85
PLUSPLUS             : 84
PRIVATE              : 25
PROTECTED            : 27
PUBLIC               : 26
RBLOCK               : 18 19 20 45
RBRACKET             : 44 72
REQUIRE              : 16
RETURN               : 66 67
RPAREN               : 16 38 57 58 59 63 64 91 96
SEMICOLON            : 13 14 16 28 29 30 31 32 33 34 35 36 37 55 56 60 61 63 63 66 67
STRING               : 13 16
SWITCH               : 59
TIMES                : 89
TRUE                 : 101
WHILE                : 64
error                : 

Nonterminals, with rules where they appear

additive_expression  : 63 73 73 74 81
addop                : 81
args                 : 96
args_list            : 97 99
attributes           : 18 20 21
boolean              : 32 33 95
call                 : 93
class_declaration    : 9
class_stmt           : 17
compount_stmt        : 38 51
declaration          : 4 5
declaration_list     : 1 4
empty                : 15 19 40 47 49 98
expression           : 2 3 55 57 58 63 64 67 68 72 91 99 100
expression_stmt      : 50
factor               : 87 88
fun_declaration      : 7 23 24
header_declaration   : 8
iteration_stmt       : 12 53
local_declarations   : 45 46
methods              : 18 23
mulop                : 87
param                : 41 42
param_list           : 39 41
params               : 38
print_stmt           : 10 13 14 45 45 45 62 65
program              : 0
relop                : 73
return_stmt          : 54
scope                : 21 22 23 24
selection_stmt       : 11 52
simple_expression    : 69
statement            : 48 57 58 58 59 60 61 63 64
statement_list       : 45 48
term                 : 3 81 82 83 84 87
var                  : 59 68 70 92
var_declaration      : 6 21 22 28 30 32 34 36 46 63

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPEN_TAG declaration_list CLOSE_TAG

    OPEN_TAG        shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> OPEN_TAG . declaration_list CLOSE_TAG
    (4) declaration_list -> . declaration_list declaration
    (5) declaration_list -> . declaration
    (6) declaration -> . var_declaration
    (7) declaration -> . fun_declaration
    (8) declaration -> . header_declaration
    (9) declaration -> . class_declaration
    (10) declaration -> . print_stmt
    (11) declaration -> . selection_stmt
    (12) declaration -> . iteration_stmt
    (28) var_declaration -> . ID SEMICOLON var_declaration
    (29) var_declaration -> . ID SEMICOLON
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (31) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (33) var_declaration -> . ID EQUAL boolean SEMICOLON
    (34) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (35) var_declaration -> . ID EQUAL ID SEMICOLON
    (36) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (37) var_declaration -> . AMPERSANT ID SEMICOLON
    (38) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt
    (16) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMICOLON
    (17) class_declaration -> . CLASS FUNCTION_NAME class_stmt
    (13) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (14) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (15) print_stmt -> . empty
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement
    (58) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (59) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (60) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (62) selection_stmt -> . print_stmt
    (63) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (64) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (65) iteration_stmt -> . print_stmt
    (103) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13
    FUNCTION        shift and go to state 14
    REQUIRE         shift and go to state 15
    CLASS           shift and go to state 16
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    ECHO            reduce using rule 103 (empty -> .)
    CLOSE_TAG       reduce using rule 103 (empty -> .)

  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 103 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 103 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 103 (empty -> .) ]
  ! CLASS           [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! SWITCH          [ reduce using rule 103 (empty -> .) ]
  ! CASE            [ reduce using rule 103 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]

    declaration_list               shift and go to state 3
    declaration                    shift and go to state 4
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    header_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    print_stmt                     shift and go to state 9
    selection_stmt                 shift and go to state 10
    iteration_stmt                 shift and go to state 11
    empty                          shift and go to state 17

state 3

    (1) program -> OPEN_TAG declaration_list . CLOSE_TAG
    (4) declaration_list -> declaration_list . declaration
    (6) declaration -> . var_declaration
    (7) declaration -> . fun_declaration
    (8) declaration -> . header_declaration
    (9) declaration -> . class_declaration
    (10) declaration -> . print_stmt
    (11) declaration -> . selection_stmt
    (12) declaration -> . iteration_stmt
    (28) var_declaration -> . ID SEMICOLON var_declaration
    (29) var_declaration -> . ID SEMICOLON
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (31) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (33) var_declaration -> . ID EQUAL boolean SEMICOLON
    (34) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (35) var_declaration -> . ID EQUAL ID SEMICOLON
    (36) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (37) var_declaration -> . AMPERSANT ID SEMICOLON
    (38) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt
    (16) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMICOLON
    (17) class_declaration -> . CLASS FUNCTION_NAME class_stmt
    (13) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (14) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (15) print_stmt -> . empty
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement
    (58) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (59) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (60) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (62) selection_stmt -> . print_stmt
    (63) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (64) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (65) iteration_stmt -> . print_stmt
    (103) empty -> .

  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    CLOSE_TAG       shift and go to state 24
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13
    FUNCTION        shift and go to state 14
    REQUIRE         shift and go to state 15
    CLASS           shift and go to state 16
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    ECHO            reduce using rule 103 (empty -> .)

  ! CLOSE_TAG       [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 103 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 103 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 103 (empty -> .) ]
  ! CLASS           [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! SWITCH          [ reduce using rule 103 (empty -> .) ]
  ! CASE            [ reduce using rule 103 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]

    declaration                    shift and go to state 25
    var_declaration                shift and go to state 5
    fun_declaration                shift and go to state 6
    header_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    print_stmt                     shift and go to state 9
    selection_stmt                 shift and go to state 10
    iteration_stmt                 shift and go to state 11
    empty                          shift and go to state 17

state 4

    (5) declaration_list -> declaration .

    CLOSE_TAG       reduce using rule 5 (declaration_list -> declaration .)
    ID              reduce using rule 5 (declaration_list -> declaration .)
    AMPERSANT       reduce using rule 5 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 5 (declaration_list -> declaration .)
    REQUIRE         reduce using rule 5 (declaration_list -> declaration .)
    CLASS           reduce using rule 5 (declaration_list -> declaration .)
    IF              reduce using rule 5 (declaration_list -> declaration .)
    SWITCH          reduce using rule 5 (declaration_list -> declaration .)
    CASE            reduce using rule 5 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 5 (declaration_list -> declaration .)
    FOR             reduce using rule 5 (declaration_list -> declaration .)
    WHILE           reduce using rule 5 (declaration_list -> declaration .)
    ECHO            reduce using rule 5 (declaration_list -> declaration .)


state 5

    (6) declaration -> var_declaration .

    CLOSE_TAG       reduce using rule 6 (declaration -> var_declaration .)
    ID              reduce using rule 6 (declaration -> var_declaration .)
    AMPERSANT       reduce using rule 6 (declaration -> var_declaration .)
    FUNCTION        reduce using rule 6 (declaration -> var_declaration .)
    REQUIRE         reduce using rule 6 (declaration -> var_declaration .)
    CLASS           reduce using rule 6 (declaration -> var_declaration .)
    IF              reduce using rule 6 (declaration -> var_declaration .)
    SWITCH          reduce using rule 6 (declaration -> var_declaration .)
    CASE            reduce using rule 6 (declaration -> var_declaration .)
    DEFAULT         reduce using rule 6 (declaration -> var_declaration .)
    FOR             reduce using rule 6 (declaration -> var_declaration .)
    WHILE           reduce using rule 6 (declaration -> var_declaration .)
    ECHO            reduce using rule 6 (declaration -> var_declaration .)


state 6

    (7) declaration -> fun_declaration .

    CLOSE_TAG       reduce using rule 7 (declaration -> fun_declaration .)
    ID              reduce using rule 7 (declaration -> fun_declaration .)
    AMPERSANT       reduce using rule 7 (declaration -> fun_declaration .)
    FUNCTION        reduce using rule 7 (declaration -> fun_declaration .)
    REQUIRE         reduce using rule 7 (declaration -> fun_declaration .)
    CLASS           reduce using rule 7 (declaration -> fun_declaration .)
    IF              reduce using rule 7 (declaration -> fun_declaration .)
    SWITCH          reduce using rule 7 (declaration -> fun_declaration .)
    CASE            reduce using rule 7 (declaration -> fun_declaration .)
    DEFAULT         reduce using rule 7 (declaration -> fun_declaration .)
    FOR             reduce using rule 7 (declaration -> fun_declaration .)
    WHILE           reduce using rule 7 (declaration -> fun_declaration .)
    ECHO            reduce using rule 7 (declaration -> fun_declaration .)


state 7

    (8) declaration -> header_declaration .

    CLOSE_TAG       reduce using rule 8 (declaration -> header_declaration .)
    ID              reduce using rule 8 (declaration -> header_declaration .)
    AMPERSANT       reduce using rule 8 (declaration -> header_declaration .)
    FUNCTION        reduce using rule 8 (declaration -> header_declaration .)
    REQUIRE         reduce using rule 8 (declaration -> header_declaration .)
    CLASS           reduce using rule 8 (declaration -> header_declaration .)
    IF              reduce using rule 8 (declaration -> header_declaration .)
    SWITCH          reduce using rule 8 (declaration -> header_declaration .)
    CASE            reduce using rule 8 (declaration -> header_declaration .)
    DEFAULT         reduce using rule 8 (declaration -> header_declaration .)
    FOR             reduce using rule 8 (declaration -> header_declaration .)
    WHILE           reduce using rule 8 (declaration -> header_declaration .)
    ECHO            reduce using rule 8 (declaration -> header_declaration .)


state 8

    (9) declaration -> class_declaration .

    CLOSE_TAG       reduce using rule 9 (declaration -> class_declaration .)
    ID              reduce using rule 9 (declaration -> class_declaration .)
    AMPERSANT       reduce using rule 9 (declaration -> class_declaration .)
    FUNCTION        reduce using rule 9 (declaration -> class_declaration .)
    REQUIRE         reduce using rule 9 (declaration -> class_declaration .)
    CLASS           reduce using rule 9 (declaration -> class_declaration .)
    IF              reduce using rule 9 (declaration -> class_declaration .)
    SWITCH          reduce using rule 9 (declaration -> class_declaration .)
    CASE            reduce using rule 9 (declaration -> class_declaration .)
    DEFAULT         reduce using rule 9 (declaration -> class_declaration .)
    FOR             reduce using rule 9 (declaration -> class_declaration .)
    WHILE           reduce using rule 9 (declaration -> class_declaration .)
    ECHO            reduce using rule 9 (declaration -> class_declaration .)


state 9

    (10) declaration -> print_stmt .
    (13) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (14) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (62) selection_stmt -> print_stmt .
    (65) iteration_stmt -> print_stmt .

  ! shift/reduce conflict for ECHO resolved as shift
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 10 (declaration -> print_stmt .)
  ! shift/reduce conflict for ECHO resolved as shift
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 10 (declaration -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 10 (declaration -> print_stmt .)
  ! shift/reduce conflict for ECHO resolved as shift
    CLOSE_TAG       reduce using rule 10 (declaration -> print_stmt .)
    ID              reduce using rule 10 (declaration -> print_stmt .)
    AMPERSANT       reduce using rule 10 (declaration -> print_stmt .)
    FUNCTION        reduce using rule 10 (declaration -> print_stmt .)
    REQUIRE         reduce using rule 10 (declaration -> print_stmt .)
    CLASS           reduce using rule 10 (declaration -> print_stmt .)
    IF              reduce using rule 10 (declaration -> print_stmt .)
    SWITCH          reduce using rule 10 (declaration -> print_stmt .)
    CASE            reduce using rule 10 (declaration -> print_stmt .)
    DEFAULT         reduce using rule 10 (declaration -> print_stmt .)
    FOR             reduce using rule 10 (declaration -> print_stmt .)
    WHILE           reduce using rule 10 (declaration -> print_stmt .)
    ECHO            shift and go to state 26

  ! ECHO            [ reduce using rule 10 (declaration -> print_stmt .) ]
  ! CLOSE_TAG       [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! AMPERSANT       [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! FUNCTION        [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! REQUIRE         [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! CLASS           [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! CLOSE_TAG       [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! AMPERSANT       [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! FUNCTION        [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! REQUIRE         [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! CLASS           [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]


state 10

    (11) declaration -> selection_stmt .

    CLOSE_TAG       reduce using rule 11 (declaration -> selection_stmt .)
    ID              reduce using rule 11 (declaration -> selection_stmt .)
    AMPERSANT       reduce using rule 11 (declaration -> selection_stmt .)
    FUNCTION        reduce using rule 11 (declaration -> selection_stmt .)
    REQUIRE         reduce using rule 11 (declaration -> selection_stmt .)
    CLASS           reduce using rule 11 (declaration -> selection_stmt .)
    IF              reduce using rule 11 (declaration -> selection_stmt .)
    SWITCH          reduce using rule 11 (declaration -> selection_stmt .)
    CASE            reduce using rule 11 (declaration -> selection_stmt .)
    DEFAULT         reduce using rule 11 (declaration -> selection_stmt .)
    FOR             reduce using rule 11 (declaration -> selection_stmt .)
    WHILE           reduce using rule 11 (declaration -> selection_stmt .)
    ECHO            reduce using rule 11 (declaration -> selection_stmt .)


state 11

    (12) declaration -> iteration_stmt .

    CLOSE_TAG       reduce using rule 12 (declaration -> iteration_stmt .)
    ID              reduce using rule 12 (declaration -> iteration_stmt .)
    AMPERSANT       reduce using rule 12 (declaration -> iteration_stmt .)
    FUNCTION        reduce using rule 12 (declaration -> iteration_stmt .)
    REQUIRE         reduce using rule 12 (declaration -> iteration_stmt .)
    CLASS           reduce using rule 12 (declaration -> iteration_stmt .)
    IF              reduce using rule 12 (declaration -> iteration_stmt .)
    SWITCH          reduce using rule 12 (declaration -> iteration_stmt .)
    CASE            reduce using rule 12 (declaration -> iteration_stmt .)
    DEFAULT         reduce using rule 12 (declaration -> iteration_stmt .)
    FOR             reduce using rule 12 (declaration -> iteration_stmt .)
    WHILE           reduce using rule 12 (declaration -> iteration_stmt .)
    ECHO            reduce using rule 12 (declaration -> iteration_stmt .)


state 12

    (28) var_declaration -> ID . SEMICOLON var_declaration
    (29) var_declaration -> ID . SEMICOLON
    (30) var_declaration -> ID . EQUAL NUMBER SEMICOLON var_declaration
    (31) var_declaration -> ID . EQUAL NUMBER SEMICOLON
    (32) var_declaration -> ID . EQUAL boolean SEMICOLON var_declaration
    (33) var_declaration -> ID . EQUAL boolean SEMICOLON
    (34) var_declaration -> ID . EQUAL ID SEMICOLON var_declaration
    (35) var_declaration -> ID . EQUAL ID SEMICOLON

    SEMICOLON       shift and go to state 27
    EQUAL           shift and go to state 28


state 13

    (36) var_declaration -> AMPERSANT . ID SEMICOLON var_declaration
    (37) var_declaration -> AMPERSANT . ID SEMICOLON

    ID              shift and go to state 29


state 14

    (38) fun_declaration -> FUNCTION . FUNCTION_NAME LPAREN params RPAREN compount_stmt

    FUNCTION_NAME   shift and go to state 30


state 15

    (16) header_declaration -> REQUIRE . LPAREN STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 31


state 16

    (17) class_declaration -> CLASS . FUNCTION_NAME class_stmt

    FUNCTION_NAME   shift and go to state 32


state 17

    (15) print_stmt -> empty .

    ECHO            reduce using rule 15 (print_stmt -> empty .)
    CLOSE_TAG       reduce using rule 15 (print_stmt -> empty .)
    ID              reduce using rule 15 (print_stmt -> empty .)
    AMPERSANT       reduce using rule 15 (print_stmt -> empty .)
    FUNCTION        reduce using rule 15 (print_stmt -> empty .)
    REQUIRE         reduce using rule 15 (print_stmt -> empty .)
    CLASS           reduce using rule 15 (print_stmt -> empty .)
    IF              reduce using rule 15 (print_stmt -> empty .)
    SWITCH          reduce using rule 15 (print_stmt -> empty .)
    CASE            reduce using rule 15 (print_stmt -> empty .)
    DEFAULT         reduce using rule 15 (print_stmt -> empty .)
    FOR             reduce using rule 15 (print_stmt -> empty .)
    WHILE           reduce using rule 15 (print_stmt -> empty .)
    BREAK           reduce using rule 15 (print_stmt -> empty .)
    SEMICOLON       reduce using rule 15 (print_stmt -> empty .)
    LBLOCK          reduce using rule 15 (print_stmt -> empty .)
    RETURN          reduce using rule 15 (print_stmt -> empty .)
    LPAREN          reduce using rule 15 (print_stmt -> empty .)
    NUMBER          reduce using rule 15 (print_stmt -> empty .)
    TRUE            reduce using rule 15 (print_stmt -> empty .)
    FALSE           reduce using rule 15 (print_stmt -> empty .)
    RBLOCK          reduce using rule 15 (print_stmt -> empty .)
    ELSE            reduce using rule 15 (print_stmt -> empty .)


state 18

    (57) selection_stmt -> IF . LPAREN expression RPAREN statement
    (58) selection_stmt -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 33


state 19

    (59) selection_stmt -> SWITCH . LPAREN var RPAREN statement

    LPAREN          shift and go to state 34


state 20

    (60) selection_stmt -> CASE . NUMBER COLON statement BREAK SEMICOLON

    NUMBER          shift and go to state 35


state 21

    (61) selection_stmt -> DEFAULT . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 36


state 22

    (63) iteration_stmt -> FOR . LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    LPAREN          shift and go to state 37


state 23

    (64) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 38


state 24

    (1) program -> OPEN_TAG declaration_list CLOSE_TAG .

    $end            reduce using rule 1 (program -> OPEN_TAG declaration_list CLOSE_TAG .)


state 25

    (4) declaration_list -> declaration_list declaration .

    CLOSE_TAG       reduce using rule 4 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 4 (declaration_list -> declaration_list declaration .)
    AMPERSANT       reduce using rule 4 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 4 (declaration_list -> declaration_list declaration .)
    REQUIRE         reduce using rule 4 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 4 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 4 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 4 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 4 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 4 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 4 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 4 (declaration_list -> declaration_list declaration .)
    ECHO            reduce using rule 4 (declaration_list -> declaration_list declaration .)


state 26

    (13) print_stmt -> print_stmt ECHO . STRING SEMICOLON
    (14) print_stmt -> print_stmt ECHO . ID SEMICOLON

    STRING          shift and go to state 39
    ID              shift and go to state 40


state 27

    (28) var_declaration -> ID SEMICOLON . var_declaration
    (29) var_declaration -> ID SEMICOLON .
    (28) var_declaration -> . ID SEMICOLON var_declaration
    (29) var_declaration -> . ID SEMICOLON
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (31) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (33) var_declaration -> . ID EQUAL boolean SEMICOLON
    (34) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (35) var_declaration -> . ID EQUAL ID SEMICOLON
    (36) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (37) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    FUNCTION        reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    REQUIRE         reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    CLASS           reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    IF              reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    SWITCH          reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    CASE            reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    DEFAULT         reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    FOR             reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    WHILE           reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    ECHO            reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    SEMICOLON       reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    RBLOCK          reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    PRIVATE         reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    PUBLIC          reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    PROTECTED       reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    LBLOCK          reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    RETURN          reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    LPAREN          reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    NUMBER          reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    TRUE            reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    FALSE           reduce using rule 29 (var_declaration -> ID SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 29 (var_declaration -> ID SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 29 (var_declaration -> ID SEMICOLON .) ]

    var_declaration                shift and go to state 41

state 28

    (30) var_declaration -> ID EQUAL . NUMBER SEMICOLON var_declaration
    (31) var_declaration -> ID EQUAL . NUMBER SEMICOLON
    (32) var_declaration -> ID EQUAL . boolean SEMICOLON var_declaration
    (33) var_declaration -> ID EQUAL . boolean SEMICOLON
    (34) var_declaration -> ID EQUAL . ID SEMICOLON var_declaration
    (35) var_declaration -> ID EQUAL . ID SEMICOLON
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    NUMBER          shift and go to state 43
    ID              shift and go to state 42
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    boolean                        shift and go to state 44

state 29

    (36) var_declaration -> AMPERSANT ID . SEMICOLON var_declaration
    (37) var_declaration -> AMPERSANT ID . SEMICOLON

    SEMICOLON       shift and go to state 47


state 30

    (38) fun_declaration -> FUNCTION FUNCTION_NAME . LPAREN params RPAREN compount_stmt

    LPAREN          shift and go to state 48


state 31

    (16) header_declaration -> REQUIRE LPAREN . STRING RPAREN SEMICOLON

    STRING          shift and go to state 49


state 32

    (17) class_declaration -> CLASS FUNCTION_NAME . class_stmt
    (18) class_stmt -> . LBLOCK attributes methods RBLOCK
    (19) class_stmt -> . LBLOCK empty RBLOCK
    (20) class_stmt -> . LBLOCK attributes RBLOCK

    LBLOCK          shift and go to state 51

    class_stmt                     shift and go to state 50

state 33

    (57) selection_stmt -> IF LPAREN . expression RPAREN statement
    (58) selection_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 53
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 34

    (59) selection_stmt -> SWITCH LPAREN . var RPAREN statement
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 64

    var                            shift and go to state 63

state 35

    (60) selection_stmt -> CASE NUMBER . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 65


state 36

    (61) selection_stmt -> DEFAULT COLON . statement BREAK SEMICOLON
    (2) statement -> . expression
    (50) statement -> . expression_stmt
    (51) statement -> . compount_stmt
    (52) statement -> . selection_stmt
    (53) statement -> . iteration_stmt
    (54) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (55) expression_stmt -> . expression SEMICOLON
    (56) expression_stmt -> . SEMICOLON
    (45) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement
    (58) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (59) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (60) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (62) selection_stmt -> . print_stmt
    (63) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (64) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (65) iteration_stmt -> . print_stmt
    (66) return_stmt -> . RETURN SEMICOLON
    (67) return_stmt -> . RETURN expression SEMICOLON
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (13) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (14) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (15) print_stmt -> . empty
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (103) empty -> .
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 103 (empty -> .)
    BREAK           reduce using rule 103 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    statement                      shift and go to state 66
    expression                     shift and go to state 68
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    additive_expression            shift and go to state 58
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 37

    (63) iteration_stmt -> FOR LPAREN . var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (28) var_declaration -> . ID SEMICOLON var_declaration
    (29) var_declaration -> . ID SEMICOLON
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (31) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (33) var_declaration -> . ID EQUAL boolean SEMICOLON
    (34) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (35) var_declaration -> . ID EQUAL ID SEMICOLON
    (36) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (37) var_declaration -> . AMPERSANT ID SEMICOLON

    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

    var_declaration                shift and go to state 77

state 38

    (64) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 78
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 39

    (13) print_stmt -> print_stmt ECHO STRING . SEMICOLON

    SEMICOLON       shift and go to state 79


state 40

    (14) print_stmt -> print_stmt ECHO ID . SEMICOLON

    SEMICOLON       shift and go to state 80


state 41

    (28) var_declaration -> ID SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    ID              reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    CLASS           reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    IF              reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    SWITCH          reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    CASE            reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    FOR             reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    WHILE           reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    ECHO            reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    RETURN          reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    LPAREN          reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    NUMBER          reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    TRUE            reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)
    FALSE           reduce using rule 28 (var_declaration -> ID SEMICOLON var_declaration .)


state 42

    (34) var_declaration -> ID EQUAL ID . SEMICOLON var_declaration
    (35) var_declaration -> ID EQUAL ID . SEMICOLON

    SEMICOLON       shift and go to state 81


state 43

    (30) var_declaration -> ID EQUAL NUMBER . SEMICOLON var_declaration
    (31) var_declaration -> ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 82


state 44

    (32) var_declaration -> ID EQUAL boolean . SEMICOLON var_declaration
    (33) var_declaration -> ID EQUAL boolean . SEMICOLON

    SEMICOLON       shift and go to state 83


state 45

    (101) boolean -> TRUE .

    SEMICOLON       reduce using rule 101 (boolean -> TRUE .)
    MINUSMINUS      reduce using rule 101 (boolean -> TRUE .)
    PLUSPLUS        reduce using rule 101 (boolean -> TRUE .)
    TIMES           reduce using rule 101 (boolean -> TRUE .)
    DIVIDE          reduce using rule 101 (boolean -> TRUE .)
    LESS            reduce using rule 101 (boolean -> TRUE .)
    LESSEQUAL       reduce using rule 101 (boolean -> TRUE .)
    GREATER         reduce using rule 101 (boolean -> TRUE .)
    GREATEREQUAL    reduce using rule 101 (boolean -> TRUE .)
    DEQUAL          reduce using rule 101 (boolean -> TRUE .)
    ISEQUAL         reduce using rule 101 (boolean -> TRUE .)
    PLUS            reduce using rule 101 (boolean -> TRUE .)
    MINUS           reduce using rule 101 (boolean -> TRUE .)
    RPAREN          reduce using rule 101 (boolean -> TRUE .)
    BREAK           reduce using rule 101 (boolean -> TRUE .)
    ELSE            reduce using rule 101 (boolean -> TRUE .)
    CLOSE_TAG       reduce using rule 101 (boolean -> TRUE .)
    ID              reduce using rule 101 (boolean -> TRUE .)
    AMPERSANT       reduce using rule 101 (boolean -> TRUE .)
    FUNCTION        reduce using rule 101 (boolean -> TRUE .)
    REQUIRE         reduce using rule 101 (boolean -> TRUE .)
    CLASS           reduce using rule 101 (boolean -> TRUE .)
    IF              reduce using rule 101 (boolean -> TRUE .)
    SWITCH          reduce using rule 101 (boolean -> TRUE .)
    CASE            reduce using rule 101 (boolean -> TRUE .)
    DEFAULT         reduce using rule 101 (boolean -> TRUE .)
    FOR             reduce using rule 101 (boolean -> TRUE .)
    WHILE           reduce using rule 101 (boolean -> TRUE .)
    ECHO            reduce using rule 101 (boolean -> TRUE .)
    LBLOCK          reduce using rule 101 (boolean -> TRUE .)
    RETURN          reduce using rule 101 (boolean -> TRUE .)
    LPAREN          reduce using rule 101 (boolean -> TRUE .)
    NUMBER          reduce using rule 101 (boolean -> TRUE .)
    TRUE            reduce using rule 101 (boolean -> TRUE .)
    FALSE           reduce using rule 101 (boolean -> TRUE .)
    RBLOCK          reduce using rule 101 (boolean -> TRUE .)
    RBRACKET        reduce using rule 101 (boolean -> TRUE .)
    COMMA           reduce using rule 101 (boolean -> TRUE .)


state 46

    (102) boolean -> FALSE .

    SEMICOLON       reduce using rule 102 (boolean -> FALSE .)
    MINUSMINUS      reduce using rule 102 (boolean -> FALSE .)
    PLUSPLUS        reduce using rule 102 (boolean -> FALSE .)
    TIMES           reduce using rule 102 (boolean -> FALSE .)
    DIVIDE          reduce using rule 102 (boolean -> FALSE .)
    LESS            reduce using rule 102 (boolean -> FALSE .)
    LESSEQUAL       reduce using rule 102 (boolean -> FALSE .)
    GREATER         reduce using rule 102 (boolean -> FALSE .)
    GREATEREQUAL    reduce using rule 102 (boolean -> FALSE .)
    DEQUAL          reduce using rule 102 (boolean -> FALSE .)
    ISEQUAL         reduce using rule 102 (boolean -> FALSE .)
    PLUS            reduce using rule 102 (boolean -> FALSE .)
    MINUS           reduce using rule 102 (boolean -> FALSE .)
    RPAREN          reduce using rule 102 (boolean -> FALSE .)
    BREAK           reduce using rule 102 (boolean -> FALSE .)
    ELSE            reduce using rule 102 (boolean -> FALSE .)
    CLOSE_TAG       reduce using rule 102 (boolean -> FALSE .)
    ID              reduce using rule 102 (boolean -> FALSE .)
    AMPERSANT       reduce using rule 102 (boolean -> FALSE .)
    FUNCTION        reduce using rule 102 (boolean -> FALSE .)
    REQUIRE         reduce using rule 102 (boolean -> FALSE .)
    CLASS           reduce using rule 102 (boolean -> FALSE .)
    IF              reduce using rule 102 (boolean -> FALSE .)
    SWITCH          reduce using rule 102 (boolean -> FALSE .)
    CASE            reduce using rule 102 (boolean -> FALSE .)
    DEFAULT         reduce using rule 102 (boolean -> FALSE .)
    FOR             reduce using rule 102 (boolean -> FALSE .)
    WHILE           reduce using rule 102 (boolean -> FALSE .)
    ECHO            reduce using rule 102 (boolean -> FALSE .)
    LBLOCK          reduce using rule 102 (boolean -> FALSE .)
    RETURN          reduce using rule 102 (boolean -> FALSE .)
    LPAREN          reduce using rule 102 (boolean -> FALSE .)
    NUMBER          reduce using rule 102 (boolean -> FALSE .)
    TRUE            reduce using rule 102 (boolean -> FALSE .)
    FALSE           reduce using rule 102 (boolean -> FALSE .)
    RBLOCK          reduce using rule 102 (boolean -> FALSE .)
    RBRACKET        reduce using rule 102 (boolean -> FALSE .)
    COMMA           reduce using rule 102 (boolean -> FALSE .)


state 47

    (36) var_declaration -> AMPERSANT ID SEMICOLON . var_declaration
    (37) var_declaration -> AMPERSANT ID SEMICOLON .
    (28) var_declaration -> . ID SEMICOLON var_declaration
    (29) var_declaration -> . ID SEMICOLON
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (31) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (33) var_declaration -> . ID EQUAL boolean SEMICOLON
    (34) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (35) var_declaration -> . ID EQUAL ID SEMICOLON
    (36) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (37) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    FUNCTION        reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    REQUIRE         reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    CLASS           reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    IF              reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    SWITCH          reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    CASE            reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    DEFAULT         reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    FOR             reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    WHILE           reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    ECHO            reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    SEMICOLON       reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    RBLOCK          reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    PRIVATE         reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    PUBLIC          reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    PROTECTED       reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    LBLOCK          reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    RETURN          reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    LPAREN          reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    NUMBER          reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    TRUE            reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    FALSE           reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 37 (var_declaration -> AMPERSANT ID SEMICOLON .) ]

    var_declaration                shift and go to state 84

state 48

    (38) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN . params RPAREN compount_stmt
    (39) params -> . param_list
    (40) params -> . empty
    (41) param_list -> . param_list COMMA param
    (42) param_list -> . param
    (103) empty -> .
    (43) param -> . ID
    (44) param -> . ID LBRACKET RBRACKET

    RPAREN          reduce using rule 103 (empty -> .)
    ID              shift and go to state 89

    params                         shift and go to state 85
    param_list                     shift and go to state 86
    empty                          shift and go to state 87
    param                          shift and go to state 88

state 49

    (16) header_declaration -> REQUIRE LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 90


state 50

    (17) class_declaration -> CLASS FUNCTION_NAME class_stmt .

    CLOSE_TAG       reduce using rule 17 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    ID              reduce using rule 17 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    AMPERSANT       reduce using rule 17 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    FUNCTION        reduce using rule 17 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    REQUIRE         reduce using rule 17 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    CLASS           reduce using rule 17 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    IF              reduce using rule 17 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    SWITCH          reduce using rule 17 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    CASE            reduce using rule 17 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    DEFAULT         reduce using rule 17 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    FOR             reduce using rule 17 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    WHILE           reduce using rule 17 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    ECHO            reduce using rule 17 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)


state 51

    (18) class_stmt -> LBLOCK . attributes methods RBLOCK
    (19) class_stmt -> LBLOCK . empty RBLOCK
    (20) class_stmt -> LBLOCK . attributes RBLOCK
    (21) attributes -> . attributes scope var_declaration
    (22) attributes -> . scope var_declaration
    (103) empty -> .
    (25) scope -> . PRIVATE
    (26) scope -> . PUBLIC
    (27) scope -> . PROTECTED

    RBLOCK          reduce using rule 103 (empty -> .)
    PRIVATE         shift and go to state 94
    PUBLIC          shift and go to state 95
    PROTECTED       shift and go to state 96

    attributes                     shift and go to state 91
    empty                          shift and go to state 92
    scope                          shift and go to state 93

state 52

    (91) factor -> LPAREN . expression RPAREN
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 97
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 53

    (57) selection_stmt -> IF LPAREN expression . RPAREN statement
    (58) selection_stmt -> IF LPAREN expression . RPAREN statement ELSE statement
    (3) expression -> expression . PLUS term

    RPAREN          shift and go to state 98
    PLUS            shift and go to state 99


state 54

    (82) additive_expression -> term .
    (83) additive_expression -> term . MINUSMINUS
    (84) additive_expression -> term . PLUSPLUS
    (87) term -> term . mulop factor
    (89) mulop -> . TIMES
    (90) mulop -> . DIVIDE

    LESS            reduce using rule 82 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 82 (additive_expression -> term .)
    GREATER         reduce using rule 82 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 82 (additive_expression -> term .)
    DEQUAL          reduce using rule 82 (additive_expression -> term .)
    ISEQUAL         reduce using rule 82 (additive_expression -> term .)
    PLUS            reduce using rule 82 (additive_expression -> term .)
    MINUS           reduce using rule 82 (additive_expression -> term .)
    RPAREN          reduce using rule 82 (additive_expression -> term .)
    SEMICOLON       reduce using rule 82 (additive_expression -> term .)
    BREAK           reduce using rule 82 (additive_expression -> term .)
    ELSE            reduce using rule 82 (additive_expression -> term .)
    CLOSE_TAG       reduce using rule 82 (additive_expression -> term .)
    ID              reduce using rule 82 (additive_expression -> term .)
    AMPERSANT       reduce using rule 82 (additive_expression -> term .)
    FUNCTION        reduce using rule 82 (additive_expression -> term .)
    REQUIRE         reduce using rule 82 (additive_expression -> term .)
    CLASS           reduce using rule 82 (additive_expression -> term .)
    IF              reduce using rule 82 (additive_expression -> term .)
    SWITCH          reduce using rule 82 (additive_expression -> term .)
    CASE            reduce using rule 82 (additive_expression -> term .)
    DEFAULT         reduce using rule 82 (additive_expression -> term .)
    FOR             reduce using rule 82 (additive_expression -> term .)
    WHILE           reduce using rule 82 (additive_expression -> term .)
    ECHO            reduce using rule 82 (additive_expression -> term .)
    LBLOCK          reduce using rule 82 (additive_expression -> term .)
    RETURN          reduce using rule 82 (additive_expression -> term .)
    LPAREN          reduce using rule 82 (additive_expression -> term .)
    NUMBER          reduce using rule 82 (additive_expression -> term .)
    TRUE            reduce using rule 82 (additive_expression -> term .)
    FALSE           reduce using rule 82 (additive_expression -> term .)
    RBLOCK          reduce using rule 82 (additive_expression -> term .)
    RBRACKET        reduce using rule 82 (additive_expression -> term .)
    COMMA           reduce using rule 82 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 100
    PLUSPLUS        shift and go to state 101
    TIMES           shift and go to state 103
    DIVIDE          shift and go to state 104

    mulop                          shift and go to state 102

state 55

    (68) expression -> var . EQUAL expression
    (70) expression -> var . EQUAL AMPERSANT ID
    (92) factor -> var .

    EQUAL           shift and go to state 105
    MINUSMINUS      reduce using rule 92 (factor -> var .)
    PLUSPLUS        reduce using rule 92 (factor -> var .)
    TIMES           reduce using rule 92 (factor -> var .)
    DIVIDE          reduce using rule 92 (factor -> var .)
    LESS            reduce using rule 92 (factor -> var .)
    LESSEQUAL       reduce using rule 92 (factor -> var .)
    GREATER         reduce using rule 92 (factor -> var .)
    GREATEREQUAL    reduce using rule 92 (factor -> var .)
    DEQUAL          reduce using rule 92 (factor -> var .)
    ISEQUAL         reduce using rule 92 (factor -> var .)
    PLUS            reduce using rule 92 (factor -> var .)
    MINUS           reduce using rule 92 (factor -> var .)
    RPAREN          reduce using rule 92 (factor -> var .)
    SEMICOLON       reduce using rule 92 (factor -> var .)
    BREAK           reduce using rule 92 (factor -> var .)
    ELSE            reduce using rule 92 (factor -> var .)
    CLOSE_TAG       reduce using rule 92 (factor -> var .)
    ID              reduce using rule 92 (factor -> var .)
    AMPERSANT       reduce using rule 92 (factor -> var .)
    FUNCTION        reduce using rule 92 (factor -> var .)
    REQUIRE         reduce using rule 92 (factor -> var .)
    CLASS           reduce using rule 92 (factor -> var .)
    IF              reduce using rule 92 (factor -> var .)
    SWITCH          reduce using rule 92 (factor -> var .)
    CASE            reduce using rule 92 (factor -> var .)
    DEFAULT         reduce using rule 92 (factor -> var .)
    FOR             reduce using rule 92 (factor -> var .)
    WHILE           reduce using rule 92 (factor -> var .)
    ECHO            reduce using rule 92 (factor -> var .)
    LBLOCK          reduce using rule 92 (factor -> var .)
    RETURN          reduce using rule 92 (factor -> var .)
    LPAREN          reduce using rule 92 (factor -> var .)
    NUMBER          reduce using rule 92 (factor -> var .)
    TRUE            reduce using rule 92 (factor -> var .)
    FALSE           reduce using rule 92 (factor -> var .)
    RBLOCK          reduce using rule 92 (factor -> var .)
    RBRACKET        reduce using rule 92 (factor -> var .)
    COMMA           reduce using rule 92 (factor -> var .)


state 56

    (69) expression -> simple_expression .

    RPAREN          reduce using rule 69 (expression -> simple_expression .)
    PLUS            reduce using rule 69 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 69 (expression -> simple_expression .)
    BREAK           reduce using rule 69 (expression -> simple_expression .)
    ELSE            reduce using rule 69 (expression -> simple_expression .)
    CLOSE_TAG       reduce using rule 69 (expression -> simple_expression .)
    ID              reduce using rule 69 (expression -> simple_expression .)
    AMPERSANT       reduce using rule 69 (expression -> simple_expression .)
    FUNCTION        reduce using rule 69 (expression -> simple_expression .)
    REQUIRE         reduce using rule 69 (expression -> simple_expression .)
    CLASS           reduce using rule 69 (expression -> simple_expression .)
    IF              reduce using rule 69 (expression -> simple_expression .)
    SWITCH          reduce using rule 69 (expression -> simple_expression .)
    CASE            reduce using rule 69 (expression -> simple_expression .)
    DEFAULT         reduce using rule 69 (expression -> simple_expression .)
    FOR             reduce using rule 69 (expression -> simple_expression .)
    WHILE           reduce using rule 69 (expression -> simple_expression .)
    ECHO            reduce using rule 69 (expression -> simple_expression .)
    LBLOCK          reduce using rule 69 (expression -> simple_expression .)
    RETURN          reduce using rule 69 (expression -> simple_expression .)
    LPAREN          reduce using rule 69 (expression -> simple_expression .)
    NUMBER          reduce using rule 69 (expression -> simple_expression .)
    TRUE            reduce using rule 69 (expression -> simple_expression .)
    FALSE           reduce using rule 69 (expression -> simple_expression .)
    RBLOCK          reduce using rule 69 (expression -> simple_expression .)
    RBRACKET        reduce using rule 69 (expression -> simple_expression .)
    COMMA           reduce using rule 69 (expression -> simple_expression .)


state 57

    (71) var -> ID .
    (72) var -> ID . LBRACKET expression RBRACKET
    (96) call -> ID . LPAREN args RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUAL           reduce using rule 71 (var -> ID .)
    MINUSMINUS      reduce using rule 71 (var -> ID .)
    PLUSPLUS        reduce using rule 71 (var -> ID .)
    TIMES           reduce using rule 71 (var -> ID .)
    DIVIDE          reduce using rule 71 (var -> ID .)
    LESS            reduce using rule 71 (var -> ID .)
    LESSEQUAL       reduce using rule 71 (var -> ID .)
    GREATER         reduce using rule 71 (var -> ID .)
    GREATEREQUAL    reduce using rule 71 (var -> ID .)
    DEQUAL          reduce using rule 71 (var -> ID .)
    ISEQUAL         reduce using rule 71 (var -> ID .)
    PLUS            reduce using rule 71 (var -> ID .)
    MINUS           reduce using rule 71 (var -> ID .)
    RPAREN          reduce using rule 71 (var -> ID .)
    SEMICOLON       reduce using rule 71 (var -> ID .)
    BREAK           reduce using rule 71 (var -> ID .)
    ELSE            reduce using rule 71 (var -> ID .)
    CLOSE_TAG       reduce using rule 71 (var -> ID .)
    ID              reduce using rule 71 (var -> ID .)
    AMPERSANT       reduce using rule 71 (var -> ID .)
    FUNCTION        reduce using rule 71 (var -> ID .)
    REQUIRE         reduce using rule 71 (var -> ID .)
    CLASS           reduce using rule 71 (var -> ID .)
    IF              reduce using rule 71 (var -> ID .)
    SWITCH          reduce using rule 71 (var -> ID .)
    CASE            reduce using rule 71 (var -> ID .)
    DEFAULT         reduce using rule 71 (var -> ID .)
    FOR             reduce using rule 71 (var -> ID .)
    WHILE           reduce using rule 71 (var -> ID .)
    ECHO            reduce using rule 71 (var -> ID .)
    LBLOCK          reduce using rule 71 (var -> ID .)
    RETURN          reduce using rule 71 (var -> ID .)
    NUMBER          reduce using rule 71 (var -> ID .)
    TRUE            reduce using rule 71 (var -> ID .)
    FALSE           reduce using rule 71 (var -> ID .)
    RBLOCK          reduce using rule 71 (var -> ID .)
    RBRACKET        reduce using rule 71 (var -> ID .)
    COMMA           reduce using rule 71 (var -> ID .)
    LBRACKET        shift and go to state 106
    LPAREN          shift and go to state 107

  ! LPAREN          [ reduce using rule 71 (var -> ID .) ]


state 58

    (73) simple_expression -> additive_expression . relop additive_expression
    (74) simple_expression -> additive_expression .
    (81) additive_expression -> additive_expression . addop term
    (75) relop -> . LESS
    (76) relop -> . LESSEQUAL
    (77) relop -> . GREATER
    (78) relop -> . GREATEREQUAL
    (79) relop -> . DEQUAL
    (80) relop -> . ISEQUAL
    (85) addop -> . PLUS
    (86) addop -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
    RPAREN          reduce using rule 74 (simple_expression -> additive_expression .)
    SEMICOLON       reduce using rule 74 (simple_expression -> additive_expression .)
    BREAK           reduce using rule 74 (simple_expression -> additive_expression .)
    ELSE            reduce using rule 74 (simple_expression -> additive_expression .)
    CLOSE_TAG       reduce using rule 74 (simple_expression -> additive_expression .)
    ID              reduce using rule 74 (simple_expression -> additive_expression .)
    AMPERSANT       reduce using rule 74 (simple_expression -> additive_expression .)
    FUNCTION        reduce using rule 74 (simple_expression -> additive_expression .)
    REQUIRE         reduce using rule 74 (simple_expression -> additive_expression .)
    CLASS           reduce using rule 74 (simple_expression -> additive_expression .)
    IF              reduce using rule 74 (simple_expression -> additive_expression .)
    SWITCH          reduce using rule 74 (simple_expression -> additive_expression .)
    CASE            reduce using rule 74 (simple_expression -> additive_expression .)
    DEFAULT         reduce using rule 74 (simple_expression -> additive_expression .)
    FOR             reduce using rule 74 (simple_expression -> additive_expression .)
    WHILE           reduce using rule 74 (simple_expression -> additive_expression .)
    ECHO            reduce using rule 74 (simple_expression -> additive_expression .)
    LBLOCK          reduce using rule 74 (simple_expression -> additive_expression .)
    RETURN          reduce using rule 74 (simple_expression -> additive_expression .)
    LPAREN          reduce using rule 74 (simple_expression -> additive_expression .)
    NUMBER          reduce using rule 74 (simple_expression -> additive_expression .)
    TRUE            reduce using rule 74 (simple_expression -> additive_expression .)
    FALSE           reduce using rule 74 (simple_expression -> additive_expression .)
    RBLOCK          reduce using rule 74 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 74 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 74 (simple_expression -> additive_expression .)
    LESS            shift and go to state 110
    LESSEQUAL       shift and go to state 111
    GREATER         shift and go to state 112
    GREATEREQUAL    shift and go to state 113
    DEQUAL          shift and go to state 114
    ISEQUAL         shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117

  ! PLUS            [ reduce using rule 74 (simple_expression -> additive_expression .) ]

    relop                          shift and go to state 108
    addop                          shift and go to state 109

state 59

    (88) term -> factor .

    MINUSMINUS      reduce using rule 88 (term -> factor .)
    PLUSPLUS        reduce using rule 88 (term -> factor .)
    TIMES           reduce using rule 88 (term -> factor .)
    DIVIDE          reduce using rule 88 (term -> factor .)
    LESS            reduce using rule 88 (term -> factor .)
    LESSEQUAL       reduce using rule 88 (term -> factor .)
    GREATER         reduce using rule 88 (term -> factor .)
    GREATEREQUAL    reduce using rule 88 (term -> factor .)
    DEQUAL          reduce using rule 88 (term -> factor .)
    ISEQUAL         reduce using rule 88 (term -> factor .)
    PLUS            reduce using rule 88 (term -> factor .)
    MINUS           reduce using rule 88 (term -> factor .)
    RPAREN          reduce using rule 88 (term -> factor .)
    SEMICOLON       reduce using rule 88 (term -> factor .)
    BREAK           reduce using rule 88 (term -> factor .)
    ELSE            reduce using rule 88 (term -> factor .)
    CLOSE_TAG       reduce using rule 88 (term -> factor .)
    ID              reduce using rule 88 (term -> factor .)
    AMPERSANT       reduce using rule 88 (term -> factor .)
    FUNCTION        reduce using rule 88 (term -> factor .)
    REQUIRE         reduce using rule 88 (term -> factor .)
    CLASS           reduce using rule 88 (term -> factor .)
    IF              reduce using rule 88 (term -> factor .)
    SWITCH          reduce using rule 88 (term -> factor .)
    CASE            reduce using rule 88 (term -> factor .)
    DEFAULT         reduce using rule 88 (term -> factor .)
    FOR             reduce using rule 88 (term -> factor .)
    WHILE           reduce using rule 88 (term -> factor .)
    ECHO            reduce using rule 88 (term -> factor .)
    LBLOCK          reduce using rule 88 (term -> factor .)
    RETURN          reduce using rule 88 (term -> factor .)
    LPAREN          reduce using rule 88 (term -> factor .)
    NUMBER          reduce using rule 88 (term -> factor .)
    TRUE            reduce using rule 88 (term -> factor .)
    FALSE           reduce using rule 88 (term -> factor .)
    RBLOCK          reduce using rule 88 (term -> factor .)
    RBRACKET        reduce using rule 88 (term -> factor .)
    COMMA           reduce using rule 88 (term -> factor .)


state 60

    (93) factor -> call .

    MINUSMINUS      reduce using rule 93 (factor -> call .)
    PLUSPLUS        reduce using rule 93 (factor -> call .)
    TIMES           reduce using rule 93 (factor -> call .)
    DIVIDE          reduce using rule 93 (factor -> call .)
    LESS            reduce using rule 93 (factor -> call .)
    LESSEQUAL       reduce using rule 93 (factor -> call .)
    GREATER         reduce using rule 93 (factor -> call .)
    GREATEREQUAL    reduce using rule 93 (factor -> call .)
    DEQUAL          reduce using rule 93 (factor -> call .)
    ISEQUAL         reduce using rule 93 (factor -> call .)
    PLUS            reduce using rule 93 (factor -> call .)
    MINUS           reduce using rule 93 (factor -> call .)
    RPAREN          reduce using rule 93 (factor -> call .)
    SEMICOLON       reduce using rule 93 (factor -> call .)
    BREAK           reduce using rule 93 (factor -> call .)
    ELSE            reduce using rule 93 (factor -> call .)
    CLOSE_TAG       reduce using rule 93 (factor -> call .)
    ID              reduce using rule 93 (factor -> call .)
    AMPERSANT       reduce using rule 93 (factor -> call .)
    FUNCTION        reduce using rule 93 (factor -> call .)
    REQUIRE         reduce using rule 93 (factor -> call .)
    CLASS           reduce using rule 93 (factor -> call .)
    IF              reduce using rule 93 (factor -> call .)
    SWITCH          reduce using rule 93 (factor -> call .)
    CASE            reduce using rule 93 (factor -> call .)
    DEFAULT         reduce using rule 93 (factor -> call .)
    FOR             reduce using rule 93 (factor -> call .)
    WHILE           reduce using rule 93 (factor -> call .)
    ECHO            reduce using rule 93 (factor -> call .)
    LBLOCK          reduce using rule 93 (factor -> call .)
    RETURN          reduce using rule 93 (factor -> call .)
    LPAREN          reduce using rule 93 (factor -> call .)
    NUMBER          reduce using rule 93 (factor -> call .)
    TRUE            reduce using rule 93 (factor -> call .)
    FALSE           reduce using rule 93 (factor -> call .)
    RBLOCK          reduce using rule 93 (factor -> call .)
    RBRACKET        reduce using rule 93 (factor -> call .)
    COMMA           reduce using rule 93 (factor -> call .)


state 61

    (94) factor -> NUMBER .

    MINUSMINUS      reduce using rule 94 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 94 (factor -> NUMBER .)
    TIMES           reduce using rule 94 (factor -> NUMBER .)
    DIVIDE          reduce using rule 94 (factor -> NUMBER .)
    LESS            reduce using rule 94 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 94 (factor -> NUMBER .)
    GREATER         reduce using rule 94 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 94 (factor -> NUMBER .)
    DEQUAL          reduce using rule 94 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 94 (factor -> NUMBER .)
    PLUS            reduce using rule 94 (factor -> NUMBER .)
    MINUS           reduce using rule 94 (factor -> NUMBER .)
    RPAREN          reduce using rule 94 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 94 (factor -> NUMBER .)
    BREAK           reduce using rule 94 (factor -> NUMBER .)
    ELSE            reduce using rule 94 (factor -> NUMBER .)
    CLOSE_TAG       reduce using rule 94 (factor -> NUMBER .)
    ID              reduce using rule 94 (factor -> NUMBER .)
    AMPERSANT       reduce using rule 94 (factor -> NUMBER .)
    FUNCTION        reduce using rule 94 (factor -> NUMBER .)
    REQUIRE         reduce using rule 94 (factor -> NUMBER .)
    CLASS           reduce using rule 94 (factor -> NUMBER .)
    IF              reduce using rule 94 (factor -> NUMBER .)
    SWITCH          reduce using rule 94 (factor -> NUMBER .)
    CASE            reduce using rule 94 (factor -> NUMBER .)
    DEFAULT         reduce using rule 94 (factor -> NUMBER .)
    FOR             reduce using rule 94 (factor -> NUMBER .)
    WHILE           reduce using rule 94 (factor -> NUMBER .)
    ECHO            reduce using rule 94 (factor -> NUMBER .)
    LBLOCK          reduce using rule 94 (factor -> NUMBER .)
    RETURN          reduce using rule 94 (factor -> NUMBER .)
    LPAREN          reduce using rule 94 (factor -> NUMBER .)
    NUMBER          reduce using rule 94 (factor -> NUMBER .)
    TRUE            reduce using rule 94 (factor -> NUMBER .)
    FALSE           reduce using rule 94 (factor -> NUMBER .)
    RBLOCK          reduce using rule 94 (factor -> NUMBER .)
    RBRACKET        reduce using rule 94 (factor -> NUMBER .)
    COMMA           reduce using rule 94 (factor -> NUMBER .)


state 62

    (95) factor -> boolean .

    MINUSMINUS      reduce using rule 95 (factor -> boolean .)
    PLUSPLUS        reduce using rule 95 (factor -> boolean .)
    TIMES           reduce using rule 95 (factor -> boolean .)
    DIVIDE          reduce using rule 95 (factor -> boolean .)
    LESS            reduce using rule 95 (factor -> boolean .)
    LESSEQUAL       reduce using rule 95 (factor -> boolean .)
    GREATER         reduce using rule 95 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 95 (factor -> boolean .)
    DEQUAL          reduce using rule 95 (factor -> boolean .)
    ISEQUAL         reduce using rule 95 (factor -> boolean .)
    PLUS            reduce using rule 95 (factor -> boolean .)
    MINUS           reduce using rule 95 (factor -> boolean .)
    RPAREN          reduce using rule 95 (factor -> boolean .)
    SEMICOLON       reduce using rule 95 (factor -> boolean .)
    BREAK           reduce using rule 95 (factor -> boolean .)
    ELSE            reduce using rule 95 (factor -> boolean .)
    CLOSE_TAG       reduce using rule 95 (factor -> boolean .)
    ID              reduce using rule 95 (factor -> boolean .)
    AMPERSANT       reduce using rule 95 (factor -> boolean .)
    FUNCTION        reduce using rule 95 (factor -> boolean .)
    REQUIRE         reduce using rule 95 (factor -> boolean .)
    CLASS           reduce using rule 95 (factor -> boolean .)
    IF              reduce using rule 95 (factor -> boolean .)
    SWITCH          reduce using rule 95 (factor -> boolean .)
    CASE            reduce using rule 95 (factor -> boolean .)
    DEFAULT         reduce using rule 95 (factor -> boolean .)
    FOR             reduce using rule 95 (factor -> boolean .)
    WHILE           reduce using rule 95 (factor -> boolean .)
    ECHO            reduce using rule 95 (factor -> boolean .)
    LBLOCK          reduce using rule 95 (factor -> boolean .)
    RETURN          reduce using rule 95 (factor -> boolean .)
    LPAREN          reduce using rule 95 (factor -> boolean .)
    NUMBER          reduce using rule 95 (factor -> boolean .)
    TRUE            reduce using rule 95 (factor -> boolean .)
    FALSE           reduce using rule 95 (factor -> boolean .)
    RBLOCK          reduce using rule 95 (factor -> boolean .)
    RBRACKET        reduce using rule 95 (factor -> boolean .)
    COMMA           reduce using rule 95 (factor -> boolean .)


state 63

    (59) selection_stmt -> SWITCH LPAREN var . RPAREN statement

    RPAREN          shift and go to state 118


state 64

    (71) var -> ID .
    (72) var -> ID . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 71 (var -> ID .)
    LBRACKET        shift and go to state 106


state 65

    (60) selection_stmt -> CASE NUMBER COLON . statement BREAK SEMICOLON
    (2) statement -> . expression
    (50) statement -> . expression_stmt
    (51) statement -> . compount_stmt
    (52) statement -> . selection_stmt
    (53) statement -> . iteration_stmt
    (54) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (55) expression_stmt -> . expression SEMICOLON
    (56) expression_stmt -> . SEMICOLON
    (45) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement
    (58) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (59) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (60) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (62) selection_stmt -> . print_stmt
    (63) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (64) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (65) iteration_stmt -> . print_stmt
    (66) return_stmt -> . RETURN SEMICOLON
    (67) return_stmt -> . RETURN expression SEMICOLON
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (13) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (14) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (15) print_stmt -> . empty
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (103) empty -> .
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 103 (empty -> .)
    BREAK           reduce using rule 103 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    statement                      shift and go to state 119
    expression                     shift and go to state 68
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    additive_expression            shift and go to state 58
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 66

    (61) selection_stmt -> DEFAULT COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 120


state 67

    (56) expression_stmt -> SEMICOLON .

    BREAK           reduce using rule 56 (expression_stmt -> SEMICOLON .)
    ELSE            reduce using rule 56 (expression_stmt -> SEMICOLON .)
    CLOSE_TAG       reduce using rule 56 (expression_stmt -> SEMICOLON .)
    ID              reduce using rule 56 (expression_stmt -> SEMICOLON .)
    AMPERSANT       reduce using rule 56 (expression_stmt -> SEMICOLON .)
    FUNCTION        reduce using rule 56 (expression_stmt -> SEMICOLON .)
    REQUIRE         reduce using rule 56 (expression_stmt -> SEMICOLON .)
    CLASS           reduce using rule 56 (expression_stmt -> SEMICOLON .)
    IF              reduce using rule 56 (expression_stmt -> SEMICOLON .)
    SWITCH          reduce using rule 56 (expression_stmt -> SEMICOLON .)
    CASE            reduce using rule 56 (expression_stmt -> SEMICOLON .)
    DEFAULT         reduce using rule 56 (expression_stmt -> SEMICOLON .)
    FOR             reduce using rule 56 (expression_stmt -> SEMICOLON .)
    WHILE           reduce using rule 56 (expression_stmt -> SEMICOLON .)
    ECHO            reduce using rule 56 (expression_stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 56 (expression_stmt -> SEMICOLON .)
    LBLOCK          reduce using rule 56 (expression_stmt -> SEMICOLON .)
    RETURN          reduce using rule 56 (expression_stmt -> SEMICOLON .)
    LPAREN          reduce using rule 56 (expression_stmt -> SEMICOLON .)
    NUMBER          reduce using rule 56 (expression_stmt -> SEMICOLON .)
    TRUE            reduce using rule 56 (expression_stmt -> SEMICOLON .)
    FALSE           reduce using rule 56 (expression_stmt -> SEMICOLON .)
    RBLOCK          reduce using rule 56 (expression_stmt -> SEMICOLON .)


state 68

    (2) statement -> expression .
    (3) expression -> expression . PLUS term
    (55) expression_stmt -> expression . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    BREAK           reduce using rule 2 (statement -> expression .)
    ELSE            reduce using rule 2 (statement -> expression .)
    CLOSE_TAG       reduce using rule 2 (statement -> expression .)
    ID              reduce using rule 2 (statement -> expression .)
    AMPERSANT       reduce using rule 2 (statement -> expression .)
    FUNCTION        reduce using rule 2 (statement -> expression .)
    REQUIRE         reduce using rule 2 (statement -> expression .)
    CLASS           reduce using rule 2 (statement -> expression .)
    IF              reduce using rule 2 (statement -> expression .)
    SWITCH          reduce using rule 2 (statement -> expression .)
    CASE            reduce using rule 2 (statement -> expression .)
    DEFAULT         reduce using rule 2 (statement -> expression .)
    FOR             reduce using rule 2 (statement -> expression .)
    WHILE           reduce using rule 2 (statement -> expression .)
    ECHO            reduce using rule 2 (statement -> expression .)
    LBLOCK          reduce using rule 2 (statement -> expression .)
    RETURN          reduce using rule 2 (statement -> expression .)
    LPAREN          reduce using rule 2 (statement -> expression .)
    NUMBER          reduce using rule 2 (statement -> expression .)
    TRUE            reduce using rule 2 (statement -> expression .)
    FALSE           reduce using rule 2 (statement -> expression .)
    RBLOCK          reduce using rule 2 (statement -> expression .)
    PLUS            shift and go to state 99
    SEMICOLON       shift and go to state 121

  ! SEMICOLON       [ reduce using rule 2 (statement -> expression .) ]


state 69

    (50) statement -> expression_stmt .

    BREAK           reduce using rule 50 (statement -> expression_stmt .)
    ELSE            reduce using rule 50 (statement -> expression_stmt .)
    CLOSE_TAG       reduce using rule 50 (statement -> expression_stmt .)
    ID              reduce using rule 50 (statement -> expression_stmt .)
    AMPERSANT       reduce using rule 50 (statement -> expression_stmt .)
    FUNCTION        reduce using rule 50 (statement -> expression_stmt .)
    REQUIRE         reduce using rule 50 (statement -> expression_stmt .)
    CLASS           reduce using rule 50 (statement -> expression_stmt .)
    IF              reduce using rule 50 (statement -> expression_stmt .)
    SWITCH          reduce using rule 50 (statement -> expression_stmt .)
    CASE            reduce using rule 50 (statement -> expression_stmt .)
    DEFAULT         reduce using rule 50 (statement -> expression_stmt .)
    FOR             reduce using rule 50 (statement -> expression_stmt .)
    WHILE           reduce using rule 50 (statement -> expression_stmt .)
    ECHO            reduce using rule 50 (statement -> expression_stmt .)
    SEMICOLON       reduce using rule 50 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 50 (statement -> expression_stmt .)
    RETURN          reduce using rule 50 (statement -> expression_stmt .)
    LPAREN          reduce using rule 50 (statement -> expression_stmt .)
    NUMBER          reduce using rule 50 (statement -> expression_stmt .)
    TRUE            reduce using rule 50 (statement -> expression_stmt .)
    FALSE           reduce using rule 50 (statement -> expression_stmt .)
    RBLOCK          reduce using rule 50 (statement -> expression_stmt .)


state 70

    (51) statement -> compount_stmt .

    BREAK           reduce using rule 51 (statement -> compount_stmt .)
    ELSE            reduce using rule 51 (statement -> compount_stmt .)
    CLOSE_TAG       reduce using rule 51 (statement -> compount_stmt .)
    ID              reduce using rule 51 (statement -> compount_stmt .)
    AMPERSANT       reduce using rule 51 (statement -> compount_stmt .)
    FUNCTION        reduce using rule 51 (statement -> compount_stmt .)
    REQUIRE         reduce using rule 51 (statement -> compount_stmt .)
    CLASS           reduce using rule 51 (statement -> compount_stmt .)
    IF              reduce using rule 51 (statement -> compount_stmt .)
    SWITCH          reduce using rule 51 (statement -> compount_stmt .)
    CASE            reduce using rule 51 (statement -> compount_stmt .)
    DEFAULT         reduce using rule 51 (statement -> compount_stmt .)
    FOR             reduce using rule 51 (statement -> compount_stmt .)
    WHILE           reduce using rule 51 (statement -> compount_stmt .)
    ECHO            reduce using rule 51 (statement -> compount_stmt .)
    SEMICOLON       reduce using rule 51 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 51 (statement -> compount_stmt .)
    RETURN          reduce using rule 51 (statement -> compount_stmt .)
    LPAREN          reduce using rule 51 (statement -> compount_stmt .)
    NUMBER          reduce using rule 51 (statement -> compount_stmt .)
    TRUE            reduce using rule 51 (statement -> compount_stmt .)
    FALSE           reduce using rule 51 (statement -> compount_stmt .)
    RBLOCK          reduce using rule 51 (statement -> compount_stmt .)


state 71

    (52) statement -> selection_stmt .

    BREAK           reduce using rule 52 (statement -> selection_stmt .)
    ELSE            reduce using rule 52 (statement -> selection_stmt .)
    CLOSE_TAG       reduce using rule 52 (statement -> selection_stmt .)
    ID              reduce using rule 52 (statement -> selection_stmt .)
    AMPERSANT       reduce using rule 52 (statement -> selection_stmt .)
    FUNCTION        reduce using rule 52 (statement -> selection_stmt .)
    REQUIRE         reduce using rule 52 (statement -> selection_stmt .)
    CLASS           reduce using rule 52 (statement -> selection_stmt .)
    IF              reduce using rule 52 (statement -> selection_stmt .)
    SWITCH          reduce using rule 52 (statement -> selection_stmt .)
    CASE            reduce using rule 52 (statement -> selection_stmt .)
    DEFAULT         reduce using rule 52 (statement -> selection_stmt .)
    FOR             reduce using rule 52 (statement -> selection_stmt .)
    WHILE           reduce using rule 52 (statement -> selection_stmt .)
    ECHO            reduce using rule 52 (statement -> selection_stmt .)
    SEMICOLON       reduce using rule 52 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 52 (statement -> selection_stmt .)
    RETURN          reduce using rule 52 (statement -> selection_stmt .)
    LPAREN          reduce using rule 52 (statement -> selection_stmt .)
    NUMBER          reduce using rule 52 (statement -> selection_stmt .)
    TRUE            reduce using rule 52 (statement -> selection_stmt .)
    FALSE           reduce using rule 52 (statement -> selection_stmt .)
    RBLOCK          reduce using rule 52 (statement -> selection_stmt .)


state 72

    (53) statement -> iteration_stmt .

    BREAK           reduce using rule 53 (statement -> iteration_stmt .)
    ELSE            reduce using rule 53 (statement -> iteration_stmt .)
    CLOSE_TAG       reduce using rule 53 (statement -> iteration_stmt .)
    ID              reduce using rule 53 (statement -> iteration_stmt .)
    AMPERSANT       reduce using rule 53 (statement -> iteration_stmt .)
    FUNCTION        reduce using rule 53 (statement -> iteration_stmt .)
    REQUIRE         reduce using rule 53 (statement -> iteration_stmt .)
    CLASS           reduce using rule 53 (statement -> iteration_stmt .)
    IF              reduce using rule 53 (statement -> iteration_stmt .)
    SWITCH          reduce using rule 53 (statement -> iteration_stmt .)
    CASE            reduce using rule 53 (statement -> iteration_stmt .)
    DEFAULT         reduce using rule 53 (statement -> iteration_stmt .)
    FOR             reduce using rule 53 (statement -> iteration_stmt .)
    WHILE           reduce using rule 53 (statement -> iteration_stmt .)
    ECHO            reduce using rule 53 (statement -> iteration_stmt .)
    SEMICOLON       reduce using rule 53 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 53 (statement -> iteration_stmt .)
    RETURN          reduce using rule 53 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 53 (statement -> iteration_stmt .)
    NUMBER          reduce using rule 53 (statement -> iteration_stmt .)
    TRUE            reduce using rule 53 (statement -> iteration_stmt .)
    FALSE           reduce using rule 53 (statement -> iteration_stmt .)
    RBLOCK          reduce using rule 53 (statement -> iteration_stmt .)


state 73

    (54) statement -> return_stmt .

    BREAK           reduce using rule 54 (statement -> return_stmt .)
    ELSE            reduce using rule 54 (statement -> return_stmt .)
    CLOSE_TAG       reduce using rule 54 (statement -> return_stmt .)
    ID              reduce using rule 54 (statement -> return_stmt .)
    AMPERSANT       reduce using rule 54 (statement -> return_stmt .)
    FUNCTION        reduce using rule 54 (statement -> return_stmt .)
    REQUIRE         reduce using rule 54 (statement -> return_stmt .)
    CLASS           reduce using rule 54 (statement -> return_stmt .)
    IF              reduce using rule 54 (statement -> return_stmt .)
    SWITCH          reduce using rule 54 (statement -> return_stmt .)
    CASE            reduce using rule 54 (statement -> return_stmt .)
    DEFAULT         reduce using rule 54 (statement -> return_stmt .)
    FOR             reduce using rule 54 (statement -> return_stmt .)
    WHILE           reduce using rule 54 (statement -> return_stmt .)
    ECHO            reduce using rule 54 (statement -> return_stmt .)
    SEMICOLON       reduce using rule 54 (statement -> return_stmt .)
    LBLOCK          reduce using rule 54 (statement -> return_stmt .)
    RETURN          reduce using rule 54 (statement -> return_stmt .)
    LPAREN          reduce using rule 54 (statement -> return_stmt .)
    NUMBER          reduce using rule 54 (statement -> return_stmt .)
    TRUE            reduce using rule 54 (statement -> return_stmt .)
    FALSE           reduce using rule 54 (statement -> return_stmt .)
    RBLOCK          reduce using rule 54 (statement -> return_stmt .)


state 74

    (45) compount_stmt -> LBLOCK . print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (13) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (14) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (15) print_stmt -> . empty
    (103) empty -> .

    ECHO            reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    AMPERSANT       reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)
    LBLOCK          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    SWITCH          reduce using rule 103 (empty -> .)
    CASE            reduce using rule 103 (empty -> .)
    DEFAULT         reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    NUMBER          reduce using rule 103 (empty -> .)
    TRUE            reduce using rule 103 (empty -> .)
    FALSE           reduce using rule 103 (empty -> .)
    RBLOCK          reduce using rule 103 (empty -> .)

    print_stmt                     shift and go to state 122
    empty                          shift and go to state 17

state 75

    (62) selection_stmt -> print_stmt .
    (65) iteration_stmt -> print_stmt .
    (13) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (14) print_stmt -> print_stmt . ECHO ID SEMICOLON

  ! reduce/reduce conflict for BREAK resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ELSE resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ECHO resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LBLOCK resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for RETURN resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LPAREN resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for NUMBER resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for TRUE resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FALSE resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 62 (selection_stmt -> print_stmt .)
  ! shift/reduce conflict for ECHO resolved as shift
    BREAK           reduce using rule 62 (selection_stmt -> print_stmt .)
    ELSE            reduce using rule 62 (selection_stmt -> print_stmt .)
    CLOSE_TAG       reduce using rule 62 (selection_stmt -> print_stmt .)
    ID              reduce using rule 62 (selection_stmt -> print_stmt .)
    AMPERSANT       reduce using rule 62 (selection_stmt -> print_stmt .)
    FUNCTION        reduce using rule 62 (selection_stmt -> print_stmt .)
    REQUIRE         reduce using rule 62 (selection_stmt -> print_stmt .)
    CLASS           reduce using rule 62 (selection_stmt -> print_stmt .)
    IF              reduce using rule 62 (selection_stmt -> print_stmt .)
    SWITCH          reduce using rule 62 (selection_stmt -> print_stmt .)
    CASE            reduce using rule 62 (selection_stmt -> print_stmt .)
    DEFAULT         reduce using rule 62 (selection_stmt -> print_stmt .)
    FOR             reduce using rule 62 (selection_stmt -> print_stmt .)
    WHILE           reduce using rule 62 (selection_stmt -> print_stmt .)
    SEMICOLON       reduce using rule 62 (selection_stmt -> print_stmt .)
    LBLOCK          reduce using rule 62 (selection_stmt -> print_stmt .)
    RETURN          reduce using rule 62 (selection_stmt -> print_stmt .)
    LPAREN          reduce using rule 62 (selection_stmt -> print_stmt .)
    NUMBER          reduce using rule 62 (selection_stmt -> print_stmt .)
    TRUE            reduce using rule 62 (selection_stmt -> print_stmt .)
    FALSE           reduce using rule 62 (selection_stmt -> print_stmt .)
    RBLOCK          reduce using rule 62 (selection_stmt -> print_stmt .)
    ECHO            shift and go to state 26

  ! ECHO            [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! BREAK           [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! ELSE            [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! CLOSE_TAG       [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! AMPERSANT       [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! FUNCTION        [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! REQUIRE         [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! CLASS           [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! SEMICOLON       [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! LBLOCK          [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! RETURN          [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! LPAREN          [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! NUMBER          [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! TRUE            [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! FALSE           [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! RBLOCK          [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]


state 76

    (66) return_stmt -> RETURN . SEMICOLON
    (67) return_stmt -> RETURN . expression SEMICOLON
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    SEMICOLON       shift and go to state 123
    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 124
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 77

    (63) iteration_stmt -> FOR LPAREN var_declaration . SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    SEMICOLON       shift and go to state 125


state 78

    (64) iteration_stmt -> WHILE LPAREN expression . RPAREN statement
    (3) expression -> expression . PLUS term

    RPAREN          shift and go to state 126
    PLUS            shift and go to state 99


state 79

    (13) print_stmt -> print_stmt ECHO STRING SEMICOLON .

    ECHO            reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    CLOSE_TAG       reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    ID              reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    AMPERSANT       reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    FUNCTION        reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    REQUIRE         reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    CLASS           reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    IF              reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    SWITCH          reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    CASE            reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    DEFAULT         reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    FOR             reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    WHILE           reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    BREAK           reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    SEMICOLON       reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    LBLOCK          reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    RETURN          reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    LPAREN          reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    NUMBER          reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    TRUE            reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    FALSE           reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    RBLOCK          reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    ELSE            reduce using rule 13 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)


state 80

    (14) print_stmt -> print_stmt ECHO ID SEMICOLON .

    ECHO            reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    CLOSE_TAG       reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    ID              reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    AMPERSANT       reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    FUNCTION        reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    REQUIRE         reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    CLASS           reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    IF              reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    SWITCH          reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    CASE            reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    DEFAULT         reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    FOR             reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    WHILE           reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    BREAK           reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    SEMICOLON       reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    LBLOCK          reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    RETURN          reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    LPAREN          reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    NUMBER          reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    TRUE            reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    FALSE           reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    RBLOCK          reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    ELSE            reduce using rule 14 (print_stmt -> print_stmt ECHO ID SEMICOLON .)


state 81

    (34) var_declaration -> ID EQUAL ID SEMICOLON . var_declaration
    (35) var_declaration -> ID EQUAL ID SEMICOLON .
    (28) var_declaration -> . ID SEMICOLON var_declaration
    (29) var_declaration -> . ID SEMICOLON
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (31) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (33) var_declaration -> . ID EQUAL boolean SEMICOLON
    (34) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (35) var_declaration -> . ID EQUAL ID SEMICOLON
    (36) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (37) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    FUNCTION        reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    REQUIRE         reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    CLASS           reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    IF              reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    SWITCH          reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    CASE            reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    DEFAULT         reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    FOR             reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    WHILE           reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    ECHO            reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    SEMICOLON       reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    RBLOCK          reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    PRIVATE         reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    PUBLIC          reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    PROTECTED       reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    LBLOCK          reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    RETURN          reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    LPAREN          reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    NUMBER          reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    TRUE            reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    FALSE           reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 35 (var_declaration -> ID EQUAL ID SEMICOLON .) ]

    var_declaration                shift and go to state 127

state 82

    (30) var_declaration -> ID EQUAL NUMBER SEMICOLON . var_declaration
    (31) var_declaration -> ID EQUAL NUMBER SEMICOLON .
    (28) var_declaration -> . ID SEMICOLON var_declaration
    (29) var_declaration -> . ID SEMICOLON
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (31) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (33) var_declaration -> . ID EQUAL boolean SEMICOLON
    (34) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (35) var_declaration -> . ID EQUAL ID SEMICOLON
    (36) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (37) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    REQUIRE         reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    CLASS           reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    IF              reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    SWITCH          reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    CASE            reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    DEFAULT         reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    FOR             reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    WHILE           reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    ECHO            reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    SEMICOLON       reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    PRIVATE         reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    PUBLIC          reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    PROTECTED       reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    LBLOCK          reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    RETURN          reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    LPAREN          reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    NUMBER          reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    TRUE            reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    FALSE           reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 31 (var_declaration -> ID EQUAL NUMBER SEMICOLON .) ]

    var_declaration                shift and go to state 128

state 83

    (32) var_declaration -> ID EQUAL boolean SEMICOLON . var_declaration
    (33) var_declaration -> ID EQUAL boolean SEMICOLON .
    (28) var_declaration -> . ID SEMICOLON var_declaration
    (29) var_declaration -> . ID SEMICOLON
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (31) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (33) var_declaration -> . ID EQUAL boolean SEMICOLON
    (34) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (35) var_declaration -> . ID EQUAL ID SEMICOLON
    (36) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (37) var_declaration -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    CLOSE_TAG       reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    FUNCTION        reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    REQUIRE         reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    CLASS           reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    IF              reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    SWITCH          reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    CASE            reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    DEFAULT         reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    FOR             reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    WHILE           reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    ECHO            reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    SEMICOLON       reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    RBLOCK          reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    PRIVATE         reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    PUBLIC          reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    PROTECTED       reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    LBLOCK          reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    RETURN          reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    LPAREN          reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    NUMBER          reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    TRUE            reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    FALSE           reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .)
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

  ! ID              [ reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 33 (var_declaration -> ID EQUAL boolean SEMICOLON .) ]

    var_declaration                shift and go to state 129

state 84

    (36) var_declaration -> AMPERSANT ID SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    ID              reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    CLASS           reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    IF              reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    SWITCH          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    CASE            reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    FOR             reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    WHILE           reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    ECHO            reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    RETURN          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    LPAREN          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    NUMBER          reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    TRUE            reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)
    FALSE           reduce using rule 36 (var_declaration -> AMPERSANT ID SEMICOLON var_declaration .)


state 85

    (38) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 130


state 86

    (39) params -> param_list .
    (41) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 39 (params -> param_list .)
    COMMA           shift and go to state 131


state 87

    (40) params -> empty .

    RPAREN          reduce using rule 40 (params -> empty .)


state 88

    (42) param_list -> param .

    COMMA           reduce using rule 42 (param_list -> param .)
    RPAREN          reduce using rule 42 (param_list -> param .)


state 89

    (43) param -> ID .
    (44) param -> ID . LBRACKET RBRACKET

    COMMA           reduce using rule 43 (param -> ID .)
    RPAREN          reduce using rule 43 (param -> ID .)
    LBRACKET        shift and go to state 132


state 90

    (16) header_declaration -> REQUIRE LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 133


state 91

    (18) class_stmt -> LBLOCK attributes . methods RBLOCK
    (20) class_stmt -> LBLOCK attributes . RBLOCK
    (21) attributes -> attributes . scope var_declaration
    (23) methods -> . methods scope fun_declaration
    (24) methods -> . scope fun_declaration
    (25) scope -> . PRIVATE
    (26) scope -> . PUBLIC
    (27) scope -> . PROTECTED

    RBLOCK          shift and go to state 135
    PRIVATE         shift and go to state 94
    PUBLIC          shift and go to state 95
    PROTECTED       shift and go to state 96

    methods                        shift and go to state 134
    scope                          shift and go to state 136

state 92

    (19) class_stmt -> LBLOCK empty . RBLOCK

    RBLOCK          shift and go to state 137


state 93

    (22) attributes -> scope . var_declaration
    (28) var_declaration -> . ID SEMICOLON var_declaration
    (29) var_declaration -> . ID SEMICOLON
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (31) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (33) var_declaration -> . ID EQUAL boolean SEMICOLON
    (34) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (35) var_declaration -> . ID EQUAL ID SEMICOLON
    (36) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (37) var_declaration -> . AMPERSANT ID SEMICOLON

    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13

    var_declaration                shift and go to state 138

state 94

    (25) scope -> PRIVATE .

    ID              reduce using rule 25 (scope -> PRIVATE .)
    AMPERSANT       reduce using rule 25 (scope -> PRIVATE .)
    FUNCTION        reduce using rule 25 (scope -> PRIVATE .)


state 95

    (26) scope -> PUBLIC .

    ID              reduce using rule 26 (scope -> PUBLIC .)
    AMPERSANT       reduce using rule 26 (scope -> PUBLIC .)
    FUNCTION        reduce using rule 26 (scope -> PUBLIC .)


state 96

    (27) scope -> PROTECTED .

    ID              reduce using rule 27 (scope -> PROTECTED .)
    AMPERSANT       reduce using rule 27 (scope -> PROTECTED .)
    FUNCTION        reduce using rule 27 (scope -> PROTECTED .)


state 97

    (91) factor -> LPAREN expression . RPAREN
    (3) expression -> expression . PLUS term

    RPAREN          shift and go to state 139
    PLUS            shift and go to state 99


state 98

    (57) selection_stmt -> IF LPAREN expression RPAREN . statement
    (58) selection_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (2) statement -> . expression
    (50) statement -> . expression_stmt
    (51) statement -> . compount_stmt
    (52) statement -> . selection_stmt
    (53) statement -> . iteration_stmt
    (54) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (55) expression_stmt -> . expression SEMICOLON
    (56) expression_stmt -> . SEMICOLON
    (45) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement
    (58) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (59) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (60) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (62) selection_stmt -> . print_stmt
    (63) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (64) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (65) iteration_stmt -> . print_stmt
    (66) return_stmt -> . RETURN SEMICOLON
    (67) return_stmt -> . RETURN expression SEMICOLON
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (13) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (14) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (15) print_stmt -> . empty
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (103) empty -> .
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 103 (empty -> .)
    ELSE            reduce using rule 103 (empty -> .)
    CLOSE_TAG       reduce using rule 103 (empty -> .)
    AMPERSANT       reduce using rule 103 (empty -> .)
    FUNCTION        reduce using rule 103 (empty -> .)
    REQUIRE         reduce using rule 103 (empty -> .)
    CLASS           reduce using rule 103 (empty -> .)
    BREAK           reduce using rule 103 (empty -> .)
    RBLOCK          reduce using rule 103 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! SWITCH          [ reduce using rule 103 (empty -> .) ]
  ! CASE            [ reduce using rule 103 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 103 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! LPAREN          [ reduce using rule 103 (empty -> .) ]
  ! NUMBER          [ reduce using rule 103 (empty -> .) ]
  ! TRUE            [ reduce using rule 103 (empty -> .) ]
  ! FALSE           [ reduce using rule 103 (empty -> .) ]

    expression                     shift and go to state 68
    statement                      shift and go to state 140
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    additive_expression            shift and go to state 58
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 99

    (3) expression -> expression PLUS . term
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    term                           shift and go to state 141
    factor                         shift and go to state 59
    var                            shift and go to state 142
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 100

    (83) additive_expression -> term MINUSMINUS .

    LESS            reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    LESSEQUAL       reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    GREATER         reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    GREATEREQUAL    reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    DEQUAL          reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    ISEQUAL         reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    PLUS            reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    MINUS           reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    RPAREN          reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    SEMICOLON       reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    BREAK           reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    ELSE            reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    CLOSE_TAG       reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    ID              reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    AMPERSANT       reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    FUNCTION        reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    REQUIRE         reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    CLASS           reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    IF              reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    SWITCH          reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    CASE            reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    DEFAULT         reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    FOR             reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    WHILE           reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    ECHO            reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    LBLOCK          reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    RETURN          reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    LPAREN          reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    NUMBER          reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    TRUE            reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    FALSE           reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    RBLOCK          reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    RBRACKET        reduce using rule 83 (additive_expression -> term MINUSMINUS .)
    COMMA           reduce using rule 83 (additive_expression -> term MINUSMINUS .)


state 101

    (84) additive_expression -> term PLUSPLUS .

    LESS            reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    LESSEQUAL       reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    GREATER         reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    GREATEREQUAL    reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    DEQUAL          reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    ISEQUAL         reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    PLUS            reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    MINUS           reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    RPAREN          reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    SEMICOLON       reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    BREAK           reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    ELSE            reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    CLOSE_TAG       reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    ID              reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    AMPERSANT       reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    FUNCTION        reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    REQUIRE         reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    CLASS           reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    IF              reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    SWITCH          reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    CASE            reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    DEFAULT         reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    FOR             reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    WHILE           reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    ECHO            reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    LBLOCK          reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    RETURN          reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    LPAREN          reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    NUMBER          reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    TRUE            reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    FALSE           reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    RBLOCK          reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    RBRACKET        reduce using rule 84 (additive_expression -> term PLUSPLUS .)
    COMMA           reduce using rule 84 (additive_expression -> term PLUSPLUS .)


state 102

    (87) term -> term mulop . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    factor                         shift and go to state 143
    var                            shift and go to state 142
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 103

    (89) mulop -> TIMES .

    LPAREN          reduce using rule 89 (mulop -> TIMES .)
    NUMBER          reduce using rule 89 (mulop -> TIMES .)
    ID              reduce using rule 89 (mulop -> TIMES .)
    TRUE            reduce using rule 89 (mulop -> TIMES .)
    FALSE           reduce using rule 89 (mulop -> TIMES .)


state 104

    (90) mulop -> DIVIDE .

    LPAREN          reduce using rule 90 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 90 (mulop -> DIVIDE .)
    ID              reduce using rule 90 (mulop -> DIVIDE .)
    TRUE            reduce using rule 90 (mulop -> DIVIDE .)
    FALSE           reduce using rule 90 (mulop -> DIVIDE .)


state 105

    (68) expression -> var EQUAL . expression
    (70) expression -> var EQUAL . AMPERSANT ID
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    AMPERSANT       shift and go to state 145
    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    var                            shift and go to state 55
    expression                     shift and go to state 144
    term                           shift and go to state 54
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 106

    (72) var -> ID LBRACKET . expression RBRACKET
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 146
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 107

    (96) call -> ID LPAREN . args RPAREN
    (97) args -> . args_list
    (98) args -> . empty
    (99) args_list -> . args_list COMMA expression
    (100) args_list -> . expression
    (103) empty -> .
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    RPAREN          reduce using rule 103 (empty -> .)
    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    args                           shift and go to state 147
    args_list                      shift and go to state 148
    empty                          shift and go to state 149
    expression                     shift and go to state 150
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 108

    (73) simple_expression -> additive_expression relop . additive_expression
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    additive_expression            shift and go to state 151
    term                           shift and go to state 54
    factor                         shift and go to state 59
    var                            shift and go to state 142
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 109

    (81) additive_expression -> additive_expression addop . term
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    term                           shift and go to state 152
    factor                         shift and go to state 59
    var                            shift and go to state 142
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 110

    (75) relop -> LESS .

    LPAREN          reduce using rule 75 (relop -> LESS .)
    NUMBER          reduce using rule 75 (relop -> LESS .)
    ID              reduce using rule 75 (relop -> LESS .)
    TRUE            reduce using rule 75 (relop -> LESS .)
    FALSE           reduce using rule 75 (relop -> LESS .)


state 111

    (76) relop -> LESSEQUAL .

    LPAREN          reduce using rule 76 (relop -> LESSEQUAL .)
    NUMBER          reduce using rule 76 (relop -> LESSEQUAL .)
    ID              reduce using rule 76 (relop -> LESSEQUAL .)
    TRUE            reduce using rule 76 (relop -> LESSEQUAL .)
    FALSE           reduce using rule 76 (relop -> LESSEQUAL .)


state 112

    (77) relop -> GREATER .

    LPAREN          reduce using rule 77 (relop -> GREATER .)
    NUMBER          reduce using rule 77 (relop -> GREATER .)
    ID              reduce using rule 77 (relop -> GREATER .)
    TRUE            reduce using rule 77 (relop -> GREATER .)
    FALSE           reduce using rule 77 (relop -> GREATER .)


state 113

    (78) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 78 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 78 (relop -> GREATEREQUAL .)
    ID              reduce using rule 78 (relop -> GREATEREQUAL .)
    TRUE            reduce using rule 78 (relop -> GREATEREQUAL .)
    FALSE           reduce using rule 78 (relop -> GREATEREQUAL .)


state 114

    (79) relop -> DEQUAL .

    LPAREN          reduce using rule 79 (relop -> DEQUAL .)
    NUMBER          reduce using rule 79 (relop -> DEQUAL .)
    ID              reduce using rule 79 (relop -> DEQUAL .)
    TRUE            reduce using rule 79 (relop -> DEQUAL .)
    FALSE           reduce using rule 79 (relop -> DEQUAL .)


state 115

    (80) relop -> ISEQUAL .

    LPAREN          reduce using rule 80 (relop -> ISEQUAL .)
    NUMBER          reduce using rule 80 (relop -> ISEQUAL .)
    ID              reduce using rule 80 (relop -> ISEQUAL .)
    TRUE            reduce using rule 80 (relop -> ISEQUAL .)
    FALSE           reduce using rule 80 (relop -> ISEQUAL .)


state 116

    (85) addop -> PLUS .

    LPAREN          reduce using rule 85 (addop -> PLUS .)
    NUMBER          reduce using rule 85 (addop -> PLUS .)
    ID              reduce using rule 85 (addop -> PLUS .)
    TRUE            reduce using rule 85 (addop -> PLUS .)
    FALSE           reduce using rule 85 (addop -> PLUS .)


state 117

    (86) addop -> MINUS .

    LPAREN          reduce using rule 86 (addop -> MINUS .)
    NUMBER          reduce using rule 86 (addop -> MINUS .)
    ID              reduce using rule 86 (addop -> MINUS .)
    TRUE            reduce using rule 86 (addop -> MINUS .)
    FALSE           reduce using rule 86 (addop -> MINUS .)


state 118

    (59) selection_stmt -> SWITCH LPAREN var RPAREN . statement
    (2) statement -> . expression
    (50) statement -> . expression_stmt
    (51) statement -> . compount_stmt
    (52) statement -> . selection_stmt
    (53) statement -> . iteration_stmt
    (54) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (55) expression_stmt -> . expression SEMICOLON
    (56) expression_stmt -> . SEMICOLON
    (45) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement
    (58) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (59) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (60) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (62) selection_stmt -> . print_stmt
    (63) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (64) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (65) iteration_stmt -> . print_stmt
    (66) return_stmt -> . RETURN SEMICOLON
    (67) return_stmt -> . RETURN expression SEMICOLON
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (13) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (14) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (15) print_stmt -> . empty
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (103) empty -> .
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 103 (empty -> .)
    ELSE            reduce using rule 103 (empty -> .)
    CLOSE_TAG       reduce using rule 103 (empty -> .)
    AMPERSANT       reduce using rule 103 (empty -> .)
    FUNCTION        reduce using rule 103 (empty -> .)
    REQUIRE         reduce using rule 103 (empty -> .)
    CLASS           reduce using rule 103 (empty -> .)
    BREAK           reduce using rule 103 (empty -> .)
    RBLOCK          reduce using rule 103 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! SWITCH          [ reduce using rule 103 (empty -> .) ]
  ! CASE            [ reduce using rule 103 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 103 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! LPAREN          [ reduce using rule 103 (empty -> .) ]
  ! NUMBER          [ reduce using rule 103 (empty -> .) ]
  ! TRUE            [ reduce using rule 103 (empty -> .) ]
  ! FALSE           [ reduce using rule 103 (empty -> .) ]

    var                            shift and go to state 55
    statement                      shift and go to state 153
    expression                     shift and go to state 68
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    additive_expression            shift and go to state 58
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 119

    (60) selection_stmt -> CASE NUMBER COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 154


state 120

    (61) selection_stmt -> DEFAULT COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 155


state 121

    (55) expression_stmt -> expression SEMICOLON .

    BREAK           reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    ELSE            reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    CLOSE_TAG       reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    ID              reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    AMPERSANT       reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    FUNCTION        reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    REQUIRE         reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    CLASS           reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    SWITCH          reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    CASE            reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    DEFAULT         reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    FOR             reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    ECHO            reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    LBLOCK          reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    TRUE            reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    FALSE           reduce using rule 55 (expression_stmt -> expression SEMICOLON .)
    RBLOCK          reduce using rule 55 (expression_stmt -> expression SEMICOLON .)


state 122

    (45) compount_stmt -> LBLOCK print_stmt . local_declarations print_stmt statement_list print_stmt RBLOCK
    (13) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (14) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (46) local_declarations -> . local_declarations var_declaration
    (47) local_declarations -> . empty
    (103) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 26
    ID              reduce using rule 103 (empty -> .)
    AMPERSANT       reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)
    LBLOCK          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    SWITCH          reduce using rule 103 (empty -> .)
    CASE            reduce using rule 103 (empty -> .)
    DEFAULT         reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    NUMBER          reduce using rule 103 (empty -> .)
    TRUE            reduce using rule 103 (empty -> .)
    FALSE           reduce using rule 103 (empty -> .)
    RBLOCK          reduce using rule 103 (empty -> .)

  ! ECHO            [ reduce using rule 103 (empty -> .) ]

    local_declarations             shift and go to state 156
    empty                          shift and go to state 157

state 123

    (66) return_stmt -> RETURN SEMICOLON .

    BREAK           reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    CLOSE_TAG       reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    AMPERSANT       reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    REQUIRE         reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    CLASS           reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    CASE            reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    ECHO            reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    LBLOCK          reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    TRUE            reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    FALSE           reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)
    RBLOCK          reduce using rule 66 (return_stmt -> RETURN SEMICOLON .)


state 124

    (67) return_stmt -> RETURN expression . SEMICOLON
    (3) expression -> expression . PLUS term

    SEMICOLON       shift and go to state 158
    PLUS            shift and go to state 99


state 125

    (63) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON . expression SEMICOLON additive_expression RPAREN statement
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 159
    additive_expression            shift and go to state 58
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 126

    (64) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (2) statement -> . expression
    (50) statement -> . expression_stmt
    (51) statement -> . compount_stmt
    (52) statement -> . selection_stmt
    (53) statement -> . iteration_stmt
    (54) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (55) expression_stmt -> . expression SEMICOLON
    (56) expression_stmt -> . SEMICOLON
    (45) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement
    (58) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (59) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (60) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (62) selection_stmt -> . print_stmt
    (63) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (64) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (65) iteration_stmt -> . print_stmt
    (66) return_stmt -> . RETURN SEMICOLON
    (67) return_stmt -> . RETURN expression SEMICOLON
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (13) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (14) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (15) print_stmt -> . empty
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (103) empty -> .
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 103 (empty -> .)
    ELSE            reduce using rule 103 (empty -> .)
    CLOSE_TAG       reduce using rule 103 (empty -> .)
    AMPERSANT       reduce using rule 103 (empty -> .)
    FUNCTION        reduce using rule 103 (empty -> .)
    REQUIRE         reduce using rule 103 (empty -> .)
    CLASS           reduce using rule 103 (empty -> .)
    BREAK           reduce using rule 103 (empty -> .)
    RBLOCK          reduce using rule 103 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! SWITCH          [ reduce using rule 103 (empty -> .) ]
  ! CASE            [ reduce using rule 103 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 103 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! LPAREN          [ reduce using rule 103 (empty -> .) ]
  ! NUMBER          [ reduce using rule 103 (empty -> .) ]
  ! TRUE            [ reduce using rule 103 (empty -> .) ]
  ! FALSE           [ reduce using rule 103 (empty -> .) ]

    expression                     shift and go to state 68
    statement                      shift and go to state 160
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    additive_expression            shift and go to state 58
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 127

    (34) var_declaration -> ID EQUAL ID SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    ID              reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    CLASS           reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    IF              reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    SWITCH          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    CASE            reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    FOR             reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    WHILE           reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    ECHO            reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    RETURN          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    LPAREN          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    NUMBER          reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    TRUE            reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)
    FALSE           reduce using rule 34 (var_declaration -> ID EQUAL ID SEMICOLON var_declaration .)


state 128

    (30) var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    ID              reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    CLASS           reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    IF              reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    SWITCH          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    CASE            reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    FOR             reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    WHILE           reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    ECHO            reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    RETURN          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    LPAREN          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    NUMBER          reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    TRUE            reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)
    FALSE           reduce using rule 30 (var_declaration -> ID EQUAL NUMBER SEMICOLON var_declaration .)


state 129

    (32) var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .

    CLOSE_TAG       reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    ID              reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    AMPERSANT       reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    REQUIRE         reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    CLASS           reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    IF              reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    SWITCH          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    CASE            reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    DEFAULT         reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    FOR             reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    WHILE           reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    ECHO            reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    SEMICOLON       reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    RBLOCK          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    PRIVATE         reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    PUBLIC          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    PROTECTED       reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    LBLOCK          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    RETURN          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    LPAREN          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    NUMBER          reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    TRUE            reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)
    FALSE           reduce using rule 32 (var_declaration -> ID EQUAL boolean SEMICOLON var_declaration .)


state 130

    (38) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN . compount_stmt
    (45) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK

    LBLOCK          shift and go to state 74

    compount_stmt                  shift and go to state 161

state 131

    (41) param_list -> param_list COMMA . param
    (43) param -> . ID
    (44) param -> . ID LBRACKET RBRACKET

    ID              shift and go to state 89

    param                          shift and go to state 162

state 132

    (44) param -> ID LBRACKET . RBRACKET

    RBRACKET        shift and go to state 163


state 133

    (16) header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .

    CLOSE_TAG       reduce using rule 16 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    ID              reduce using rule 16 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    AMPERSANT       reduce using rule 16 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 16 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    REQUIRE         reduce using rule 16 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    CLASS           reduce using rule 16 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 16 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    SWITCH          reduce using rule 16 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    CASE            reduce using rule 16 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 16 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 16 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 16 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    ECHO            reduce using rule 16 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)


state 134

    (18) class_stmt -> LBLOCK attributes methods . RBLOCK
    (23) methods -> methods . scope fun_declaration
    (25) scope -> . PRIVATE
    (26) scope -> . PUBLIC
    (27) scope -> . PROTECTED

    RBLOCK          shift and go to state 164
    PRIVATE         shift and go to state 94
    PUBLIC          shift and go to state 95
    PROTECTED       shift and go to state 96

    scope                          shift and go to state 165

state 135

    (20) class_stmt -> LBLOCK attributes RBLOCK .

    CLOSE_TAG       reduce using rule 20 (class_stmt -> LBLOCK attributes RBLOCK .)
    ID              reduce using rule 20 (class_stmt -> LBLOCK attributes RBLOCK .)
    AMPERSANT       reduce using rule 20 (class_stmt -> LBLOCK attributes RBLOCK .)
    FUNCTION        reduce using rule 20 (class_stmt -> LBLOCK attributes RBLOCK .)
    REQUIRE         reduce using rule 20 (class_stmt -> LBLOCK attributes RBLOCK .)
    CLASS           reduce using rule 20 (class_stmt -> LBLOCK attributes RBLOCK .)
    IF              reduce using rule 20 (class_stmt -> LBLOCK attributes RBLOCK .)
    SWITCH          reduce using rule 20 (class_stmt -> LBLOCK attributes RBLOCK .)
    CASE            reduce using rule 20 (class_stmt -> LBLOCK attributes RBLOCK .)
    DEFAULT         reduce using rule 20 (class_stmt -> LBLOCK attributes RBLOCK .)
    FOR             reduce using rule 20 (class_stmt -> LBLOCK attributes RBLOCK .)
    WHILE           reduce using rule 20 (class_stmt -> LBLOCK attributes RBLOCK .)
    ECHO            reduce using rule 20 (class_stmt -> LBLOCK attributes RBLOCK .)


state 136

    (21) attributes -> attributes scope . var_declaration
    (24) methods -> scope . fun_declaration
    (28) var_declaration -> . ID SEMICOLON var_declaration
    (29) var_declaration -> . ID SEMICOLON
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (31) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (33) var_declaration -> . ID EQUAL boolean SEMICOLON
    (34) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (35) var_declaration -> . ID EQUAL ID SEMICOLON
    (36) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (37) var_declaration -> . AMPERSANT ID SEMICOLON
    (38) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt

    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13
    FUNCTION        shift and go to state 14

    var_declaration                shift and go to state 166
    fun_declaration                shift and go to state 167

state 137

    (19) class_stmt -> LBLOCK empty RBLOCK .

    CLOSE_TAG       reduce using rule 19 (class_stmt -> LBLOCK empty RBLOCK .)
    ID              reduce using rule 19 (class_stmt -> LBLOCK empty RBLOCK .)
    AMPERSANT       reduce using rule 19 (class_stmt -> LBLOCK empty RBLOCK .)
    FUNCTION        reduce using rule 19 (class_stmt -> LBLOCK empty RBLOCK .)
    REQUIRE         reduce using rule 19 (class_stmt -> LBLOCK empty RBLOCK .)
    CLASS           reduce using rule 19 (class_stmt -> LBLOCK empty RBLOCK .)
    IF              reduce using rule 19 (class_stmt -> LBLOCK empty RBLOCK .)
    SWITCH          reduce using rule 19 (class_stmt -> LBLOCK empty RBLOCK .)
    CASE            reduce using rule 19 (class_stmt -> LBLOCK empty RBLOCK .)
    DEFAULT         reduce using rule 19 (class_stmt -> LBLOCK empty RBLOCK .)
    FOR             reduce using rule 19 (class_stmt -> LBLOCK empty RBLOCK .)
    WHILE           reduce using rule 19 (class_stmt -> LBLOCK empty RBLOCK .)
    ECHO            reduce using rule 19 (class_stmt -> LBLOCK empty RBLOCK .)


state 138

    (22) attributes -> scope var_declaration .

    RBLOCK          reduce using rule 22 (attributes -> scope var_declaration .)
    PRIVATE         reduce using rule 22 (attributes -> scope var_declaration .)
    PUBLIC          reduce using rule 22 (attributes -> scope var_declaration .)
    PROTECTED       reduce using rule 22 (attributes -> scope var_declaration .)


state 139

    (91) factor -> LPAREN expression RPAREN .

    MINUSMINUS      reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    CLOSE_TAG       reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    AMPERSANT       reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    FUNCTION        reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    REQUIRE         reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    CLASS           reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    CASE            reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    ECHO            reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    LBLOCK          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    RBLOCK          reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 91 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 91 (factor -> LPAREN expression RPAREN .)


state 140

    (57) selection_stmt -> IF LPAREN expression RPAREN statement .
    (58) selection_stmt -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    CLOSE_TAG       reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 168

  ! ELSE            [ reduce using rule 57 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]


state 141

    (3) expression -> expression PLUS term .
    (87) term -> term . mulop factor
    (89) mulop -> . TIMES
    (90) mulop -> . DIVIDE

    RPAREN          reduce using rule 3 (expression -> expression PLUS term .)
    PLUS            reduce using rule 3 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 3 (expression -> expression PLUS term .)
    BREAK           reduce using rule 3 (expression -> expression PLUS term .)
    ELSE            reduce using rule 3 (expression -> expression PLUS term .)
    CLOSE_TAG       reduce using rule 3 (expression -> expression PLUS term .)
    ID              reduce using rule 3 (expression -> expression PLUS term .)
    AMPERSANT       reduce using rule 3 (expression -> expression PLUS term .)
    FUNCTION        reduce using rule 3 (expression -> expression PLUS term .)
    REQUIRE         reduce using rule 3 (expression -> expression PLUS term .)
    CLASS           reduce using rule 3 (expression -> expression PLUS term .)
    IF              reduce using rule 3 (expression -> expression PLUS term .)
    SWITCH          reduce using rule 3 (expression -> expression PLUS term .)
    CASE            reduce using rule 3 (expression -> expression PLUS term .)
    DEFAULT         reduce using rule 3 (expression -> expression PLUS term .)
    FOR             reduce using rule 3 (expression -> expression PLUS term .)
    WHILE           reduce using rule 3 (expression -> expression PLUS term .)
    ECHO            reduce using rule 3 (expression -> expression PLUS term .)
    LBLOCK          reduce using rule 3 (expression -> expression PLUS term .)
    RETURN          reduce using rule 3 (expression -> expression PLUS term .)
    LPAREN          reduce using rule 3 (expression -> expression PLUS term .)
    NUMBER          reduce using rule 3 (expression -> expression PLUS term .)
    TRUE            reduce using rule 3 (expression -> expression PLUS term .)
    FALSE           reduce using rule 3 (expression -> expression PLUS term .)
    RBLOCK          reduce using rule 3 (expression -> expression PLUS term .)
    RBRACKET        reduce using rule 3 (expression -> expression PLUS term .)
    COMMA           reduce using rule 3 (expression -> expression PLUS term .)
    TIMES           shift and go to state 103
    DIVIDE          shift and go to state 104

    mulop                          shift and go to state 102

state 142

    (92) factor -> var .

    TIMES           reduce using rule 92 (factor -> var .)
    DIVIDE          reduce using rule 92 (factor -> var .)
    RPAREN          reduce using rule 92 (factor -> var .)
    PLUS            reduce using rule 92 (factor -> var .)
    SEMICOLON       reduce using rule 92 (factor -> var .)
    BREAK           reduce using rule 92 (factor -> var .)
    ELSE            reduce using rule 92 (factor -> var .)
    CLOSE_TAG       reduce using rule 92 (factor -> var .)
    ID              reduce using rule 92 (factor -> var .)
    AMPERSANT       reduce using rule 92 (factor -> var .)
    FUNCTION        reduce using rule 92 (factor -> var .)
    REQUIRE         reduce using rule 92 (factor -> var .)
    CLASS           reduce using rule 92 (factor -> var .)
    IF              reduce using rule 92 (factor -> var .)
    SWITCH          reduce using rule 92 (factor -> var .)
    CASE            reduce using rule 92 (factor -> var .)
    DEFAULT         reduce using rule 92 (factor -> var .)
    FOR             reduce using rule 92 (factor -> var .)
    WHILE           reduce using rule 92 (factor -> var .)
    ECHO            reduce using rule 92 (factor -> var .)
    LBLOCK          reduce using rule 92 (factor -> var .)
    RETURN          reduce using rule 92 (factor -> var .)
    LPAREN          reduce using rule 92 (factor -> var .)
    NUMBER          reduce using rule 92 (factor -> var .)
    TRUE            reduce using rule 92 (factor -> var .)
    FALSE           reduce using rule 92 (factor -> var .)
    RBLOCK          reduce using rule 92 (factor -> var .)
    RBRACKET        reduce using rule 92 (factor -> var .)
    COMMA           reduce using rule 92 (factor -> var .)
    MINUSMINUS      reduce using rule 92 (factor -> var .)
    PLUSPLUS        reduce using rule 92 (factor -> var .)
    LESS            reduce using rule 92 (factor -> var .)
    LESSEQUAL       reduce using rule 92 (factor -> var .)
    GREATER         reduce using rule 92 (factor -> var .)
    GREATEREQUAL    reduce using rule 92 (factor -> var .)
    DEQUAL          reduce using rule 92 (factor -> var .)
    ISEQUAL         reduce using rule 92 (factor -> var .)
    MINUS           reduce using rule 92 (factor -> var .)


state 143

    (87) term -> term mulop factor .

    MINUSMINUS      reduce using rule 87 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 87 (term -> term mulop factor .)
    TIMES           reduce using rule 87 (term -> term mulop factor .)
    DIVIDE          reduce using rule 87 (term -> term mulop factor .)
    LESS            reduce using rule 87 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 87 (term -> term mulop factor .)
    GREATER         reduce using rule 87 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 87 (term -> term mulop factor .)
    DEQUAL          reduce using rule 87 (term -> term mulop factor .)
    ISEQUAL         reduce using rule 87 (term -> term mulop factor .)
    PLUS            reduce using rule 87 (term -> term mulop factor .)
    MINUS           reduce using rule 87 (term -> term mulop factor .)
    RPAREN          reduce using rule 87 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 87 (term -> term mulop factor .)
    BREAK           reduce using rule 87 (term -> term mulop factor .)
    ELSE            reduce using rule 87 (term -> term mulop factor .)
    CLOSE_TAG       reduce using rule 87 (term -> term mulop factor .)
    ID              reduce using rule 87 (term -> term mulop factor .)
    AMPERSANT       reduce using rule 87 (term -> term mulop factor .)
    FUNCTION        reduce using rule 87 (term -> term mulop factor .)
    REQUIRE         reduce using rule 87 (term -> term mulop factor .)
    CLASS           reduce using rule 87 (term -> term mulop factor .)
    IF              reduce using rule 87 (term -> term mulop factor .)
    SWITCH          reduce using rule 87 (term -> term mulop factor .)
    CASE            reduce using rule 87 (term -> term mulop factor .)
    DEFAULT         reduce using rule 87 (term -> term mulop factor .)
    FOR             reduce using rule 87 (term -> term mulop factor .)
    WHILE           reduce using rule 87 (term -> term mulop factor .)
    ECHO            reduce using rule 87 (term -> term mulop factor .)
    LBLOCK          reduce using rule 87 (term -> term mulop factor .)
    RETURN          reduce using rule 87 (term -> term mulop factor .)
    LPAREN          reduce using rule 87 (term -> term mulop factor .)
    NUMBER          reduce using rule 87 (term -> term mulop factor .)
    TRUE            reduce using rule 87 (term -> term mulop factor .)
    FALSE           reduce using rule 87 (term -> term mulop factor .)
    RBLOCK          reduce using rule 87 (term -> term mulop factor .)
    RBRACKET        reduce using rule 87 (term -> term mulop factor .)
    COMMA           reduce using rule 87 (term -> term mulop factor .)


state 144

    (68) expression -> var EQUAL expression .
    (3) expression -> expression . PLUS term

  ! shift/reduce conflict for PLUS resolved as shift
    RPAREN          reduce using rule 68 (expression -> var EQUAL expression .)
    SEMICOLON       reduce using rule 68 (expression -> var EQUAL expression .)
    BREAK           reduce using rule 68 (expression -> var EQUAL expression .)
    ELSE            reduce using rule 68 (expression -> var EQUAL expression .)
    CLOSE_TAG       reduce using rule 68 (expression -> var EQUAL expression .)
    ID              reduce using rule 68 (expression -> var EQUAL expression .)
    AMPERSANT       reduce using rule 68 (expression -> var EQUAL expression .)
    FUNCTION        reduce using rule 68 (expression -> var EQUAL expression .)
    REQUIRE         reduce using rule 68 (expression -> var EQUAL expression .)
    CLASS           reduce using rule 68 (expression -> var EQUAL expression .)
    IF              reduce using rule 68 (expression -> var EQUAL expression .)
    SWITCH          reduce using rule 68 (expression -> var EQUAL expression .)
    CASE            reduce using rule 68 (expression -> var EQUAL expression .)
    DEFAULT         reduce using rule 68 (expression -> var EQUAL expression .)
    FOR             reduce using rule 68 (expression -> var EQUAL expression .)
    WHILE           reduce using rule 68 (expression -> var EQUAL expression .)
    ECHO            reduce using rule 68 (expression -> var EQUAL expression .)
    LBLOCK          reduce using rule 68 (expression -> var EQUAL expression .)
    RETURN          reduce using rule 68 (expression -> var EQUAL expression .)
    LPAREN          reduce using rule 68 (expression -> var EQUAL expression .)
    NUMBER          reduce using rule 68 (expression -> var EQUAL expression .)
    TRUE            reduce using rule 68 (expression -> var EQUAL expression .)
    FALSE           reduce using rule 68 (expression -> var EQUAL expression .)
    RBLOCK          reduce using rule 68 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 68 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 68 (expression -> var EQUAL expression .)
    PLUS            shift and go to state 99

  ! PLUS            [ reduce using rule 68 (expression -> var EQUAL expression .) ]


state 145

    (70) expression -> var EQUAL AMPERSANT . ID

    ID              shift and go to state 169


state 146

    (72) var -> ID LBRACKET expression . RBRACKET
    (3) expression -> expression . PLUS term

    RBRACKET        shift and go to state 170
    PLUS            shift and go to state 99


state 147

    (96) call -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 171


state 148

    (97) args -> args_list .
    (99) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 97 (args -> args_list .)
    COMMA           shift and go to state 172


state 149

    (98) args -> empty .

    RPAREN          reduce using rule 98 (args -> empty .)


state 150

    (100) args_list -> expression .
    (3) expression -> expression . PLUS term

    COMMA           reduce using rule 100 (args_list -> expression .)
    RPAREN          reduce using rule 100 (args_list -> expression .)
    PLUS            shift and go to state 99


state 151

    (73) simple_expression -> additive_expression relop additive_expression .
    (81) additive_expression -> additive_expression . addop term
    (85) addop -> . PLUS
    (86) addop -> . MINUS

  ! shift/reduce conflict for PLUS resolved as shift
    RPAREN          reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    SEMICOLON       reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    BREAK           reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    ELSE            reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    CLOSE_TAG       reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    ID              reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    AMPERSANT       reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    FUNCTION        reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    REQUIRE         reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    CLASS           reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    IF              reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    SWITCH          reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    CASE            reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    DEFAULT         reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    FOR             reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    WHILE           reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    ECHO            reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    LBLOCK          reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    RETURN          reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    LPAREN          reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    NUMBER          reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    TRUE            reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    FALSE           reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    RBLOCK          reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117

  ! PLUS            [ reduce using rule 73 (simple_expression -> additive_expression relop additive_expression .) ]

    addop                          shift and go to state 109

state 152

    (81) additive_expression -> additive_expression addop term .
    (87) term -> term . mulop factor
    (89) mulop -> . TIMES
    (90) mulop -> . DIVIDE

    LESS            reduce using rule 81 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 81 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 81 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 81 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 81 (additive_expression -> additive_expression addop term .)
    ISEQUAL         reduce using rule 81 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 81 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 81 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 81 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 81 (additive_expression -> additive_expression addop term .)
    BREAK           reduce using rule 81 (additive_expression -> additive_expression addop term .)
    ELSE            reduce using rule 81 (additive_expression -> additive_expression addop term .)
    CLOSE_TAG       reduce using rule 81 (additive_expression -> additive_expression addop term .)
    ID              reduce using rule 81 (additive_expression -> additive_expression addop term .)
    AMPERSANT       reduce using rule 81 (additive_expression -> additive_expression addop term .)
    FUNCTION        reduce using rule 81 (additive_expression -> additive_expression addop term .)
    REQUIRE         reduce using rule 81 (additive_expression -> additive_expression addop term .)
    CLASS           reduce using rule 81 (additive_expression -> additive_expression addop term .)
    IF              reduce using rule 81 (additive_expression -> additive_expression addop term .)
    SWITCH          reduce using rule 81 (additive_expression -> additive_expression addop term .)
    CASE            reduce using rule 81 (additive_expression -> additive_expression addop term .)
    DEFAULT         reduce using rule 81 (additive_expression -> additive_expression addop term .)
    FOR             reduce using rule 81 (additive_expression -> additive_expression addop term .)
    WHILE           reduce using rule 81 (additive_expression -> additive_expression addop term .)
    ECHO            reduce using rule 81 (additive_expression -> additive_expression addop term .)
    LBLOCK          reduce using rule 81 (additive_expression -> additive_expression addop term .)
    RETURN          reduce using rule 81 (additive_expression -> additive_expression addop term .)
    LPAREN          reduce using rule 81 (additive_expression -> additive_expression addop term .)
    NUMBER          reduce using rule 81 (additive_expression -> additive_expression addop term .)
    TRUE            reduce using rule 81 (additive_expression -> additive_expression addop term .)
    FALSE           reduce using rule 81 (additive_expression -> additive_expression addop term .)
    RBLOCK          reduce using rule 81 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 81 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 81 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 103
    DIVIDE          shift and go to state 104

    mulop                          shift and go to state 102

state 153

    (59) selection_stmt -> SWITCH LPAREN var RPAREN statement .

    CLOSE_TAG       reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ID              reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    AMPERSANT       reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FUNCTION        reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    REQUIRE         reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CLASS           reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IF              reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SWITCH          reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CASE            reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DEFAULT         reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FOR             reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    WHILE           reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ECHO            reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    BREAK           reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSE            reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SEMICOLON       reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LBLOCK          reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RETURN          reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LPAREN          reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    NUMBER          reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TRUE            reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FALSE           reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RBLOCK          reduce using rule 59 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)


state 154

    (60) selection_stmt -> CASE NUMBER COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 173


state 155

    (61) selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .

    CLOSE_TAG       reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    AMPERSANT       reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    REQUIRE         reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CLASS           reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    TRUE            reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FALSE           reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 61 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)


state 156

    (45) compount_stmt -> LBLOCK print_stmt local_declarations . print_stmt statement_list print_stmt RBLOCK
    (46) local_declarations -> local_declarations . var_declaration
    (13) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (14) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (15) print_stmt -> . empty
    (28) var_declaration -> . ID SEMICOLON var_declaration
    (29) var_declaration -> . ID SEMICOLON
    (30) var_declaration -> . ID EQUAL NUMBER SEMICOLON var_declaration
    (31) var_declaration -> . ID EQUAL NUMBER SEMICOLON
    (32) var_declaration -> . ID EQUAL boolean SEMICOLON var_declaration
    (33) var_declaration -> . ID EQUAL boolean SEMICOLON
    (34) var_declaration -> . ID EQUAL ID SEMICOLON var_declaration
    (35) var_declaration -> . ID EQUAL ID SEMICOLON
    (36) var_declaration -> . AMPERSANT ID SEMICOLON var_declaration
    (37) var_declaration -> . AMPERSANT ID SEMICOLON
    (103) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 12
    AMPERSANT       shift and go to state 13
    ECHO            reduce using rule 103 (empty -> .)
    SEMICOLON       reduce using rule 103 (empty -> .)
    LBLOCK          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    SWITCH          reduce using rule 103 (empty -> .)
    CASE            reduce using rule 103 (empty -> .)
    DEFAULT         reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    NUMBER          reduce using rule 103 (empty -> .)
    TRUE            reduce using rule 103 (empty -> .)
    FALSE           reduce using rule 103 (empty -> .)
    RBLOCK          reduce using rule 103 (empty -> .)

  ! ID              [ reduce using rule 103 (empty -> .) ]

    print_stmt                     shift and go to state 174
    var_declaration                shift and go to state 175
    empty                          shift and go to state 17

state 157

    (47) local_declarations -> empty .

    ID              reduce using rule 47 (local_declarations -> empty .)
    AMPERSANT       reduce using rule 47 (local_declarations -> empty .)
    ECHO            reduce using rule 47 (local_declarations -> empty .)
    SEMICOLON       reduce using rule 47 (local_declarations -> empty .)
    LBLOCK          reduce using rule 47 (local_declarations -> empty .)
    IF              reduce using rule 47 (local_declarations -> empty .)
    SWITCH          reduce using rule 47 (local_declarations -> empty .)
    CASE            reduce using rule 47 (local_declarations -> empty .)
    DEFAULT         reduce using rule 47 (local_declarations -> empty .)
    FOR             reduce using rule 47 (local_declarations -> empty .)
    WHILE           reduce using rule 47 (local_declarations -> empty .)
    RETURN          reduce using rule 47 (local_declarations -> empty .)
    LPAREN          reduce using rule 47 (local_declarations -> empty .)
    NUMBER          reduce using rule 47 (local_declarations -> empty .)
    TRUE            reduce using rule 47 (local_declarations -> empty .)
    FALSE           reduce using rule 47 (local_declarations -> empty .)
    RBLOCK          reduce using rule 47 (local_declarations -> empty .)


state 158

    (67) return_stmt -> RETURN expression SEMICOLON .

    BREAK           reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    CLOSE_TAG       reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    AMPERSANT       reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    REQUIRE         reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    ECHO            reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    LBLOCK          reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)
    RBLOCK          reduce using rule 67 (return_stmt -> RETURN expression SEMICOLON .)


state 159

    (63) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression . SEMICOLON additive_expression RPAREN statement
    (3) expression -> expression . PLUS term

    SEMICOLON       shift and go to state 176
    PLUS            shift and go to state 99


state 160

    (64) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    CLOSE_TAG       reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 64 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 161

    (38) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .

    CLOSE_TAG       reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    ID              reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    AMPERSANT       reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    FUNCTION        reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    REQUIRE         reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    CLASS           reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    IF              reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    SWITCH          reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    CASE            reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    DEFAULT         reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    FOR             reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    WHILE           reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    ECHO            reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    RBLOCK          reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    PRIVATE         reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    PUBLIC          reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    PROTECTED       reduce using rule 38 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)


state 162

    (41) param_list -> param_list COMMA param .

    COMMA           reduce using rule 41 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 41 (param_list -> param_list COMMA param .)


state 163

    (44) param -> ID LBRACKET RBRACKET .

    COMMA           reduce using rule 44 (param -> ID LBRACKET RBRACKET .)
    RPAREN          reduce using rule 44 (param -> ID LBRACKET RBRACKET .)


state 164

    (18) class_stmt -> LBLOCK attributes methods RBLOCK .

    CLOSE_TAG       reduce using rule 18 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    ID              reduce using rule 18 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    AMPERSANT       reduce using rule 18 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    FUNCTION        reduce using rule 18 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    REQUIRE         reduce using rule 18 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    CLASS           reduce using rule 18 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    IF              reduce using rule 18 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    SWITCH          reduce using rule 18 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    CASE            reduce using rule 18 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    DEFAULT         reduce using rule 18 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    FOR             reduce using rule 18 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    WHILE           reduce using rule 18 (class_stmt -> LBLOCK attributes methods RBLOCK .)
    ECHO            reduce using rule 18 (class_stmt -> LBLOCK attributes methods RBLOCK .)


state 165

    (23) methods -> methods scope . fun_declaration
    (38) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt

    FUNCTION        shift and go to state 14

    fun_declaration                shift and go to state 177

state 166

    (21) attributes -> attributes scope var_declaration .

    RBLOCK          reduce using rule 21 (attributes -> attributes scope var_declaration .)
    PRIVATE         reduce using rule 21 (attributes -> attributes scope var_declaration .)
    PUBLIC          reduce using rule 21 (attributes -> attributes scope var_declaration .)
    PROTECTED       reduce using rule 21 (attributes -> attributes scope var_declaration .)


state 167

    (24) methods -> scope fun_declaration .

    RBLOCK          reduce using rule 24 (methods -> scope fun_declaration .)
    PRIVATE         reduce using rule 24 (methods -> scope fun_declaration .)
    PUBLIC          reduce using rule 24 (methods -> scope fun_declaration .)
    PROTECTED       reduce using rule 24 (methods -> scope fun_declaration .)


state 168

    (58) selection_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (2) statement -> . expression
    (50) statement -> . expression_stmt
    (51) statement -> . compount_stmt
    (52) statement -> . selection_stmt
    (53) statement -> . iteration_stmt
    (54) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (55) expression_stmt -> . expression SEMICOLON
    (56) expression_stmt -> . SEMICOLON
    (45) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement
    (58) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (59) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (60) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (62) selection_stmt -> . print_stmt
    (63) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (64) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (65) iteration_stmt -> . print_stmt
    (66) return_stmt -> . RETURN SEMICOLON
    (67) return_stmt -> . RETURN expression SEMICOLON
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (13) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (14) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (15) print_stmt -> . empty
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (103) empty -> .
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 103 (empty -> .)
    ELSE            reduce using rule 103 (empty -> .)
    CLOSE_TAG       reduce using rule 103 (empty -> .)
    AMPERSANT       reduce using rule 103 (empty -> .)
    FUNCTION        reduce using rule 103 (empty -> .)
    REQUIRE         reduce using rule 103 (empty -> .)
    CLASS           reduce using rule 103 (empty -> .)
    BREAK           reduce using rule 103 (empty -> .)
    RBLOCK          reduce using rule 103 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! SWITCH          [ reduce using rule 103 (empty -> .) ]
  ! CASE            [ reduce using rule 103 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 103 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! LPAREN          [ reduce using rule 103 (empty -> .) ]
  ! NUMBER          [ reduce using rule 103 (empty -> .) ]
  ! TRUE            [ reduce using rule 103 (empty -> .) ]
  ! FALSE           [ reduce using rule 103 (empty -> .) ]

    expression                     shift and go to state 68
    statement                      shift and go to state 178
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    additive_expression            shift and go to state 58
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 169

    (70) expression -> var EQUAL AMPERSANT ID .

    RPAREN          reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    PLUS            reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    SEMICOLON       reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    BREAK           reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    ELSE            reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    CLOSE_TAG       reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    ID              reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    AMPERSANT       reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    FUNCTION        reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    REQUIRE         reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    CLASS           reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    IF              reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    SWITCH          reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    CASE            reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    DEFAULT         reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    FOR             reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    WHILE           reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    ECHO            reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    LBLOCK          reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    RETURN          reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    LPAREN          reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    NUMBER          reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    TRUE            reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    FALSE           reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    RBLOCK          reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    RBRACKET        reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)
    COMMA           reduce using rule 70 (expression -> var EQUAL AMPERSANT ID .)


state 170

    (72) var -> ID LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    ISEQUAL         reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    BREAK           reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    CLOSE_TAG       reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    ID              reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    AMPERSANT       reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    FUNCTION        reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    REQUIRE         reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    CLASS           reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    IF              reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    SWITCH          reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    CASE            reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    DEFAULT         reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    FOR             reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    ECHO            reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    LBLOCK          reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    RBLOCK          reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 72 (var -> ID LBRACKET expression RBRACKET .)


state 171

    (96) call -> ID LPAREN args RPAREN .

    MINUSMINUS      reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    PLUSPLUS        reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    TIMES           reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    LESS            reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    GREATER         reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    DEQUAL          reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    ISEQUAL         reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    BREAK           reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    ELSE            reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    CLOSE_TAG       reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    ID              reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    AMPERSANT       reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    FUNCTION        reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    REQUIRE         reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    CLASS           reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    IF              reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    SWITCH          reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    CASE            reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    DEFAULT         reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    FOR             reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    WHILE           reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    ECHO            reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    LBLOCK          reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    RETURN          reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    LPAREN          reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    NUMBER          reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    TRUE            reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    FALSE           reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    RBLOCK          reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 96 (call -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 96 (call -> ID LPAREN args RPAREN .)


state 172

    (99) args_list -> args_list COMMA . expression
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    expression                     shift and go to state 179
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 173

    (60) selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .

    CLOSE_TAG       reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    AMPERSANT       reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    REQUIRE         reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CLASS           reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    TRUE            reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FALSE           reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 60 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)


state 174

    (45) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt . statement_list print_stmt RBLOCK
    (13) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (14) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (48) statement_list -> . statement_list statement
    (49) statement_list -> . empty
    (103) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 26
    SEMICOLON       reduce using rule 103 (empty -> .)
    LBLOCK          reduce using rule 103 (empty -> .)
    IF              reduce using rule 103 (empty -> .)
    SWITCH          reduce using rule 103 (empty -> .)
    CASE            reduce using rule 103 (empty -> .)
    DEFAULT         reduce using rule 103 (empty -> .)
    FOR             reduce using rule 103 (empty -> .)
    WHILE           reduce using rule 103 (empty -> .)
    RETURN          reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    LPAREN          reduce using rule 103 (empty -> .)
    NUMBER          reduce using rule 103 (empty -> .)
    TRUE            reduce using rule 103 (empty -> .)
    FALSE           reduce using rule 103 (empty -> .)
    RBLOCK          reduce using rule 103 (empty -> .)

  ! ECHO            [ reduce using rule 103 (empty -> .) ]

    statement_list                 shift and go to state 180
    empty                          shift and go to state 181

state 175

    (46) local_declarations -> local_declarations var_declaration .

    ID              reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    AMPERSANT       reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    ECHO            reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    SEMICOLON       reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    LBLOCK          reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    SWITCH          reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    CASE            reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    DEFAULT         reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    NUMBER          reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    TRUE            reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    FALSE           reduce using rule 46 (local_declarations -> local_declarations var_declaration .)
    RBLOCK          reduce using rule 46 (local_declarations -> local_declarations var_declaration .)


state 176

    (63) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON . additive_expression RPAREN statement
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    additive_expression            shift and go to state 182
    term                           shift and go to state 54
    factor                         shift and go to state 59
    var                            shift and go to state 142
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 177

    (23) methods -> methods scope fun_declaration .

    RBLOCK          reduce using rule 23 (methods -> methods scope fun_declaration .)
    PRIVATE         reduce using rule 23 (methods -> methods scope fun_declaration .)
    PUBLIC          reduce using rule 23 (methods -> methods scope fun_declaration .)
    PROTECTED       reduce using rule 23 (methods -> methods scope fun_declaration .)


state 178

    (58) selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    CLOSE_TAG       reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    AMPERSANT       reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNCTION        reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    REQUIRE         reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ECHO            reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBLOCK          reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBLOCK          reduce using rule 58 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)


state 179

    (99) args_list -> args_list COMMA expression .
    (3) expression -> expression . PLUS term

    COMMA           reduce using rule 99 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 99 (args_list -> args_list COMMA expression .)
    PLUS            shift and go to state 99


state 180

    (45) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list . print_stmt RBLOCK
    (48) statement_list -> statement_list . statement
    (13) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (14) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (15) print_stmt -> . empty
    (2) statement -> . expression
    (50) statement -> . expression_stmt
    (51) statement -> . compount_stmt
    (52) statement -> . selection_stmt
    (53) statement -> . iteration_stmt
    (54) statement -> . return_stmt
    (103) empty -> .
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (55) expression_stmt -> . expression SEMICOLON
    (56) expression_stmt -> . SEMICOLON
    (45) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement
    (58) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (59) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (60) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (62) selection_stmt -> . print_stmt
    (63) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (64) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (65) iteration_stmt -> . print_stmt
    (66) return_stmt -> . RETURN SEMICOLON
    (67) return_stmt -> . RETURN expression SEMICOLON
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBLOCK          reduce using rule 103 (empty -> .)
    ECHO            reduce using rule 103 (empty -> .)
    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! SEMICOLON       [ reduce using rule 103 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! SWITCH          [ reduce using rule 103 (empty -> .) ]
  ! CASE            [ reduce using rule 103 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! LPAREN          [ reduce using rule 103 (empty -> .) ]
  ! NUMBER          [ reduce using rule 103 (empty -> .) ]
  ! TRUE            [ reduce using rule 103 (empty -> .) ]
  ! FALSE           [ reduce using rule 103 (empty -> .) ]

    print_stmt                     shift and go to state 183
    statement                      shift and go to state 184
    empty                          shift and go to state 17
    expression                     shift and go to state 68
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 58
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 181

    (49) statement_list -> empty .

    SEMICOLON       reduce using rule 49 (statement_list -> empty .)
    LBLOCK          reduce using rule 49 (statement_list -> empty .)
    IF              reduce using rule 49 (statement_list -> empty .)
    SWITCH          reduce using rule 49 (statement_list -> empty .)
    CASE            reduce using rule 49 (statement_list -> empty .)
    DEFAULT         reduce using rule 49 (statement_list -> empty .)
    FOR             reduce using rule 49 (statement_list -> empty .)
    WHILE           reduce using rule 49 (statement_list -> empty .)
    RETURN          reduce using rule 49 (statement_list -> empty .)
    ID              reduce using rule 49 (statement_list -> empty .)
    LPAREN          reduce using rule 49 (statement_list -> empty .)
    NUMBER          reduce using rule 49 (statement_list -> empty .)
    TRUE            reduce using rule 49 (statement_list -> empty .)
    FALSE           reduce using rule 49 (statement_list -> empty .)
    RBLOCK          reduce using rule 49 (statement_list -> empty .)
    ECHO            reduce using rule 49 (statement_list -> empty .)


state 182

    (63) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression . RPAREN statement
    (81) additive_expression -> additive_expression . addop term
    (85) addop -> . PLUS
    (86) addop -> . MINUS

    RPAREN          shift and go to state 185
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117

    addop                          shift and go to state 109

state 183

    (45) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt . RBLOCK
    (13) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (14) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (62) selection_stmt -> print_stmt .
    (65) iteration_stmt -> print_stmt .

  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LBLOCK resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for RETURN resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LPAREN resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for NUMBER resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for TRUE resolved using rule 62 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FALSE resolved using rule 62 (selection_stmt -> print_stmt .)
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
    RBLOCK          shift and go to state 186
    ECHO            shift and go to state 26
    SEMICOLON       reduce using rule 62 (selection_stmt -> print_stmt .)
    LBLOCK          reduce using rule 62 (selection_stmt -> print_stmt .)
    IF              reduce using rule 62 (selection_stmt -> print_stmt .)
    SWITCH          reduce using rule 62 (selection_stmt -> print_stmt .)
    CASE            reduce using rule 62 (selection_stmt -> print_stmt .)
    DEFAULT         reduce using rule 62 (selection_stmt -> print_stmt .)
    FOR             reduce using rule 62 (selection_stmt -> print_stmt .)
    WHILE           reduce using rule 62 (selection_stmt -> print_stmt .)
    RETURN          reduce using rule 62 (selection_stmt -> print_stmt .)
    ID              reduce using rule 62 (selection_stmt -> print_stmt .)
    LPAREN          reduce using rule 62 (selection_stmt -> print_stmt .)
    NUMBER          reduce using rule 62 (selection_stmt -> print_stmt .)
    TRUE            reduce using rule 62 (selection_stmt -> print_stmt .)
    FALSE           reduce using rule 62 (selection_stmt -> print_stmt .)

  ! RBLOCK          [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 62 (selection_stmt -> print_stmt .) ]
  ! SEMICOLON       [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! LBLOCK          [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! RETURN          [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! LPAREN          [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! NUMBER          [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! TRUE            [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! FALSE           [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! RBLOCK          [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 65 (iteration_stmt -> print_stmt .) ]


state 184

    (48) statement_list -> statement_list statement .

    SEMICOLON       reduce using rule 48 (statement_list -> statement_list statement .)
    LBLOCK          reduce using rule 48 (statement_list -> statement_list statement .)
    IF              reduce using rule 48 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 48 (statement_list -> statement_list statement .)
    CASE            reduce using rule 48 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 48 (statement_list -> statement_list statement .)
    FOR             reduce using rule 48 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 48 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 48 (statement_list -> statement_list statement .)
    ID              reduce using rule 48 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 48 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 48 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 48 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 48 (statement_list -> statement_list statement .)
    RBLOCK          reduce using rule 48 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 48 (statement_list -> statement_list statement .)


state 185

    (63) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN . statement
    (2) statement -> . expression
    (50) statement -> . expression_stmt
    (51) statement -> . compount_stmt
    (52) statement -> . selection_stmt
    (53) statement -> . iteration_stmt
    (54) statement -> . return_stmt
    (3) expression -> . expression PLUS term
    (68) expression -> . var EQUAL expression
    (69) expression -> . simple_expression
    (70) expression -> . var EQUAL AMPERSANT ID
    (55) expression_stmt -> . expression SEMICOLON
    (56) expression_stmt -> . SEMICOLON
    (45) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (57) selection_stmt -> . IF LPAREN expression RPAREN statement
    (58) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (59) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (60) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (61) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (62) selection_stmt -> . print_stmt
    (63) iteration_stmt -> . FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (64) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (65) iteration_stmt -> . print_stmt
    (66) return_stmt -> . RETURN SEMICOLON
    (67) return_stmt -> . RETURN expression SEMICOLON
    (71) var -> . ID
    (72) var -> . ID LBRACKET expression RBRACKET
    (73) simple_expression -> . additive_expression relop additive_expression
    (74) simple_expression -> . additive_expression
    (13) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (14) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (15) print_stmt -> . empty
    (81) additive_expression -> . additive_expression addop term
    (82) additive_expression -> . term
    (83) additive_expression -> . term MINUSMINUS
    (84) additive_expression -> . term PLUSPLUS
    (103) empty -> .
    (87) term -> . term mulop factor
    (88) term -> . factor
    (91) factor -> . LPAREN expression RPAREN
    (92) factor -> . var
    (93) factor -> . call
    (94) factor -> . NUMBER
    (95) factor -> . boolean
    (96) call -> . ID LPAREN args RPAREN
    (101) boolean -> . TRUE
    (102) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 67
    LBLOCK          shift and go to state 74
    IF              shift and go to state 18
    SWITCH          shift and go to state 19
    CASE            shift and go to state 20
    DEFAULT         shift and go to state 21
    FOR             shift and go to state 22
    WHILE           shift and go to state 23
    RETURN          shift and go to state 76
    ID              shift and go to state 57
    ECHO            reduce using rule 103 (empty -> .)
    ELSE            reduce using rule 103 (empty -> .)
    CLOSE_TAG       reduce using rule 103 (empty -> .)
    AMPERSANT       reduce using rule 103 (empty -> .)
    FUNCTION        reduce using rule 103 (empty -> .)
    REQUIRE         reduce using rule 103 (empty -> .)
    CLASS           reduce using rule 103 (empty -> .)
    BREAK           reduce using rule 103 (empty -> .)
    RBLOCK          reduce using rule 103 (empty -> .)
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 61
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

  ! ID              [ reduce using rule 103 (empty -> .) ]
  ! IF              [ reduce using rule 103 (empty -> .) ]
  ! SWITCH          [ reduce using rule 103 (empty -> .) ]
  ! CASE            [ reduce using rule 103 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 103 (empty -> .) ]
  ! FOR             [ reduce using rule 103 (empty -> .) ]
  ! WHILE           [ reduce using rule 103 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 103 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 103 (empty -> .) ]
  ! RETURN          [ reduce using rule 103 (empty -> .) ]
  ! LPAREN          [ reduce using rule 103 (empty -> .) ]
  ! NUMBER          [ reduce using rule 103 (empty -> .) ]
  ! TRUE            [ reduce using rule 103 (empty -> .) ]
  ! FALSE           [ reduce using rule 103 (empty -> .) ]

    expression                     shift and go to state 68
    additive_expression            shift and go to state 58
    statement                      shift and go to state 187
    expression_stmt                shift and go to state 69
    compount_stmt                  shift and go to state 70
    selection_stmt                 shift and go to state 71
    iteration_stmt                 shift and go to state 72
    return_stmt                    shift and go to state 73
    term                           shift and go to state 54
    var                            shift and go to state 55
    simple_expression              shift and go to state 56
    print_stmt                     shift and go to state 75
    empty                          shift and go to state 17
    factor                         shift and go to state 59
    call                           shift and go to state 60
    boolean                        shift and go to state 62

state 186

    (45) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .

    BREAK           reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    ELSE            reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    CLOSE_TAG       reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    ID              reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    AMPERSANT       reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    FUNCTION        reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    REQUIRE         reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    CLASS           reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    IF              reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    SWITCH          reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    CASE            reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    DEFAULT         reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    FOR             reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    WHILE           reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    ECHO            reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    SEMICOLON       reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    LBLOCK          reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    RETURN          reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    LPAREN          reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    NUMBER          reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    TRUE            reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    FALSE           reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    RBLOCK          reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    PRIVATE         reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    PUBLIC          reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    PROTECTED       reduce using rule 45 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)


state 187

    (63) iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .

    CLOSE_TAG       reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ID              reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    AMPERSANT       reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FUNCTION        reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    REQUIRE         reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CLASS           reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    IF              reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SWITCH          reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CASE            reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    DEFAULT         reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FOR             reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    WHILE           reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ECHO            reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    BREAK           reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ELSE            reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SEMICOLON       reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LBLOCK          reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RETURN          reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LPAREN          reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    NUMBER          reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    TRUE            reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FALSE           reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RBLOCK          reduce using rule 63 (iteration_stmt -> FOR LPAREN var_declaration SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 2 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 2 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 2 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 2 resolved as shift
WARNING: shift/reduce conflict for CASE in state 2 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 2 resolved as shift
WARNING: shift/reduce conflict for FOR in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 3 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 3 resolved as shift
WARNING: shift/reduce conflict for CASE in state 3 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 9 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 9 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 9 resolved as shift
WARNING: shift/reduce conflict for ID in state 27 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 27 resolved as shift
WARNING: shift/reduce conflict for ID in state 47 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 47 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 68 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 83 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 83 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 98 resolved as shift
WARNING: shift/reduce conflict for CASE in state 98 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 98 resolved as shift
WARNING: shift/reduce conflict for FOR in state 98 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 98 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 98 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 98 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 98 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 98 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 98 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 98 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 98 resolved as shift
WARNING: shift/reduce conflict for ID in state 118 resolved as shift
WARNING: shift/reduce conflict for IF in state 118 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 118 resolved as shift
WARNING: shift/reduce conflict for CASE in state 118 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 118 resolved as shift
WARNING: shift/reduce conflict for FOR in state 118 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 118 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 118 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 118 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 118 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 118 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 118 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 118 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 118 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 122 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for IF in state 126 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 126 resolved as shift
WARNING: shift/reduce conflict for CASE in state 126 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 126 resolved as shift
WARNING: shift/reduce conflict for FOR in state 126 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 126 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 126 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 126 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 126 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 126 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 126 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 126 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 126 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 140 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 144 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 151 resolved as shift
WARNING: shift/reduce conflict for ID in state 156 resolved as shift
WARNING: shift/reduce conflict for ID in state 168 resolved as shift
WARNING: shift/reduce conflict for IF in state 168 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 168 resolved as shift
WARNING: shift/reduce conflict for CASE in state 168 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 168 resolved as shift
WARNING: shift/reduce conflict for FOR in state 168 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 168 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 168 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 168 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 168 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 168 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 168 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 168 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 168 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 174 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 180 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 180 resolved as shift
WARNING: shift/reduce conflict for IF in state 180 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 180 resolved as shift
WARNING: shift/reduce conflict for CASE in state 180 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 180 resolved as shift
WARNING: shift/reduce conflict for FOR in state 180 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 180 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 180 resolved as shift
WARNING: shift/reduce conflict for ID in state 180 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 180 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 180 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 180 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 180 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 183 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 183 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 183 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 183 resolved as shift
WARNING: shift/reduce conflict for ID in state 185 resolved as shift
WARNING: shift/reduce conflict for IF in state 185 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 185 resolved as shift
WARNING: shift/reduce conflict for CASE in state 185 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 185 resolved as shift
WARNING: shift/reduce conflict for FOR in state 185 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 185 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 185 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 185 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 185 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 185 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 185 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 185 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 185 resolved as shift
WARNING: reduce/reduce conflict in state 9 resolved using rule (declaration -> print_stmt)
WARNING: rejected rule (selection_stmt -> print_stmt) in state 9
WARNING: reduce/reduce conflict in state 9 resolved using rule (declaration -> print_stmt)
WARNING: rejected rule (iteration_stmt -> print_stmt) in state 9
WARNING: reduce/reduce conflict in state 75 resolved using rule (selection_stmt -> print_stmt)
WARNING: rejected rule (iteration_stmt -> print_stmt) in state 75
WARNING: reduce/reduce conflict in state 183 resolved using rule (selection_stmt -> print_stmt)
WARNING: rejected rule (iteration_stmt -> print_stmt) in state 183
WARNING: Rule (iteration_stmt -> print_stmt) is never reduced
